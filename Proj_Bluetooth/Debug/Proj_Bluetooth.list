
Proj_Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005284  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005560  08005560  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005568  08005568  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005568  08005568  00015568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800556c  0800556c  0001556c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000074  080055e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  080055e4  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa85  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003304  00000000  00000000  0003ab29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f78  00000000  00000000  0003de30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e28  00000000  00000000  0003eda8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a3ff  00000000  00000000  0003fbd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fa62  00000000  00000000  00059fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009012e  00000000  00000000  00069a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9b5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044cc  00000000  00000000  000f9bdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800540c 	.word	0x0800540c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800540c 	.word	0x0800540c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <HCI_TL_SPI_Init+0x84>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	4a1c      	ldr	r2, [pc, #112]	; (8000614 <HCI_TL_SPI_Init+0x84>)
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	6313      	str	r3, [r2, #48]	; 0x30
 80005a8:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <HCI_TL_SPI_Init+0x84>)
 80005aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80005b4:	2301      	movs	r3, #1
 80005b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b8:	4b17      	ldr	r3, [pc, #92]	; (8000618 <HCI_TL_SPI_Init+0x88>)
 80005ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	4619      	mov	r1, r3
 80005c6:	4815      	ldr	r0, [pc, #84]	; (800061c <HCI_TL_SPI_Init+0x8c>)
 80005c8:	f001 f962 	bl	8001890 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4619      	mov	r1, r3
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <HCI_TL_SPI_Init+0x8c>)
 80005e6:	f001 f953 	bl	8001890 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80005ea:	2302      	movs	r3, #2
 80005ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4619      	mov	r1, r3
 8000600:	4806      	ldr	r0, [pc, #24]	; (800061c <HCI_TL_SPI_Init+0x8c>)
 8000602:	f001 f945 	bl	8001890 <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 8000606:	f000 fcd9 	bl	8000fbc <BSP_SPI1_Init>
 800060a:	4603      	mov	r3, r0
}
 800060c:	4618      	mov	r0, r3
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	10110000 	.word	0x10110000
 800061c:	40020000 	.word	0x40020000

08000620 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000624:	2101      	movs	r1, #1
 8000626:	4807      	ldr	r0, [pc, #28]	; (8000644 <HCI_TL_SPI_DeInit+0x24>)
 8000628:	f001 fab4 	bl	8001b94 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 800062c:	2102      	movs	r1, #2
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <HCI_TL_SPI_DeInit+0x24>)
 8000630:	f001 fab0 	bl	8001b94 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000634:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000638:	4802      	ldr	r0, [pc, #8]	; (8000644 <HCI_TL_SPI_DeInit+0x24>)
 800063a:	f001 faab 	bl	8001b94 <HAL_GPIO_DeInit>
  return 0;
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40020000 	.word	0x40020000

08000648 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2102      	movs	r1, #2
 8000650:	480b      	ldr	r0, [pc, #44]	; (8000680 <HCI_TL_SPI_Reset+0x38>)
 8000652:	f001 fb99 	bl	8001d88 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065c:	4808      	ldr	r0, [pc, #32]	; (8000680 <HCI_TL_SPI_Reset+0x38>)
 800065e:	f001 fb93 	bl	8001d88 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000662:	2005      	movs	r0, #5
 8000664:	f000 ff8e 	bl	8001584 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <HCI_TL_SPI_Reset+0x38>)
 8000670:	f001 fb8a 	bl	8001d88 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000674:	2005      	movs	r0, #5
 8000676:	f000 ff85 	bl	8001584 <HAL_Delay>
  return 0;
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40020000 	.word	0x40020000

08000684 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8000694:	23ff      	movs	r3, #255	; 0xff
 8000696:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000698:	230b      	movs	r3, #11
 800069a:	753b      	strb	r3, [r7, #20]
 800069c:	2300      	movs	r3, #0
 800069e:	757b      	strb	r3, [r7, #21]
 80006a0:	2300      	movs	r3, #0
 80006a2:	75bb      	strb	r3, [r7, #22]
 80006a4:	2300      	movs	r3, #0
 80006a6:	75fb      	strb	r3, [r7, #23]
 80006a8:	2300      	movs	r3, #0
 80006aa:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2102      	movs	r1, #2
 80006b0:	4820      	ldr	r0, [pc, #128]	; (8000734 <HCI_TL_SPI_Receive+0xb0>)
 80006b2:	f001 fb69 	bl	8001d88 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006b6:	f107 010c 	add.w	r1, r7, #12
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2205      	movs	r2, #5
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fcab 	bl	800101c <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 80006c6:	7b3b      	ldrb	r3, [r7, #12]
 80006c8:	2b02      	cmp	r3, #2
 80006ca:	d129      	bne.n	8000720 <HCI_TL_SPI_Receive+0x9c>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80006cc:	7c3b      	ldrb	r3, [r7, #16]
 80006ce:	021b      	lsls	r3, r3, #8
 80006d0:	b21a      	sxth	r2, r3
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	b21b      	sxth	r3, r3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b21b      	sxth	r3, r3
 80006da:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 80006dc:	8bfb      	ldrh	r3, [r7, #30]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d01e      	beq.n	8000720 <HCI_TL_SPI_Receive+0x9c>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80006e2:	8bfa      	ldrh	r2, [r7, #30]
 80006e4:	887b      	ldrh	r3, [r7, #2]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d901      	bls.n	80006ee <HCI_TL_SPI_Receive+0x6a>
        byte_count = size;
 80006ea:	887b      	ldrh	r3, [r7, #2]
 80006ec:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	777b      	strb	r3, [r7, #29]
 80006f2:	e010      	b.n	8000716 <HCI_TL_SPI_Receive+0x92>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 80006f4:	f107 011b 	add.w	r1, r7, #27
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	2201      	movs	r2, #1
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fc8c 	bl	800101c <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8000704:	7f7b      	ldrb	r3, [r7, #29]
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	7efa      	ldrb	r2, [r7, #27]
 800070c:	b2d2      	uxtb	r2, r2
 800070e:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000710:	7f7b      	ldrb	r3, [r7, #29]
 8000712:	3301      	adds	r3, #1
 8000714:	777b      	strb	r3, [r7, #29]
 8000716:	7f7b      	ldrb	r3, [r7, #29]
 8000718:	b29b      	uxth	r3, r3
 800071a:	8bfa      	ldrh	r2, [r7, #30]
 800071c:	429a      	cmp	r2, r3
 800071e:	d8e9      	bhi.n	80006f4 <HCI_TL_SPI_Receive+0x70>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2102      	movs	r1, #2
 8000724:	4803      	ldr	r0, [pc, #12]	; (8000734 <HCI_TL_SPI_Receive+0xb0>)
 8000726:	f001 fb2f 	bl	8001d88 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 800072a:	7f7b      	ldrb	r3, [r7, #29]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3720      	adds	r7, #32
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40020000 	.word	0x40020000

08000738 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000744:	230a      	movs	r3, #10
 8000746:	743b      	strb	r3, [r7, #16]
 8000748:	2300      	movs	r3, #0
 800074a:	747b      	strb	r3, [r7, #17]
 800074c:	2300      	movs	r3, #0
 800074e:	74bb      	strb	r3, [r7, #18]
 8000750:	2300      	movs	r3, #0
 8000752:	74fb      	strb	r3, [r7, #19]
 8000754:	2300      	movs	r3, #0
 8000756:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8000758:	f000 ff08 	bl	800156c <HAL_GetTick>
 800075c:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2102      	movs	r1, #2
 8000766:	481c      	ldr	r0, [pc, #112]	; (80007d8 <HCI_TL_SPI_Send+0xa0>)
 8000768:	f001 fb0e 	bl	8001d88 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800076c:	f107 0108 	add.w	r1, r7, #8
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	2205      	movs	r2, #5
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fc50 	bl	800101c <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 800077c:	7a3b      	ldrb	r3, [r7, #8]
 800077e:	2b02      	cmp	r3, #2
 8000780:	d10f      	bne.n	80007a2 <HCI_TL_SPI_Send+0x6a>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8000782:	7a7b      	ldrb	r3, [r7, #9]
 8000784:	b29b      	uxth	r3, r3
 8000786:	887a      	ldrh	r2, [r7, #2]
 8000788:	429a      	cmp	r2, r3
 800078a:	d806      	bhi.n	800079a <HCI_TL_SPI_Send+0x62>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 800078c:	887b      	ldrh	r3, [r7, #2]
 800078e:	461a      	mov	r2, r3
 8000790:	4912      	ldr	r1, [pc, #72]	; (80007dc <HCI_TL_SPI_Send+0xa4>)
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f000 fc42 	bl	800101c <BSP_SPI1_SendRecv>
 8000798:	e006      	b.n	80007a8 <HCI_TL_SPI_Send+0x70>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 800079a:	f06f 0301 	mvn.w	r3, #1
 800079e:	61fb      	str	r3, [r7, #28]
 80007a0:	e002      	b.n	80007a8 <HCI_TL_SPI_Send+0x70>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2102      	movs	r1, #2
 80007ac:	480a      	ldr	r0, [pc, #40]	; (80007d8 <HCI_TL_SPI_Send+0xa0>)
 80007ae:	f001 faeb 	bl	8001d88 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80007b2:	f000 fedb 	bl	800156c <HAL_GetTick>
 80007b6:	4602      	mov	r2, r0
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	2b0f      	cmp	r3, #15
 80007be:	d903      	bls.n	80007c8 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 80007c0:	f06f 0302 	mvn.w	r3, #2
 80007c4:	61fb      	str	r3, [r7, #28]
      break;
 80007c6:	e002      	b.n	80007ce <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	dbc7      	blt.n	800075e <HCI_TL_SPI_Send+0x26>

  return result;
 80007ce:	69fb      	ldr	r3, [r7, #28]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40020000 	.word	0x40020000
 80007dc:	20000090 	.word	0x20000090

080007e0 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80007e4:	2101      	movs	r1, #1
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <IsDataAvailable+0x1c>)
 80007e8:	f001 fab6 	bl	8001d58 <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	bf0c      	ite	eq
 80007f2:	2301      	moveq	r3, #1
 80007f4:	2300      	movne	r3, #0
 80007f6:	b2db      	uxtb	r3, r3
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40020000 	.word	0x40020000

08000800 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <hci_tl_lowlevel_init+0x54>)
 8000808:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <hci_tl_lowlevel_init+0x58>)
 800080c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <hci_tl_lowlevel_init+0x5c>)
 8000810:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <hci_tl_lowlevel_init+0x60>)
 8000814:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <hci_tl_lowlevel_init+0x64>)
 8000818:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <hci_tl_lowlevel_init+0x68>)
 800081c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4618      	mov	r0, r3
 8000822:	f003 fbb5 	bl	8003f90 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8000826:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 800082a:	4810      	ldr	r0, [pc, #64]	; (800086c <hci_tl_lowlevel_init+0x6c>)
 800082c:	f000 fff7 	bl	800181e <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000830:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <hci_tl_lowlevel_init+0x70>)
 8000832:	2100      	movs	r1, #0
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <hci_tl_lowlevel_init+0x6c>)
 8000836:	f000 ffd8 	bl	80017ea <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	2006      	movs	r0, #6
 8000840:	f000 ff9d 	bl	800177e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000844:	2006      	movs	r0, #6
 8000846:	f000 ffb6 	bl	80017b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800084a:	bf00      	nop
 800084c:	3720      	adds	r7, #32
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	08000591 	.word	0x08000591
 8000858:	08000621 	.word	0x08000621
 800085c:	08000739 	.word	0x08000739
 8000860:	08000685 	.word	0x08000685
 8000864:	08000649 	.word	0x08000649
 8000868:	0800105d 	.word	0x0800105d
 800086c:	20000488 	.word	0x20000488
 8000870:	08000875 	.word	0x08000875

08000874 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000878:	e005      	b.n	8000886 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800087a:	2000      	movs	r0, #0
 800087c:	f003 fcea 	bl	8004254 <hci_notify_asynch_evt>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d105      	bne.n	8000892 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8000886:	f7ff ffab 	bl	80007e0 <IsDataAvailable>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1f4      	bne.n	800087a <hci_tl_lowlevel_isr+0x6>
 8000890:	e000      	b.n	8000894 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8000892:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <MX_BlueNRG_MS_Init>:
static void userChat();

/*
 * Initialization of BlueNRG module
 */
void MX_BlueNRG_MS_Init() {
 8000898:	b5b0      	push	{r4, r5, r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af02      	add	r7, sp, #8
	const char* name = "Preis";
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <MX_BlueNRG_MS_Init+0x94>)
 80008a0:	61fb      	str	r3, [r7, #28]
	uint8_t SERVER_BDADDR[] = {0x01,0x02,0x03,0x04,0x05,0x06};
 80008a2:	4a23      	ldr	r2, [pc, #140]	; (8000930 <MX_BlueNRG_MS_Init+0x98>)
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ac:	6018      	str	r0, [r3, #0]
 80008ae:	3304      	adds	r3, #4
 80008b0:	8019      	strh	r1, [r3, #0]
	uint8_t bdaddr[BDADDR_SIZE];

	uint16_t service_handle, dev_name_char_handle, appearance_char_handle;

	hci_init(user_notify, NULL);
 80008b2:	2100      	movs	r1, #0
 80008b4:	481f      	ldr	r0, [pc, #124]	; (8000934 <MX_BlueNRG_MS_Init+0x9c>)
 80008b6:	f003 fb29 	bl	8003f0c <hci_init>
	hci_reset();
 80008ba:	f003 fa2c 	bl	8003d16 <hci_reset>
	HAL_Delay(100);
 80008be:	2064      	movs	r0, #100	; 0x64
 80008c0:	f000 fe60 	bl	8001584 <HAL_Delay>

	BLUENRG_memcpy(bdaddr,SERVER_BDADDR, sizeof(SERVER_BDADDR));
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	f107 0214 	add.w	r2, r7, #20
 80008cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008d0:	6018      	str	r0, [r3, #0]
 80008d2:	3304      	adds	r3, #4
 80008d4:	8019      	strh	r1, [r3, #0]

	aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN,bdaddr);
 80008d6:	f107 030c 	add.w	r3, r7, #12
 80008da:	461a      	mov	r2, r3
 80008dc:	2106      	movs	r1, #6
 80008de:	2000      	movs	r0, #0
 80008e0:	f003 f9b1 	bl	8003c46 <aci_hal_write_config_data>
	aci_gatt_init();
 80008e4:	f002 ff9b 	bl	800381e <aci_gatt_init>

	//IDB05A1 BLE
	aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80008e8:	f107 020a 	add.w	r2, r7, #10
 80008ec:	1dbb      	adds	r3, r7, #6
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	4613      	mov	r3, r2
 80008f8:	2207      	movs	r2, #7
 80008fa:	2100      	movs	r1, #0
 80008fc:	2001      	movs	r0, #1
 80008fe:	f002 fe4f 	bl	80035a0 <aci_gap_init_IDB05A1>

	aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), (uint8_t*)name);
 8000902:	897c      	ldrh	r4, [r7, #10]
 8000904:	893d      	ldrh	r5, [r7, #8]
 8000906:	69f8      	ldr	r0, [r7, #28]
 8000908:	f7ff fc6a 	bl	80001e0 <strlen>
 800090c:	4603      	mov	r3, r0
 800090e:	b2da      	uxtb	r2, r3
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	4613      	mov	r3, r2
 8000916:	2200      	movs	r2, #0
 8000918:	4629      	mov	r1, r5
 800091a:	4620      	mov	r0, r4
 800091c:	f003 f900 	bl	8003b20 <aci_gatt_update_char_value>

	//add services
	addServices();
 8000920:	f000 f88a 	bl	8000a38 <addServices>

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bdb0      	pop	{r4, r5, r7, pc}
 800092c:	08005424 	.word	0x08005424
 8000930:	0800542c 	.word	0x0800542c
 8000934:	08000c49 	.word	0x08000c49

08000938 <MX_BlueNRG_MS_Process>:

/*
 * Initialization of BlueNRG process
 */
void MX_BlueNRG_MS_Process() {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	userChat();
 800093c:	f000 f804 	bl	8000948 <userChat>
	hci_user_evt_proc();
 8000940:	f003 fc5e 	bl	8004200 <hci_user_evt_proc>
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}

08000948 <userChat>:
/*
 * user chat function
 */
static void userChat() {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
	if(set_connectable) {
 800094e:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <userChat+0x88>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2b00      	cmp	r3, #0
 8000956:	d00d      	beq.n	8000974 <userChat+0x2c>
		make_connection();
 8000958:	f000 f846 	bl	80009e8 <make_connection>
		set_connectable = FALSE;
 800095c:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <userChat+0x88>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
		button_init_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000966:	481b      	ldr	r0, [pc, #108]	; (80009d4 <userChat+0x8c>)
 8000968:	f001 f9f6 	bl	8001d58 <HAL_GPIO_ReadPin>
 800096c:	4603      	mov	r3, r0
 800096e:	461a      	mov	r2, r3
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <userChat+0x90>)
 8000972:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != button_init_state) {
 8000974:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000978:	4816      	ldr	r0, [pc, #88]	; (80009d4 <userChat+0x8c>)
 800097a:	f001 f9ed 	bl	8001d58 <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <userChat+0x90>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	429a      	cmp	r2, r3
 8000988:	d01d      	beq.n	80009c6 <userChat+0x7e>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != button_init_state);
 800098a:	bf00      	nop
 800098c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000990:	4810      	ldr	r0, [pc, #64]	; (80009d4 <userChat+0x8c>)
 8000992:	f001 f9e1 	bl	8001d58 <HAL_GPIO_ReadPin>
 8000996:	4603      	mov	r3, r0
 8000998:	461a      	mov	r2, r3
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <userChat+0x90>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d1f4      	bne.n	800098c <userChat+0x44>

		if(connected && notification_enabled) {
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <userChat+0x94>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d00c      	beq.n	80009c6 <userChat+0x7e>
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <userChat+0x98>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d007      	beq.n	80009c6 <userChat+0x7e>
			uint8_t data[2] = {'a','b'};
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <userChat+0x9c>)
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	80bb      	strh	r3, [r7, #4]
			sendData(data, 2);
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2102      	movs	r1, #2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 f8a7 	bl	8000b14 <sendData>
		}
	}
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000000 	.word	0x20000000
 80009d4:	40020800 	.word	0x40020800
 80009d8:	2000018f 	.word	0x2000018f
 80009dc:	20000190 	.word	0x20000190
 80009e0:	20000194 	.word	0x20000194
 80009e4:	08005434 	.word	0x08005434

080009e8 <make_connection>:

static void make_connection() {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af08      	add	r7, sp, #32
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','L','E','-','A','X','G'};
 80009ee:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <make_connection+0x4c>)
 80009f0:	463b      	mov	r3, r7
 80009f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009f6:	e883 0003 	stmia.w	r3, {r0, r1}

	hci_le_set_scan_resp_data(0, NULL);
 80009fa:	2100      	movs	r1, #0
 80009fc:	2000      	movs	r0, #0
 80009fe:	f003 f9ac 	bl	8003d5a <hci_le_set_scan_resp_data>

	aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR,NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 8000a02:	2300      	movs	r3, #0
 8000a04:	9306      	str	r3, [sp, #24]
 8000a06:	2300      	movs	r3, #0
 8000a08:	9305      	str	r3, [sp, #20]
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	9304      	str	r3, [sp, #16]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	9303      	str	r3, [sp, #12]
 8000a12:	463b      	mov	r3, r7
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	2308      	movs	r3, #8
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	2000      	movs	r0, #0
 8000a26:	f002 fe0b 	bl	8003640 <aci_gap_set_discoverable>

}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	08005438 	.word	0x08005438

08000a38 <addServices>:
/*
 * @brief add services to the devices
 *
 */

tBleStatus addServices(void) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b088      	sub	sp, #32
 8000a3c:	af06      	add	r7, sp, #24

	tBleStatus ret;

	aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &myServiceHandle);
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <addServices+0x74>)
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2307      	movs	r3, #7
 8000a44:	2201      	movs	r2, #1
 8000a46:	491a      	ldr	r1, [pc, #104]	; (8000ab0 <addServices+0x78>)
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f002 ff0b 	bl	8003864 <aci_gatt_add_serv>
	ret = aci_gatt_add_char(myServiceHandle, UUID_TYPE_128, charTx_uuid, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, GATT_DONT_NOTIFY_EVENTS, 16, 0, &myCharTxHandle);
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <addServices+0x74>)
 8000a50:	8818      	ldrh	r0, [r3, #0]
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <addServices+0x7c>)
 8000a54:	9305      	str	r3, [sp, #20]
 8000a56:	2300      	movs	r3, #0
 8000a58:	9304      	str	r3, [sp, #16]
 8000a5a:	2310      	movs	r3, #16
 8000a5c:	9303      	str	r3, [sp, #12]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	9302      	str	r3, [sp, #8]
 8000a62:	2300      	movs	r3, #0
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	2310      	movs	r3, #16
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2314      	movs	r3, #20
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <addServices+0x80>)
 8000a6e:	2102      	movs	r1, #2
 8000a70:	f002 ff84 	bl	800397c <aci_gatt_add_char>
 8000a74:	4603      	mov	r3, r0
 8000a76:	71fb      	strb	r3, [r7, #7]
	ret = aci_gatt_add_char(myServiceHandle, UUID_TYPE_128, charRx_uuid, 20, CHAR_PROP_WRITE |CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE, 16, 1, &myCharRxHandle);
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <addServices+0x74>)
 8000a7a:	8818      	ldrh	r0, [r3, #0]
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <addServices+0x84>)
 8000a7e:	9305      	str	r3, [sp, #20]
 8000a80:	2301      	movs	r3, #1
 8000a82:	9304      	str	r3, [sp, #16]
 8000a84:	2310      	movs	r3, #16
 8000a86:	9303      	str	r3, [sp, #12]
 8000a88:	2301      	movs	r3, #1
 8000a8a:	9302      	str	r3, [sp, #8]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	230c      	movs	r3, #12
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	2314      	movs	r3, #20
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <addServices+0x88>)
 8000a98:	2102      	movs	r1, #2
 8000a9a:	f002 ff6f 	bl	800397c <aci_gatt_add_char>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]

	return ret;
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000492 	.word	0x20000492
 8000ab0:	08005480 	.word	0x08005480
 8000ab4:	20000494 	.word	0x20000494
 8000ab8:	08005490 	.word	0x08005490
 8000abc:	20000490 	.word	0x20000490
 8000ac0:	080054a0 	.word	0x080054a0

08000ac4 <receiveData>:

/*
 * @brief receive data
 */
void receiveData(uint8_t *dataBuffer, uint8_t dataLen) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	460b      	mov	r3, r1
 8000ace:	70fb      	strb	r3, [r7, #3]
	uint8_t recData[30];
	memset(recData,0,sizeof(recData));
 8000ad0:	f107 0308 	add.w	r3, r7, #8
 8000ad4:	221e      	movs	r2, #30
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 fd46 	bl	800456a <memset>

	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000ade:	2120      	movs	r1, #32
 8000ae0:	480a      	ldr	r0, [pc, #40]	; (8000b0c <receiveData+0x48>)
 8000ae2:	f001 f96a 	bl	8001dba <HAL_GPIO_TogglePin>

	memcpy(recData,dataBuffer,dataLen);
 8000ae6:	78fa      	ldrb	r2, [r7, #3]
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	6879      	ldr	r1, [r7, #4]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f003 fd30 	bl	8004554 <memcpy>
	HAL_UART_Transmit(&huart1, recData, dataLen, 100);
 8000af4:	78fb      	ldrb	r3, [r7, #3]
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	f107 0108 	add.w	r1, r7, #8
 8000afc:	2364      	movs	r3, #100	; 0x64
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <receiveData+0x4c>)
 8000b00:	f002 f8ef 	bl	8002ce2 <HAL_UART_Transmit>

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	; 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40020000 	.word	0x40020000
 8000b10:	200004f0 	.word	0x200004f0

08000b14 <sendData>:

/*
 * @brief send data
 */
void sendData(uint8_t *dataBuffer, uint8_t dataLen) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	70fb      	strb	r3, [r7, #3]
	aci_gatt_update_char_value(myServiceHandle, myCharTxHandle, 0, dataLen, dataBuffer);
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <sendData+0x2c>)
 8000b22:	8818      	ldrh	r0, [r3, #0]
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <sendData+0x30>)
 8000b26:	8819      	ldrh	r1, [r3, #0]
 8000b28:	78fa      	ldrb	r2, [r7, #3]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	2200      	movs	r2, #0
 8000b32:	f002 fff5 	bl	8003b20 <aci_gatt_update_char_value>

}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000492 	.word	0x20000492
 8000b44:	20000494 	.word	0x20000494

08000b48 <attribute_Modified_CB>:

/*
 * @brief attribute modified CB
 */
void attribute_Modified_CB(uint16_t handle, uint8_t dataLen, uint8_t *attData) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	603a      	str	r2, [r7, #0]
 8000b52:	80fb      	strh	r3, [r7, #6]
 8000b54:	460b      	mov	r3, r1
 8000b56:	717b      	strb	r3, [r7, #5]

	if(handle == myCharRxHandle+1){
 8000b58:	88fa      	ldrh	r2, [r7, #6]
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <attribute_Modified_CB+0x4c>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d105      	bne.n	8000b70 <attribute_Modified_CB+0x28>
		receiveData(attData, dataLen);
 8000b64:	797b      	ldrb	r3, [r7, #5]
 8000b66:	4619      	mov	r1, r3
 8000b68:	6838      	ldr	r0, [r7, #0]
 8000b6a:	f7ff ffab 	bl	8000ac4 <receiveData>
	} else if(handle == myCharTxHandle+2) {
		if(attData[0] == 0x01) {
			notification_enabled = TRUE;
		}
	}
}
 8000b6e:	e00c      	b.n	8000b8a <attribute_Modified_CB+0x42>
	} else if(handle == myCharTxHandle+2) {
 8000b70:	88fa      	ldrh	r2, [r7, #6]
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <attribute_Modified_CB+0x50>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	3302      	adds	r3, #2
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d106      	bne.n	8000b8a <attribute_Modified_CB+0x42>
		if(attData[0] == 0x01) {
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d102      	bne.n	8000b8a <attribute_Modified_CB+0x42>
			notification_enabled = TRUE;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <attribute_Modified_CB+0x54>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000490 	.word	0x20000490
 8000b98:	20000494 	.word	0x20000494
 8000b9c:	20000194 	.word	0x20000194

08000ba0 <GAP_ConnectionComplete_CB>:
/*
 * @brief BLE connection complete CB
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	807b      	strh	r3, [r7, #2]

//#Todo: connection complete
	connected = TRUE;
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <GAP_ConnectionComplete_CB+0x48>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
	connection_handle = handle;
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <GAP_ConnectionComplete_CB+0x4c>)
 8000bb4:	887b      	ldrh	r3, [r7, #2]
 8000bb6:	8013      	strh	r3, [r2, #0]
	printf("Connected to the Device:\r\n");
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <GAP_ConnectionComplete_CB+0x50>)
 8000bba:	f003 fd53 	bl	8004664 <puts>

	for(int i = 5; i>=0; i--){
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	e00a      	b.n	8000bda <GAP_ConnectionComplete_CB+0x3a>
		printf("%02X-\r\n",addr[i]);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <GAP_ConnectionComplete_CB+0x54>)
 8000bd0:	f003 fcd4 	bl	800457c <iprintf>
	for(int i = 5; i>=0; i--){
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	daf1      	bge.n	8000bc4 <GAP_ConnectionComplete_CB+0x24>
	}


}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000190 	.word	0x20000190
 8000bec:	20000192 	.word	0x20000192
 8000bf0:	08005440 	.word	0x08005440
 8000bf4:	0800545c 	.word	0x0800545c

08000bf8 <GAP_DisconnectionComplete_CB>:

/*
 * @brief BLE disconnection complete CB
 */
void GAP_DisconnectionComplete_CB(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0

//#Todo: connection complete
	connected= FALSE;
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <GAP_DisconnectionComplete_CB+0x34>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
	printf("Disconnected the device:\r\n");
 8000c02:	480b      	ldr	r0, [pc, #44]	; (8000c30 <GAP_DisconnectionComplete_CB+0x38>)
 8000c04:	f003 fd2e 	bl	8004664 <puts>
	set_connectable = TRUE;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <GAP_DisconnectionComplete_CB+0x3c>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]

	start_read_tx_char_handle = FALSE;
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <GAP_DisconnectionComplete_CB+0x40>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
	start_read_rx_char_handle = FALSE;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <GAP_DisconnectionComplete_CB+0x44>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
	end_read_rx_char_handle = FALSE;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <GAP_DisconnectionComplete_CB+0x48>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
	end_read_tx_char_handle = FALSE;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <GAP_DisconnectionComplete_CB+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000190 	.word	0x20000190
 8000c30:	08005464 	.word	0x08005464
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000195 	.word	0x20000195
 8000c3c:	20000196 	.word	0x20000196
 8000c40:	20000197 	.word	0x20000197
 8000c44:	20000198 	.word	0x20000198

08000c48 <user_notify>:
//}

/*
 * @brief user_notify events
 */
void user_notify(void *pdata) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

	hci_uart_pckt *hci_pckt = pdata;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	61fb      	str	r3, [r7, #28]
	hci_event_pckt *event_pckt = (hci_event_pckt *)hci_pckt->data;
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	3301      	adds	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]

	if(hci_pckt->type != HCI_EVENT_PKT)
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	d13d      	bne.n	8000cde <user_notify+0x96>
		return;

	switch(event_pckt->evt) {
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b3e      	cmp	r3, #62	; 0x3e
 8000c68:	d006      	beq.n	8000c78 <user_notify+0x30>
 8000c6a:	2bff      	cmp	r3, #255	; 0xff
 8000c6c:	d01b      	beq.n	8000ca6 <user_notify+0x5e>
 8000c6e:	2b05      	cmp	r3, #5
 8000c70:	d136      	bne.n	8000ce0 <user_notify+0x98>

		case EVT_DISCONN_COMPLETE:
		{
			GAP_DisconnectionComplete_CB();
 8000c72:	f7ff ffc1 	bl	8000bf8 <GAP_DisconnectionComplete_CB>
		}
		break;
 8000c76:	e033      	b.n	8000ce0 <user_notify+0x98>

		case EVT_LE_META_EVENT:
		{
			evt_le_meta_event *evt = (void *)event_pckt->data;
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	3302      	adds	r3, #2
 8000c7c:	60fb      	str	r3, [r7, #12]

			switch(evt->subevent)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d000      	beq.n	8000c88 <user_notify+0x40>

				}
				break;
			}
		}
		break;
 8000c86:	e02b      	b.n	8000ce0 <user_notify+0x98>
					evt_le_connection_complete *cc = (void *)evt->data;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	60bb      	str	r3, [r7, #8]
					GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	1d5a      	adds	r2, r3, #5
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	f7ff ff7f 	bl	8000ba0 <GAP_ConnectionComplete_CB>
				break;
 8000ca2:	bf00      	nop
		break;
 8000ca4:	e01c      	b.n	8000ce0 <user_notify+0x98>

		case EVT_VENDOR:
		{
			evt_blue_aci *blue_evt = (void *)event_pckt->data;
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	3302      	adds	r3, #2
 8000caa:	617b      	str	r3, [r7, #20]

			switch(blue_evt->ecode)
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	f640 4301 	movw	r3, #3073	; 0xc01
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d000      	beq.n	8000cbe <user_notify+0x76>
				attribute_Modified_CB(evt->attr_handle,evt->data_length,evt->att_data);
			}
			break;
			}
		}
		break;
 8000cbc:	e010      	b.n	8000ce0 <user_notify+0x98>
				evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*) blue_evt->data;
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	613b      	str	r3, [r7, #16]
				attribute_Modified_CB(evt->attr_handle,evt->data_length,evt->att_data);
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	885b      	ldrh	r3, [r3, #2]
 8000cc8:	b298      	uxth	r0, r3
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	7919      	ldrb	r1, [r3, #4]
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	3307      	adds	r3, #7
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	f7ff ff38 	bl	8000b48 <attribute_Modified_CB>
			break;
 8000cd8:	bf00      	nop
		break;
 8000cda:	bf00      	nop
 8000cdc:	e000      	b.n	8000ce0 <user_notify+0x98>
		return;
 8000cde:	bf00      	nop
	}
}
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <MX_GPIO_Init+0xfc>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a37      	ldr	r2, [pc, #220]	; (8000de4 <MX_GPIO_Init+0xfc>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <MX_GPIO_Init+0xfc>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <MX_GPIO_Init+0xfc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a30      	ldr	r2, [pc, #192]	; (8000de4 <MX_GPIO_Init+0xfc>)
 8000d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b2e      	ldr	r3, [pc, #184]	; (8000de4 <MX_GPIO_Init+0xfc>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <MX_GPIO_Init+0xfc>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a29      	ldr	r2, [pc, #164]	; (8000de4 <MX_GPIO_Init+0xfc>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <MX_GPIO_Init+0xfc>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <MX_GPIO_Init+0xfc>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a22      	ldr	r2, [pc, #136]	; (8000de4 <MX_GPIO_Init+0xfc>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <MX_GPIO_Init+0xfc>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LED_GREEN_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f240 3122 	movw	r1, #802	; 0x322
 8000d74:	481c      	ldr	r0, [pc, #112]	; (8000de8 <MX_GPIO_Init+0x100>)
 8000d76:	f001 f807 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_3;
 8000d7a:	f242 0308 	movw	r3, #8200	; 0x2008
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_GPIO_Init+0x104>)
 8000d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4818      	ldr	r0, [pc, #96]	; (8000df0 <MX_GPIO_Init+0x108>)
 8000d90:	f000 fd7e 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d94:	2301      	movs	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_GPIO_Init+0x104>)
 8000d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	4810      	ldr	r0, [pc, #64]	; (8000de8 <MX_GPIO_Init+0x100>)
 8000da8:	f000 fd72 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PAPin PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LED_GREEN_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8000dac:	f240 3322 	movw	r3, #802	; 0x322
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4808      	ldr	r0, [pc, #32]	; (8000de8 <MX_GPIO_Init+0x100>)
 8000dc6:	f000 fd63 	bl	8001890 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2006      	movs	r0, #6
 8000dd0:	f000 fcd5 	bl	800177e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000dd4:	2006      	movs	r0, #6
 8000dd6:	f000 fcee 	bl	80017b6 <HAL_NVIC_EnableIRQ>

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	; 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020000 	.word	0x40020000
 8000dec:	10110000 	.word	0x10110000
 8000df0:	40020800 	.word	0x40020800

08000df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df8:	f000 fb52 	bl	80014a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dfc:	f000 f80a 	bl	8000e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e00:	f7ff ff72 	bl	8000ce8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e04:	f000 fa90 	bl	8001328 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  MX_BlueNRG_MS_Init();
 8000e08:	f7ff fd46 	bl	8000898 <MX_BlueNRG_MS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_BlueNRG_MS_Process();
 8000e0c:	f7ff fd94 	bl	8000938 <MX_BlueNRG_MS_Process>
 8000e10:	e7fc      	b.n	8000e0c <main+0x18>
	...

08000e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b094      	sub	sp, #80	; 0x50
 8000e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 0320 	add.w	r3, r7, #32
 8000e1e:	2230      	movs	r2, #48	; 0x30
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 fba1 	bl	800456a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <SystemClock_Config+0xd0>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	4a28      	ldr	r2, [pc, #160]	; (8000ee4 <SystemClock_Config+0xd0>)
 8000e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e46:	6413      	str	r3, [r2, #64]	; 0x40
 8000e48:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <SystemClock_Config+0xd0>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <SystemClock_Config+0xd4>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e60:	4a21      	ldr	r2, [pc, #132]	; (8000ee8 <SystemClock_Config+0xd4>)
 8000e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <SystemClock_Config+0xd4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e74:	2302      	movs	r3, #2
 8000e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e80:	2302      	movs	r3, #2
 8000e82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e84:	2300      	movs	r3, #0
 8000e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e88:	2310      	movs	r3, #16
 8000e8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e8c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e92:	2304      	movs	r3, #4
 8000e94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e96:	2307      	movs	r3, #7
 8000e98:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9a:	f107 0320 	add.w	r3, r7, #32
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 ffa6 	bl	8001df0 <HAL_RCC_OscConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000eaa:	f000 f81f 	bl	8000eec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eae:	230f      	movs	r3, #15
 8000eb0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	2102      	movs	r1, #2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f001 fa00 	bl	80022d0 <HAL_RCC_ClockConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ed6:	f000 f809 	bl	8000eec <Error_Handler>
  }
}
 8000eda:	bf00      	nop
 8000edc:	3750      	adds	r7, #80	; 0x50
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40007000 	.word	0x40007000

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
	...

08000efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a0f      	ldr	r2, [pc, #60]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	603b      	str	r3, [r7, #0]
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_MspInit+0x4c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f3a:	2007      	movs	r0, #7
 8000f3c:	f000 fc14 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40023800 	.word	0x40023800

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <MemManage_Handler+0x4>

08000f66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa0:	f000 fad0 	bl	8001544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <EXTI0_IRQHandler+0x10>)
 8000fae:	f000 fc4b 	bl	8001848 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000488 	.word	0x20000488

08000fbc <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <BSP_SPI1_Init+0x54>)
 8000fc8:	4a12      	ldr	r2, [pc, #72]	; (8001014 <BSP_SPI1_Init+0x58>)
 8000fca:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <BSP_SPI1_Init+0x5c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	4911      	ldr	r1, [pc, #68]	; (8001018 <BSP_SPI1_Init+0x5c>)
 8000fd4:	600a      	str	r2, [r1, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d114      	bne.n	8001004 <BSP_SPI1_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000fda:	480d      	ldr	r0, [pc, #52]	; (8001010 <BSP_SPI1_Init+0x54>)
 8000fdc:	f001 fd7a 	bl	8002ad4 <HAL_SPI_GetState>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10e      	bne.n	8001004 <BSP_SPI1_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 8000fe6:	480a      	ldr	r0, [pc, #40]	; (8001010 <BSP_SPI1_Init+0x54>)
 8000fe8:	f000 f87c 	bl	80010e4 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d108      	bne.n	8001004 <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000ff2:	4807      	ldr	r0, [pc, #28]	; (8001010 <BSP_SPI1_Init+0x54>)
 8000ff4:	f000 f83a 	bl	800106c <MX_SPI1_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 8000ffe:	f06f 0307 	mvn.w	r3, #7
 8001002:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 8001004:	687b      	ldr	r3, [r7, #4]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000498 	.word	0x20000498
 8001014:	40013000 	.word	0x40013000
 8001018:	2000019c 	.word	0x2000019c

0800101c <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af02      	add	r7, sp, #8
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	4613      	mov	r3, r2
 8001028:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800102e:	88fa      	ldrh	r2, [r7, #6]
 8001030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	4613      	mov	r3, r2
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	68f9      	ldr	r1, [r7, #12]
 800103c:	4806      	ldr	r0, [pc, #24]	; (8001058 <BSP_SPI1_SendRecv+0x3c>)
 800103e:	f001 fba7 	bl	8002790 <HAL_SPI_TransmitReceive>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d002      	beq.n	800104e <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001048:	f06f 0305 	mvn.w	r3, #5
 800104c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800104e:	697b      	ldr	r3, [r7, #20]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000498 	.word	0x20000498

0800105c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001060:	f000 fa84 	bl	800156c <HAL_GetTick>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <MX_SPI1_Init+0x74>)
 800107c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001084:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a4:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2218      	movs	r2, #24
 80010aa:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	220a      	movs	r2, #10
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f001 faf5 	bl	80026b4 <HAL_SPI_Init>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40013000 	.word	0x40013000

080010e4 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <SPI1_MspInit+0xc4>)
 80010f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f4:	4a2c      	ldr	r2, [pc, #176]	; (80011a8 <SPI1_MspInit+0xc4>)
 80010f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010fa:	6453      	str	r3, [r2, #68]	; 0x44
 80010fc:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <SPI1_MspInit+0xc4>)
 80010fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <SPI1_MspInit+0xc4>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <SPI1_MspInit+0xc4>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6313      	str	r3, [r2, #48]	; 0x30
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <SPI1_MspInit+0xc4>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <SPI1_MspInit+0xc4>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	4a1e      	ldr	r2, [pc, #120]	; (80011a8 <SPI1_MspInit+0xc4>)
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	6313      	str	r3, [r2, #48]	; 0x30
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <SPI1_MspInit+0xc4>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001140:	2340      	movs	r3, #64	; 0x40
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001150:	2305      	movs	r3, #5
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4814      	ldr	r0, [pc, #80]	; (80011ac <SPI1_MspInit+0xc8>)
 800115c:	f000 fb98 	bl	8001890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001170:	2305      	movs	r3, #5
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	480c      	ldr	r0, [pc, #48]	; (80011ac <SPI1_MspInit+0xc8>)
 800117c:	f000 fb88 	bl	8001890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001180:	2308      	movs	r3, #8
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001190:	2305      	movs	r3, #5
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <SPI1_MspInit+0xcc>)
 800119c:	f000 fb78 	bl	8001890 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020400 	.word	0x40020400

080011b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	e00a      	b.n	80011dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011c6:	f3af 8000 	nop.w
 80011ca:	4601      	mov	r1, r0
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	60ba      	str	r2, [r7, #8]
 80011d2:	b2ca      	uxtb	r2, r1
 80011d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3301      	adds	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dbf0      	blt.n	80011c6 <_read+0x12>
	}

return len;
 80011e4:	687b      	ldr	r3, [r7, #4]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	e009      	b.n	8001214 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	60ba      	str	r2, [r7, #8]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	dbf1      	blt.n	8001200 <_write+0x12>
	}
	return len;
 800121c:	687b      	ldr	r3, [r7, #4]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <_close>:

int _close(int file)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
	return -1;
 800122e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800124e:	605a      	str	r2, [r3, #4]
	return 0;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <_isatty>:

int _isatty(int file)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
	return 1;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
	return 0;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001298:	4a14      	ldr	r2, [pc, #80]	; (80012ec <_sbrk+0x5c>)
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <_sbrk+0x60>)
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <_sbrk+0x64>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <_sbrk+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d207      	bcs.n	80012d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c0:	f003 f91e 	bl	8004500 <__errno>
 80012c4:	4602      	mov	r2, r0
 80012c6:	230c      	movs	r3, #12
 80012c8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
 80012ce:	e009      	b.n	80012e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <_sbrk+0x64>)
 80012e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20018000 	.word	0x20018000
 80012f0:	00000400 	.word	0x00000400
 80012f4:	200001a0 	.word	0x200001a0
 80012f8:	20000548 	.word	0x20000548

080012fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <SystemInit+0x28>)
 8001302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001306:	4a07      	ldr	r2, [pc, #28]	; (8001324 <SystemInit+0x28>)
 8001308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800130c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <SystemInit+0x28>)
 8001312:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001316:	609a      	str	r2, [r3, #8]
#endif
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 800132e:	4a12      	ldr	r2, [pc, #72]	; (8001378 <MX_USART1_UART_Init+0x50>)
 8001330:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 8001334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001338:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 800134e:	220c      	movs	r2, #12
 8001350:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_USART1_UART_Init+0x4c>)
 8001360:	f001 fc72 	bl	8002c48 <HAL_UART_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800136a:	f7ff fdbf 	bl	8000eec <Error_Handler>
  }

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200004f0 	.word	0x200004f0
 8001378:	40011000 	.word	0x40011000

0800137c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a28      	ldr	r2, [pc, #160]	; (800143c <HAL_UART_MspInit+0xc0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d14a      	bne.n	8001434 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b27      	ldr	r3, [pc, #156]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a26      	ldr	r2, [pc, #152]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013a8:	f043 0310 	orr.w	r3, r3, #16
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b24      	ldr	r3, [pc, #144]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f003 0310 	and.w	r3, r3, #16
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a1f      	ldr	r2, [pc, #124]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a18      	ldr	r2, [pc, #96]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001404:	2307      	movs	r3, #7
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <HAL_UART_MspInit+0xc8>)
 8001410:	f000 fa3e 	bl	8001890 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001414:	2340      	movs	r3, #64	; 0x40
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001424:	2307      	movs	r3, #7
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <HAL_UART_MspInit+0xcc>)
 8001430:	f000 fa2e 	bl	8001890 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40011000 	.word	0x40011000
 8001440:	40023800 	.word	0x40023800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400

0800144c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800144c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001484 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001450:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001452:	e003      	b.n	800145c <LoopCopyDataInit>

08001454 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001456:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001458:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800145a:	3104      	adds	r1, #4

0800145c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800145c:	480b      	ldr	r0, [pc, #44]	; (800148c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001460:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001462:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001464:	d3f6      	bcc.n	8001454 <CopyDataInit>
  ldr  r2, =_sbss
 8001466:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001468:	e002      	b.n	8001470 <LoopFillZerobss>

0800146a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800146a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800146c:	f842 3b04 	str.w	r3, [r2], #4

08001470 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001472:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001474:	d3f9      	bcc.n	800146a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001476:	f7ff ff41 	bl	80012fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147a:	f003 f847 	bl	800450c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800147e:	f7ff fcb9 	bl	8000df4 <main>
  bx  lr    
 8001482:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001484:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001488:	08005570 	.word	0x08005570
  ldr  r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001490:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001494:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001498:	20000548 	.word	0x20000548

0800149c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC_IRQHandler>
	...

080014a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <HAL_Init+0x40>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a0d      	ldr	r2, [pc, #52]	; (80014e0 <HAL_Init+0x40>)
 80014aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_Init+0x40>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <HAL_Init+0x40>)
 80014b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_Init+0x40>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <HAL_Init+0x40>)
 80014c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 f94d 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f000 f808 	bl	80014e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d4:	f7ff fd12 	bl	8000efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023c00 	.word	0x40023c00

080014e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_InitTick+0x54>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_InitTick+0x58>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80014fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001502:	4618      	mov	r0, r3
 8001504:	f000 f965 	bl	80017d2 <HAL_SYSTICK_Config>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e00e      	b.n	8001530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b0f      	cmp	r3, #15
 8001516:	d80a      	bhi.n	800152e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001518:	2200      	movs	r2, #0
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f000 f92d 	bl	800177e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001524:	4a06      	ldr	r2, [pc, #24]	; (8001540 <HAL_InitTick+0x5c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
 800152c:	e000      	b.n	8001530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000004 	.word	0x20000004
 800153c:	2000000c 	.word	0x2000000c
 8001540:	20000008 	.word	0x20000008

08001544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_IncTick+0x20>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_IncTick+0x24>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <HAL_IncTick+0x24>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	2000000c 	.word	0x2000000c
 8001568:	20000530 	.word	0x20000530

0800156c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return uwTick;
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_GetTick+0x14>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000530 	.word	0x20000530

08001584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800158c:	f7ff ffee 	bl	800156c <HAL_GetTick>
 8001590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159c:	d005      	beq.n	80015aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_Delay+0x40>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015aa:	bf00      	nop
 80015ac:	f7ff ffde 	bl	800156c <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d8f7      	bhi.n	80015ac <HAL_Delay+0x28>
  {
  }
}
 80015bc:	bf00      	nop
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	2000000c 	.word	0x2000000c

080015c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	; (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db0b      	blt.n	8001656 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	4907      	ldr	r1, [pc, #28]	; (8001664 <__NVIC_EnableIRQ+0x38>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	2001      	movs	r0, #1
 800164e:	fa00 f202 	lsl.w	r2, r0, r2
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001734:	d301      	bcc.n	800173a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001736:	2301      	movs	r3, #1
 8001738:	e00f      	b.n	800175a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <SysTick_Config+0x40>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001742:	210f      	movs	r1, #15
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f7ff ff8e 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <SysTick_Config+0x40>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <SysTick_Config+0x40>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	e000e010 	.word	0xe000e010

08001768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff29 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001790:	f7ff ff3e 	bl	8001610 <__NVIC_GetPriorityGrouping>
 8001794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f7ff ff8e 	bl	80016bc <NVIC_EncodePriority>
 80017a0:	4602      	mov	r2, r0
 80017a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff5d 	bl	8001668 <__NVIC_SetPriority>
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff31 	bl	800162c <__NVIC_EnableIRQ>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffa2 	bl	8001724 <SysTick_Config>
 80017e0:	4603      	mov	r3, r0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80017ea:	b480      	push	{r7}
 80017ec:	b087      	sub	sp, #28
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	460b      	mov	r3, r1
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80017fc:	7afb      	ldrb	r3, [r7, #11]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d103      	bne.n	800180a <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	605a      	str	r2, [r3, #4]
      break;
 8001808:	e002      	b.n	8001810 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	75fb      	strb	r3, [r7, #23]
      break;
 800180e:	bf00      	nop
  }

  return status;
 8001810:	7dfb      	ldrb	r3, [r7, #23]
}
 8001812:	4618      	mov	r0, r3
 8001814:	371c      	adds	r7, #28
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e003      	b.n	800183a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001838:	2300      	movs	r3, #0
  }
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 031f 	and.w	r3, r3, #31
 8001858:	2201      	movs	r2, #1
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_EXTI_IRQHandler+0x44>)
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4013      	ands	r3, r2
 8001868:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d009      	beq.n	8001884 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8001870:	4a06      	ldr	r2, [pc, #24]	; (800188c <HAL_EXTI_IRQHandler+0x44>)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4798      	blx	r3
    }
  }
}
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40013c00 	.word	0x40013c00

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	e159      	b.n	8001b60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018ac:	2201      	movs	r2, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	f040 8148 	bne.w	8001b5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d00b      	beq.n	80018ea <HAL_GPIO_Init+0x5a>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d007      	beq.n	80018ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018de:	2b11      	cmp	r3, #17
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b12      	cmp	r3, #18
 80018e8:	d130      	bne.n	800194c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2203      	movs	r2, #3
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 0201 	and.w	r2, r3, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0xfc>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b12      	cmp	r3, #18
 800198a:	d123      	bne.n	80019d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	08da      	lsrs	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3208      	adds	r2, #8
 8001994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	08da      	lsrs	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3208      	adds	r2, #8
 80019ce:	69b9      	ldr	r1, [r7, #24]
 80019d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0203 	and.w	r2, r3, #3
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80a2 	beq.w	8001b5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b56      	ldr	r3, [pc, #344]	; (8001b74 <HAL_GPIO_Init+0x2e4>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	4a55      	ldr	r2, [pc, #340]	; (8001b74 <HAL_GPIO_Init+0x2e4>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a24:	6453      	str	r3, [r2, #68]	; 0x44
 8001a26:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <HAL_GPIO_Init+0x2e4>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a32:	4a51      	ldr	r2, [pc, #324]	; (8001b78 <HAL_GPIO_Init+0x2e8>)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a48      	ldr	r2, [pc, #288]	; (8001b7c <HAL_GPIO_Init+0x2ec>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d019      	beq.n	8001a92 <HAL_GPIO_Init+0x202>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a47      	ldr	r2, [pc, #284]	; (8001b80 <HAL_GPIO_Init+0x2f0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d013      	beq.n	8001a8e <HAL_GPIO_Init+0x1fe>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a46      	ldr	r2, [pc, #280]	; (8001b84 <HAL_GPIO_Init+0x2f4>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00d      	beq.n	8001a8a <HAL_GPIO_Init+0x1fa>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a45      	ldr	r2, [pc, #276]	; (8001b88 <HAL_GPIO_Init+0x2f8>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d007      	beq.n	8001a86 <HAL_GPIO_Init+0x1f6>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a44      	ldr	r2, [pc, #272]	; (8001b8c <HAL_GPIO_Init+0x2fc>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_GPIO_Init+0x1f2>
 8001a7e:	2304      	movs	r3, #4
 8001a80:	e008      	b.n	8001a94 <HAL_GPIO_Init+0x204>
 8001a82:	2307      	movs	r3, #7
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x204>
 8001a86:	2303      	movs	r3, #3
 8001a88:	e004      	b.n	8001a94 <HAL_GPIO_Init+0x204>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e002      	b.n	8001a94 <HAL_GPIO_Init+0x204>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x204>
 8001a92:	2300      	movs	r3, #0
 8001a94:	69fa      	ldr	r2, [r7, #28]
 8001a96:	f002 0203 	and.w	r2, r2, #3
 8001a9a:	0092      	lsls	r2, r2, #2
 8001a9c:	4093      	lsls	r3, r2
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa4:	4934      	ldr	r1, [pc, #208]	; (8001b78 <HAL_GPIO_Init+0x2e8>)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ab2:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <HAL_GPIO_Init+0x300>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad6:	4a2e      	ldr	r2, [pc, #184]	; (8001b90 <HAL_GPIO_Init+0x300>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001adc:	4b2c      	ldr	r3, [pc, #176]	; (8001b90 <HAL_GPIO_Init+0x300>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b00:	4a23      	ldr	r2, [pc, #140]	; (8001b90 <HAL_GPIO_Init+0x300>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b06:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <HAL_GPIO_Init+0x300>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b2a:	4a19      	ldr	r2, [pc, #100]	; (8001b90 <HAL_GPIO_Init+0x300>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_GPIO_Init+0x300>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b54:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <HAL_GPIO_Init+0x300>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	2b0f      	cmp	r3, #15
 8001b64:	f67f aea2 	bls.w	80018ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b68:	bf00      	nop
 8001b6a:	3724      	adds	r7, #36	; 0x24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b087      	sub	sp, #28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e0bb      	b.n	8001d28 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	f040 80ab 	bne.w	8001d22 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001bcc:	4a5b      	ldr	r2, [pc, #364]	; (8001d3c <HAL_GPIO_DeInit+0x1a8>)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	68ba      	ldr	r2, [r7, #8]
 8001bea:	4013      	ands	r3, r2
 8001bec:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a53      	ldr	r2, [pc, #332]	; (8001d40 <HAL_GPIO_DeInit+0x1ac>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d019      	beq.n	8001c2a <HAL_GPIO_DeInit+0x96>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a52      	ldr	r2, [pc, #328]	; (8001d44 <HAL_GPIO_DeInit+0x1b0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d013      	beq.n	8001c26 <HAL_GPIO_DeInit+0x92>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a51      	ldr	r2, [pc, #324]	; (8001d48 <HAL_GPIO_DeInit+0x1b4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d00d      	beq.n	8001c22 <HAL_GPIO_DeInit+0x8e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a50      	ldr	r2, [pc, #320]	; (8001d4c <HAL_GPIO_DeInit+0x1b8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d007      	beq.n	8001c1e <HAL_GPIO_DeInit+0x8a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4f      	ldr	r2, [pc, #316]	; (8001d50 <HAL_GPIO_DeInit+0x1bc>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_GPIO_DeInit+0x86>
 8001c16:	2304      	movs	r3, #4
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_DeInit+0x98>
 8001c1a:	2307      	movs	r3, #7
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_DeInit+0x98>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_DeInit+0x98>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_DeInit+0x98>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_DeInit+0x98>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d132      	bne.n	8001ca2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001c3c:	4b45      	ldr	r3, [pc, #276]	; (8001d54 <HAL_GPIO_DeInit+0x1c0>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	4943      	ldr	r1, [pc, #268]	; (8001d54 <HAL_GPIO_DeInit+0x1c0>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001c4a:	4b42      	ldr	r3, [pc, #264]	; (8001d54 <HAL_GPIO_DeInit+0x1c0>)
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4940      	ldr	r1, [pc, #256]	; (8001d54 <HAL_GPIO_DeInit+0x1c0>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001c58:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <HAL_GPIO_DeInit+0x1c0>)
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	493c      	ldr	r1, [pc, #240]	; (8001d54 <HAL_GPIO_DeInit+0x1c0>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001c66:	4b3b      	ldr	r3, [pc, #236]	; (8001d54 <HAL_GPIO_DeInit+0x1c0>)
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	4939      	ldr	r1, [pc, #228]	; (8001d54 <HAL_GPIO_DeInit+0x1c0>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001c84:	4a2d      	ldr	r2, [pc, #180]	; (8001d3c <HAL_GPIO_DeInit+0x1a8>)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	43da      	mvns	r2, r3
 8001c94:	4829      	ldr	r0, [pc, #164]	; (8001d3c <HAL_GPIO_DeInit+0x1a8>)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2103      	movs	r1, #3
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	08da      	lsrs	r2, r3, #3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3208      	adds	r2, #8
 8001cc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	220f      	movs	r2, #15
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	697a      	ldr	r2, [r7, #20]
 8001cd6:	08d2      	lsrs	r2, r2, #3
 8001cd8:	4019      	ands	r1, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2103      	movs	r1, #3
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	401a      	ands	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2103      	movs	r1, #3
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	401a      	ands	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	3301      	adds	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b0f      	cmp	r3, #15
 8001d2c:	f67f af40 	bls.w	8001bb0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001d30:	bf00      	nop
 8001d32:	371c      	adds	r7, #28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	40013800 	.word	0x40013800
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40013c00 	.word	0x40013c00

08001d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	887b      	ldrh	r3, [r7, #2]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e001      	b.n	8001d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
 8001d94:	4613      	mov	r3, r2
 8001d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d98:	787b      	ldrb	r3, [r7, #1]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001da4:	e003      	b.n	8001dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	041a      	lsls	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	619a      	str	r2, [r3, #24]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	401a      	ands	r2, r3
 8001dce:	887b      	ldrh	r3, [r7, #2]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d104      	bne.n	8001dde <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dd4:	887b      	ldrh	r3, [r7, #2]
 8001dd6:	041a      	lsls	r2, r3, #16
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001ddc:	e002      	b.n	8001de4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	619a      	str	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e25b      	b.n	80022ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d075      	beq.n	8001efa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e0e:	4ba3      	ldr	r3, [pc, #652]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d00c      	beq.n	8001e34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e1a:	4ba0      	ldr	r3, [pc, #640]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d112      	bne.n	8001e4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e26:	4b9d      	ldr	r3, [pc, #628]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e32:	d10b      	bne.n	8001e4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e34:	4b99      	ldr	r3, [pc, #612]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d05b      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x108>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d157      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e236      	b.n	80022ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e54:	d106      	bne.n	8001e64 <HAL_RCC_OscConfig+0x74>
 8001e56:	4b91      	ldr	r3, [pc, #580]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a90      	ldr	r2, [pc, #576]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e01d      	b.n	8001ea0 <HAL_RCC_OscConfig+0xb0>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x98>
 8001e6e:	4b8b      	ldr	r3, [pc, #556]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a8a      	ldr	r2, [pc, #552]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	4b88      	ldr	r3, [pc, #544]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a87      	ldr	r2, [pc, #540]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e00b      	b.n	8001ea0 <HAL_RCC_OscConfig+0xb0>
 8001e88:	4b84      	ldr	r3, [pc, #528]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a83      	ldr	r2, [pc, #524]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	4b81      	ldr	r3, [pc, #516]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a80      	ldr	r2, [pc, #512]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d013      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fb60 	bl	800156c <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7ff fb5c 	bl	800156c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	; 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e1fb      	b.n	80022ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	4b76      	ldr	r3, [pc, #472]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0xc0>
 8001ece:	e014      	b.n	8001efa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fb4c 	bl	800156c <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7ff fb48 	bl	800156c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e1e7      	b.n	80022ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eea:	4b6c      	ldr	r3, [pc, #432]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0xe8>
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d063      	beq.n	8001fce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f06:	4b65      	ldr	r3, [pc, #404]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00b      	beq.n	8001f2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f12:	4b62      	ldr	r3, [pc, #392]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d11c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1e:	4b5f      	ldr	r3, [pc, #380]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d116      	bne.n	8001f58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	4b5c      	ldr	r3, [pc, #368]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <HAL_RCC_OscConfig+0x152>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e1bb      	b.n	80022ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f42:	4b56      	ldr	r3, [pc, #344]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4952      	ldr	r1, [pc, #328]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	e03a      	b.n	8001fce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d020      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f60:	4b4f      	ldr	r3, [pc, #316]	; (80020a0 <HAL_RCC_OscConfig+0x2b0>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7ff fb01 	bl	800156c <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7ff fafd 	bl	800156c <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e19c      	b.n	80022ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f80:	4b46      	ldr	r3, [pc, #280]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	4b43      	ldr	r3, [pc, #268]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4940      	ldr	r1, [pc, #256]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
 8001fa0:	e015      	b.n	8001fce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa2:	4b3f      	ldr	r3, [pc, #252]	; (80020a0 <HAL_RCC_OscConfig+0x2b0>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7ff fae0 	bl	800156c <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb0:	f7ff fadc 	bl	800156c <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e17b      	b.n	80022ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	4b36      	ldr	r3, [pc, #216]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d030      	beq.n	800203c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d016      	beq.n	8002010 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe2:	4b30      	ldr	r3, [pc, #192]	; (80020a4 <HAL_RCC_OscConfig+0x2b4>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe8:	f7ff fac0 	bl	800156c <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff0:	f7ff fabc 	bl	800156c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e15b      	b.n	80022ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	4b26      	ldr	r3, [pc, #152]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8002004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x200>
 800200e:	e015      	b.n	800203c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002010:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_RCC_OscConfig+0x2b4>)
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7ff faa9 	bl	800156c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201e:	f7ff faa5 	bl	800156c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e144      	b.n	80022ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8002032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f0      	bne.n	800201e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80a0 	beq.w	800218a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10f      	bne.n	800207a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	4a0e      	ldr	r2, [pc, #56]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002076:	2301      	movs	r3, #1
 8002078:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_OscConfig+0x2b8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d121      	bne.n	80020ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <HAL_RCC_OscConfig+0x2b8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <HAL_RCC_OscConfig+0x2b8>)
 800208c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002092:	f7ff fa6b 	bl	800156c <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	e011      	b.n	80020be <HAL_RCC_OscConfig+0x2ce>
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	42470000 	.word	0x42470000
 80020a4:	42470e80 	.word	0x42470e80
 80020a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ac:	f7ff fa5e 	bl	800156c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e0fd      	b.n	80022ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b81      	ldr	r3, [pc, #516]	; (80022c4 <HAL_RCC_OscConfig+0x4d4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d106      	bne.n	80020e0 <HAL_RCC_OscConfig+0x2f0>
 80020d2:	4b7d      	ldr	r3, [pc, #500]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 80020d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d6:	4a7c      	ldr	r2, [pc, #496]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6713      	str	r3, [r2, #112]	; 0x70
 80020de:	e01c      	b.n	800211a <HAL_RCC_OscConfig+0x32a>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d10c      	bne.n	8002102 <HAL_RCC_OscConfig+0x312>
 80020e8:	4b77      	ldr	r3, [pc, #476]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ec:	4a76      	ldr	r2, [pc, #472]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 80020ee:	f043 0304 	orr.w	r3, r3, #4
 80020f2:	6713      	str	r3, [r2, #112]	; 0x70
 80020f4:	4b74      	ldr	r3, [pc, #464]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 80020f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f8:	4a73      	ldr	r2, [pc, #460]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002100:	e00b      	b.n	800211a <HAL_RCC_OscConfig+0x32a>
 8002102:	4b71      	ldr	r3, [pc, #452]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 8002104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002106:	4a70      	ldr	r2, [pc, #448]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	6713      	str	r3, [r2, #112]	; 0x70
 800210e:	4b6e      	ldr	r3, [pc, #440]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a6d      	ldr	r2, [pc, #436]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 8002114:	f023 0304 	bic.w	r3, r3, #4
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d015      	beq.n	800214e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002122:	f7ff fa23 	bl	800156c <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002128:	e00a      	b.n	8002140 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7ff fa1f 	bl	800156c <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	; 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0bc      	b.n	80022ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002140:	4b61      	ldr	r3, [pc, #388]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ee      	beq.n	800212a <HAL_RCC_OscConfig+0x33a>
 800214c:	e014      	b.n	8002178 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214e:	f7ff fa0d 	bl	800156c <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002154:	e00a      	b.n	800216c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002156:	f7ff fa09 	bl	800156c <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f241 3288 	movw	r2, #5000	; 0x1388
 8002164:	4293      	cmp	r3, r2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e0a6      	b.n	80022ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216c:	4b56      	ldr	r3, [pc, #344]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1ee      	bne.n	8002156 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002178:	7dfb      	ldrb	r3, [r7, #23]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d105      	bne.n	800218a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217e:	4b52      	ldr	r3, [pc, #328]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	4a51      	ldr	r2, [pc, #324]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 8002184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002188:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8092 	beq.w	80022b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002194:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d05c      	beq.n	800225a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d141      	bne.n	800222c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a8:	4b48      	ldr	r3, [pc, #288]	; (80022cc <HAL_RCC_OscConfig+0x4dc>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ae:	f7ff f9dd 	bl	800156c <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b6:	f7ff f9d9 	bl	800156c <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e078      	b.n	80022ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c8:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f0      	bne.n	80021b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	019b      	lsls	r3, r3, #6
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	3b01      	subs	r3, #1
 80021ee:	041b      	lsls	r3, r3, #16
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	061b      	lsls	r3, r3, #24
 80021f8:	4933      	ldr	r1, [pc, #204]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021fe:	4b33      	ldr	r3, [pc, #204]	; (80022cc <HAL_RCC_OscConfig+0x4dc>)
 8002200:	2201      	movs	r2, #1
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff f9b2 	bl	800156c <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220c:	f7ff f9ae 	bl	800156c <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e04d      	b.n	80022ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221e:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x41c>
 800222a:	e045      	b.n	80022b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222c:	4b27      	ldr	r3, [pc, #156]	; (80022cc <HAL_RCC_OscConfig+0x4dc>)
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7ff f99b 	bl	800156c <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223a:	f7ff f997 	bl	800156c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e036      	b.n	80022ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224c:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f0      	bne.n	800223a <HAL_RCC_OscConfig+0x44a>
 8002258:	e02e      	b.n	80022b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e029      	b.n	80022ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <HAL_RCC_OscConfig+0x4d8>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	429a      	cmp	r2, r3
 8002278:	d11c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002284:	429a      	cmp	r2, r3
 8002286:	d115      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800228e:	4013      	ands	r3, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002294:	4293      	cmp	r3, r2
 8002296:	d10d      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d106      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40007000 	.word	0x40007000
 80022c8:	40023800 	.word	0x40023800
 80022cc:	42470060 	.word	0x42470060

080022d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0cc      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022e4:	4b68      	ldr	r3, [pc, #416]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d90c      	bls.n	800230c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b65      	ldr	r3, [pc, #404]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b63      	ldr	r3, [pc, #396]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d001      	beq.n	800230c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0b8      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d020      	beq.n	800235a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002324:	4b59      	ldr	r3, [pc, #356]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a58      	ldr	r2, [pc, #352]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800232e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800233c:	4b53      	ldr	r3, [pc, #332]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	4a52      	ldr	r2, [pc, #328]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002346:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002348:	4b50      	ldr	r3, [pc, #320]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	494d      	ldr	r1, [pc, #308]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	4313      	orrs	r3, r2
 8002358:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d044      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d107      	bne.n	800237e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	4b47      	ldr	r3, [pc, #284]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d119      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e07f      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d003      	beq.n	800238e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800238a:	2b03      	cmp	r3, #3
 800238c:	d107      	bne.n	800239e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238e:	4b3f      	ldr	r3, [pc, #252]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e06f      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239e:	4b3b      	ldr	r3, [pc, #236]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e067      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ae:	4b37      	ldr	r3, [pc, #220]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f023 0203 	bic.w	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4934      	ldr	r1, [pc, #208]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c0:	f7ff f8d4 	bl	800156c <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c6:	e00a      	b.n	80023de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c8:	f7ff f8d0 	bl	800156c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e04f      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	4b2b      	ldr	r3, [pc, #172]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 020c 	and.w	r2, r3, #12
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d1eb      	bne.n	80023c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f0:	4b25      	ldr	r3, [pc, #148]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d20c      	bcs.n	8002418 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b22      	ldr	r3, [pc, #136]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e032      	b.n	800247e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4916      	ldr	r1, [pc, #88]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	490e      	ldr	r1, [pc, #56]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002456:	f000 f821 	bl	800249c <HAL_RCC_GetSysClockFreq>
 800245a:	4601      	mov	r1, r0
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 8002468:	5cd3      	ldrb	r3, [r2, r3]
 800246a:	fa21 f303 	lsr.w	r3, r1, r3
 800246e:	4a09      	ldr	r2, [pc, #36]	; (8002494 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_RCC_ClockConfig+0x1c8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff f834 	bl	80014e4 <HAL_InitTick>

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023c00 	.word	0x40023c00
 800248c:	40023800 	.word	0x40023800
 8002490:	080054b0 	.word	0x080054b0
 8002494:	20000004 	.word	0x20000004
 8002498:	20000008 	.word	0x20000008

0800249c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800249c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	2300      	movs	r3, #0
 80024ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024b2:	4b63      	ldr	r3, [pc, #396]	; (8002640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d007      	beq.n	80024ce <HAL_RCC_GetSysClockFreq+0x32>
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d008      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x38>
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 80b4 	bne.w	8002630 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024c8:	4b5e      	ldr	r3, [pc, #376]	; (8002644 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024ca:	60bb      	str	r3, [r7, #8]
       break;
 80024cc:	e0b3      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ce:	4b5e      	ldr	r3, [pc, #376]	; (8002648 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80024d0:	60bb      	str	r3, [r7, #8]
      break;
 80024d2:	e0b0      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024d4:	4b5a      	ldr	r3, [pc, #360]	; (8002640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024de:	4b58      	ldr	r3, [pc, #352]	; (8002640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d04a      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ea:	4b55      	ldr	r3, [pc, #340]	; (8002640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	099b      	lsrs	r3, r3, #6
 80024f0:	f04f 0400 	mov.w	r4, #0
 80024f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	ea03 0501 	and.w	r5, r3, r1
 8002500:	ea04 0602 	and.w	r6, r4, r2
 8002504:	4629      	mov	r1, r5
 8002506:	4632      	mov	r2, r6
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	f04f 0400 	mov.w	r4, #0
 8002510:	0154      	lsls	r4, r2, #5
 8002512:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002516:	014b      	lsls	r3, r1, #5
 8002518:	4619      	mov	r1, r3
 800251a:	4622      	mov	r2, r4
 800251c:	1b49      	subs	r1, r1, r5
 800251e:	eb62 0206 	sbc.w	r2, r2, r6
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	f04f 0400 	mov.w	r4, #0
 800252a:	0194      	lsls	r4, r2, #6
 800252c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002530:	018b      	lsls	r3, r1, #6
 8002532:	1a5b      	subs	r3, r3, r1
 8002534:	eb64 0402 	sbc.w	r4, r4, r2
 8002538:	f04f 0100 	mov.w	r1, #0
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	00e2      	lsls	r2, r4, #3
 8002542:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002546:	00d9      	lsls	r1, r3, #3
 8002548:	460b      	mov	r3, r1
 800254a:	4614      	mov	r4, r2
 800254c:	195b      	adds	r3, r3, r5
 800254e:	eb44 0406 	adc.w	r4, r4, r6
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	0262      	lsls	r2, r4, #9
 800255c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002560:	0259      	lsls	r1, r3, #9
 8002562:	460b      	mov	r3, r1
 8002564:	4614      	mov	r4, r2
 8002566:	4618      	mov	r0, r3
 8002568:	4621      	mov	r1, r4
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f04f 0400 	mov.w	r4, #0
 8002570:	461a      	mov	r2, r3
 8002572:	4623      	mov	r3, r4
 8002574:	f7fd fe8c 	bl	8000290 <__aeabi_uldivmod>
 8002578:	4603      	mov	r3, r0
 800257a:	460c      	mov	r4, r1
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	e049      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002580:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	f04f 0400 	mov.w	r4, #0
 800258a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	ea03 0501 	and.w	r5, r3, r1
 8002596:	ea04 0602 	and.w	r6, r4, r2
 800259a:	4629      	mov	r1, r5
 800259c:	4632      	mov	r2, r6
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	f04f 0400 	mov.w	r4, #0
 80025a6:	0154      	lsls	r4, r2, #5
 80025a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025ac:	014b      	lsls	r3, r1, #5
 80025ae:	4619      	mov	r1, r3
 80025b0:	4622      	mov	r2, r4
 80025b2:	1b49      	subs	r1, r1, r5
 80025b4:	eb62 0206 	sbc.w	r2, r2, r6
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	f04f 0400 	mov.w	r4, #0
 80025c0:	0194      	lsls	r4, r2, #6
 80025c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025c6:	018b      	lsls	r3, r1, #6
 80025c8:	1a5b      	subs	r3, r3, r1
 80025ca:	eb64 0402 	sbc.w	r4, r4, r2
 80025ce:	f04f 0100 	mov.w	r1, #0
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	00e2      	lsls	r2, r4, #3
 80025d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025dc:	00d9      	lsls	r1, r3, #3
 80025de:	460b      	mov	r3, r1
 80025e0:	4614      	mov	r4, r2
 80025e2:	195b      	adds	r3, r3, r5
 80025e4:	eb44 0406 	adc.w	r4, r4, r6
 80025e8:	f04f 0100 	mov.w	r1, #0
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	02a2      	lsls	r2, r4, #10
 80025f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80025f6:	0299      	lsls	r1, r3, #10
 80025f8:	460b      	mov	r3, r1
 80025fa:	4614      	mov	r4, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	4621      	mov	r1, r4
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f04f 0400 	mov.w	r4, #0
 8002606:	461a      	mov	r2, r3
 8002608:	4623      	mov	r3, r4
 800260a:	f7fd fe41 	bl	8000290 <__aeabi_uldivmod>
 800260e:	4603      	mov	r3, r0
 8002610:	460c      	mov	r4, r1
 8002612:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	0c1b      	lsrs	r3, r3, #16
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	3301      	adds	r3, #1
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	60bb      	str	r3, [r7, #8]
      break;
 800262e:	e002      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002632:	60bb      	str	r3, [r7, #8]
      break;
 8002634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002636:	68bb      	ldr	r3, [r7, #8]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	00f42400 	.word	0x00f42400
 8002648:	007a1200 	.word	0x007a1200

0800264c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <HAL_RCC_GetHCLKFreq+0x14>)
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000004 	.word	0x20000004

08002664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002668:	f7ff fff0 	bl	800264c <HAL_RCC_GetHCLKFreq>
 800266c:	4601      	mov	r1, r0
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	0a9b      	lsrs	r3, r3, #10
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	4a03      	ldr	r2, [pc, #12]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40023800 	.word	0x40023800
 8002688:	080054c0 	.word	0x080054c0

0800268c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002690:	f7ff ffdc 	bl	800264c <HAL_RCC_GetHCLKFreq>
 8002694:	4601      	mov	r1, r0
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	0b5b      	lsrs	r3, r3, #13
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	4a03      	ldr	r2, [pc, #12]	; (80026b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a2:	5cd3      	ldrb	r3, [r2, r3]
 80026a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40023800 	.word	0x40023800
 80026b0:	080054c0 	.word	0x080054c0

080026b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e056      	b.n	8002774 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d106      	bne.n	80026e6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f84b 	bl	800277c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2202      	movs	r2, #2
 80026ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	ea42 0103 	orr.w	r1, r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	0c1b      	lsrs	r3, r3, #16
 8002744:	f003 0104 	and.w	r1, r3, #4
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002762:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08c      	sub	sp, #48	; 0x30
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800279e:	2301      	movs	r3, #1
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_SPI_TransmitReceive+0x26>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e18a      	b.n	8002acc <HAL_SPI_TransmitReceive+0x33c>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027be:	f7fe fed5 	bl	800156c <HAL_GetTick>
 80027c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d00f      	beq.n	8002800 <HAL_SPI_TransmitReceive+0x70>
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027e6:	d107      	bne.n	80027f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d103      	bne.n	80027f8 <HAL_SPI_TransmitReceive+0x68>
 80027f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d003      	beq.n	8002800 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
 80027fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80027fe:	e15b      	b.n	8002ab8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d005      	beq.n	8002812 <HAL_SPI_TransmitReceive+0x82>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <HAL_SPI_TransmitReceive+0x82>
 800280c:	887b      	ldrh	r3, [r7, #2]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d103      	bne.n	800281a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002818:	e14e      	b.n	8002ab8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b04      	cmp	r3, #4
 8002824:	d003      	beq.n	800282e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2205      	movs	r2, #5
 800282a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	887a      	ldrh	r2, [r7, #2]
 800283e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	887a      	ldrh	r2, [r7, #2]
 8002844:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	887a      	ldrh	r2, [r7, #2]
 8002850:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	887a      	ldrh	r2, [r7, #2]
 8002856:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	2b40      	cmp	r3, #64	; 0x40
 8002870:	d007      	beq.n	8002882 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002880:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800288a:	d178      	bne.n	800297e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <HAL_SPI_TransmitReceive+0x10a>
 8002894:	8b7b      	ldrh	r3, [r7, #26]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d166      	bne.n	8002968 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	881a      	ldrh	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	1c9a      	adds	r2, r3, #2
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028be:	e053      	b.n	8002968 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d11b      	bne.n	8002906 <HAL_SPI_TransmitReceive+0x176>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d016      	beq.n	8002906 <HAL_SPI_TransmitReceive+0x176>
 80028d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d113      	bne.n	8002906 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	881a      	ldrh	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	1c9a      	adds	r2, r3, #2
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d119      	bne.n	8002948 <HAL_SPI_TransmitReceive+0x1b8>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d014      	beq.n	8002948 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	b292      	uxth	r2, r2
 800292a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	1c9a      	adds	r2, r3, #2
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002944:	2301      	movs	r3, #1
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002948:	f7fe fe10 	bl	800156c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002954:	429a      	cmp	r2, r3
 8002956:	d807      	bhi.n	8002968 <HAL_SPI_TransmitReceive+0x1d8>
 8002958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295e:	d003      	beq.n	8002968 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002966:	e0a7      	b.n	8002ab8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1a6      	bne.n	80028c0 <HAL_SPI_TransmitReceive+0x130>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002976:	b29b      	uxth	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1a1      	bne.n	80028c0 <HAL_SPI_TransmitReceive+0x130>
 800297c:	e07c      	b.n	8002a78 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <HAL_SPI_TransmitReceive+0x1fc>
 8002986:	8b7b      	ldrh	r3, [r7, #26]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d16b      	bne.n	8002a64 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	330c      	adds	r3, #12
 8002996:	7812      	ldrb	r2, [r2, #0]
 8002998:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029b2:	e057      	b.n	8002a64 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d11c      	bne.n	80029fc <HAL_SPI_TransmitReceive+0x26c>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d017      	beq.n	80029fc <HAL_SPI_TransmitReceive+0x26c>
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d114      	bne.n	80029fc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	330c      	adds	r3, #12
 80029dc:	7812      	ldrb	r2, [r2, #0]
 80029de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	3b01      	subs	r3, #1
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d119      	bne.n	8002a3e <HAL_SPI_TransmitReceive+0x2ae>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d014      	beq.n	8002a3e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a3e:	f7fe fd95 	bl	800156c <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d803      	bhi.n	8002a56 <HAL_SPI_TransmitReceive+0x2c6>
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a54:	d102      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x2cc>
 8002a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d103      	bne.n	8002a64 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a62:	e029      	b.n	8002ab8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1a2      	bne.n	80029b4 <HAL_SPI_TransmitReceive+0x224>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d19d      	bne.n	80029b4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f8a1 	bl	8002bc4 <SPI_EndRxTxTransaction>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d006      	beq.n	8002a96 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002a94:	e010      	b.n	8002ab8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10b      	bne.n	8002ab6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	e000      	b.n	8002ab8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002ab6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ac8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3730      	adds	r7, #48	; 0x30
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ae2:	b2db      	uxtb	r3, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b00:	e04c      	b.n	8002b9c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d048      	beq.n	8002b9c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002b0a:	f7fe fd2f 	bl	800156c <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d902      	bls.n	8002b20 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d13d      	bne.n	8002b9c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b38:	d111      	bne.n	8002b5e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b42:	d004      	beq.n	8002b4e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4c:	d107      	bne.n	8002b5e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b66:	d10f      	bne.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e00f      	b.n	8002bbc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d1a3      	bne.n	8002b02 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b088      	sub	sp, #32
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <SPI_EndRxTxTransaction+0x7c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1b      	ldr	r2, [pc, #108]	; (8002c44 <SPI_EndRxTxTransaction+0x80>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	0d5b      	lsrs	r3, r3, #21
 8002bdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002be0:	fb02 f303 	mul.w	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bee:	d112      	bne.n	8002c16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7ff ff78 	bl	8002af0 <SPI_WaitFlagStateUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d016      	beq.n	8002c34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0a:	f043 0220 	orr.w	r2, r3, #32
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e00f      	b.n	8002c36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2c:	2b80      	cmp	r3, #128	; 0x80
 8002c2e:	d0f2      	beq.n	8002c16 <SPI_EndRxTxTransaction+0x52>
 8002c30:	e000      	b.n	8002c34 <SPI_EndRxTxTransaction+0x70>
        break;
 8002c32:	bf00      	nop
  }

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000004 	.word	0x20000004
 8002c44:	165e9f81 	.word	0x165e9f81

08002c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e03f      	b.n	8002cda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe fb84 	bl	800137c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2224      	movs	r2, #36	; 0x24
 8002c78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68da      	ldr	r2, [r3, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f90b 	bl	8002ea8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695a      	ldr	r2, [r3, #20]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b088      	sub	sp, #32
 8002ce6:	af02      	add	r7, sp, #8
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	f040 8083 	bne.w	8002e0a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_UART_Transmit+0x2e>
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e07b      	b.n	8002e0c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_UART_Transmit+0x40>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e074      	b.n	8002e0c <HAL_UART_Transmit+0x12a>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2221      	movs	r2, #33	; 0x21
 8002d34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002d38:	f7fe fc18 	bl	800156c <HAL_GetTick>
 8002d3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	88fa      	ldrh	r2, [r7, #6]
 8002d42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	88fa      	ldrh	r2, [r7, #6]
 8002d48:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002d52:	e042      	b.n	8002dda <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6a:	d122      	bne.n	8002db2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2200      	movs	r2, #0
 8002d74:	2180      	movs	r1, #128	; 0x80
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f84c 	bl	8002e14 <UART_WaitOnFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e042      	b.n	8002e0c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d98:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d103      	bne.n	8002daa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	3302      	adds	r3, #2
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	e017      	b.n	8002dda <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3301      	adds	r3, #1
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	e013      	b.n	8002dda <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2200      	movs	r2, #0
 8002dba:	2180      	movs	r1, #128	; 0x80
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f829 	bl	8002e14 <UART_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e01f      	b.n	8002e0c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	60ba      	str	r2, [r7, #8]
 8002dd2:	781a      	ldrb	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1b7      	bne.n	8002d54 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2200      	movs	r2, #0
 8002dec:	2140      	movs	r1, #64	; 0x40
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f810 	bl	8002e14 <UART_WaitOnFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e006      	b.n	8002e0c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e000      	b.n	8002e0c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002e0a:	2302      	movs	r3, #2
  }
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	4613      	mov	r3, r2
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e24:	e02c      	b.n	8002e80 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2c:	d028      	beq.n	8002e80 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e34:	f7fe fb9a 	bl	800156c <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d21d      	bcs.n	8002e80 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e52:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e00f      	b.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d0c3      	beq.n	8002e26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002eea:	f023 030c 	bic.w	r3, r3, #12
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	68f9      	ldr	r1, [r7, #12]
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f16:	f040 818b 	bne.w	8003230 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4ac1      	ldr	r2, [pc, #772]	; (8003224 <UART_SetConfig+0x37c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d005      	beq.n	8002f30 <UART_SetConfig+0x88>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4abf      	ldr	r2, [pc, #764]	; (8003228 <UART_SetConfig+0x380>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	f040 80bd 	bne.w	80030aa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f30:	f7ff fbac 	bl	800268c <HAL_RCC_GetPCLK2Freq>
 8002f34:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	461d      	mov	r5, r3
 8002f3a:	f04f 0600 	mov.w	r6, #0
 8002f3e:	46a8      	mov	r8, r5
 8002f40:	46b1      	mov	r9, r6
 8002f42:	eb18 0308 	adds.w	r3, r8, r8
 8002f46:	eb49 0409 	adc.w	r4, r9, r9
 8002f4a:	4698      	mov	r8, r3
 8002f4c:	46a1      	mov	r9, r4
 8002f4e:	eb18 0805 	adds.w	r8, r8, r5
 8002f52:	eb49 0906 	adc.w	r9, r9, r6
 8002f56:	f04f 0100 	mov.w	r1, #0
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f62:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f66:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f6a:	4688      	mov	r8, r1
 8002f6c:	4691      	mov	r9, r2
 8002f6e:	eb18 0005 	adds.w	r0, r8, r5
 8002f72:	eb49 0106 	adc.w	r1, r9, r6
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	461d      	mov	r5, r3
 8002f7c:	f04f 0600 	mov.w	r6, #0
 8002f80:	196b      	adds	r3, r5, r5
 8002f82:	eb46 0406 	adc.w	r4, r6, r6
 8002f86:	461a      	mov	r2, r3
 8002f88:	4623      	mov	r3, r4
 8002f8a:	f7fd f981 	bl	8000290 <__aeabi_uldivmod>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	460c      	mov	r4, r1
 8002f92:	461a      	mov	r2, r3
 8002f94:	4ba5      	ldr	r3, [pc, #660]	; (800322c <UART_SetConfig+0x384>)
 8002f96:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	461d      	mov	r5, r3
 8002fa4:	f04f 0600 	mov.w	r6, #0
 8002fa8:	46a9      	mov	r9, r5
 8002faa:	46b2      	mov	sl, r6
 8002fac:	eb19 0309 	adds.w	r3, r9, r9
 8002fb0:	eb4a 040a 	adc.w	r4, sl, sl
 8002fb4:	4699      	mov	r9, r3
 8002fb6:	46a2      	mov	sl, r4
 8002fb8:	eb19 0905 	adds.w	r9, r9, r5
 8002fbc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fc0:	f04f 0100 	mov.w	r1, #0
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fcc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fd4:	4689      	mov	r9, r1
 8002fd6:	4692      	mov	sl, r2
 8002fd8:	eb19 0005 	adds.w	r0, r9, r5
 8002fdc:	eb4a 0106 	adc.w	r1, sl, r6
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	461d      	mov	r5, r3
 8002fe6:	f04f 0600 	mov.w	r6, #0
 8002fea:	196b      	adds	r3, r5, r5
 8002fec:	eb46 0406 	adc.w	r4, r6, r6
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4623      	mov	r3, r4
 8002ff4:	f7fd f94c 	bl	8000290 <__aeabi_uldivmod>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	460c      	mov	r4, r1
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4b8b      	ldr	r3, [pc, #556]	; (800322c <UART_SetConfig+0x384>)
 8003000:	fba3 1302 	umull	r1, r3, r3, r2
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	2164      	movs	r1, #100	; 0x64
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	3332      	adds	r3, #50	; 0x32
 8003012:	4a86      	ldr	r2, [pc, #536]	; (800322c <UART_SetConfig+0x384>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	095b      	lsrs	r3, r3, #5
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003020:	4498      	add	r8, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	461d      	mov	r5, r3
 8003026:	f04f 0600 	mov.w	r6, #0
 800302a:	46a9      	mov	r9, r5
 800302c:	46b2      	mov	sl, r6
 800302e:	eb19 0309 	adds.w	r3, r9, r9
 8003032:	eb4a 040a 	adc.w	r4, sl, sl
 8003036:	4699      	mov	r9, r3
 8003038:	46a2      	mov	sl, r4
 800303a:	eb19 0905 	adds.w	r9, r9, r5
 800303e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003042:	f04f 0100 	mov.w	r1, #0
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800304e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003052:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003056:	4689      	mov	r9, r1
 8003058:	4692      	mov	sl, r2
 800305a:	eb19 0005 	adds.w	r0, r9, r5
 800305e:	eb4a 0106 	adc.w	r1, sl, r6
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	461d      	mov	r5, r3
 8003068:	f04f 0600 	mov.w	r6, #0
 800306c:	196b      	adds	r3, r5, r5
 800306e:	eb46 0406 	adc.w	r4, r6, r6
 8003072:	461a      	mov	r2, r3
 8003074:	4623      	mov	r3, r4
 8003076:	f7fd f90b 	bl	8000290 <__aeabi_uldivmod>
 800307a:	4603      	mov	r3, r0
 800307c:	460c      	mov	r4, r1
 800307e:	461a      	mov	r2, r3
 8003080:	4b6a      	ldr	r3, [pc, #424]	; (800322c <UART_SetConfig+0x384>)
 8003082:	fba3 1302 	umull	r1, r3, r3, r2
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2164      	movs	r1, #100	; 0x64
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	3332      	adds	r3, #50	; 0x32
 8003094:	4a65      	ldr	r2, [pc, #404]	; (800322c <UART_SetConfig+0x384>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	f003 0207 	and.w	r2, r3, #7
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4442      	add	r2, r8
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	e26f      	b.n	800358a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030aa:	f7ff fadb 	bl	8002664 <HAL_RCC_GetPCLK1Freq>
 80030ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	461d      	mov	r5, r3
 80030b4:	f04f 0600 	mov.w	r6, #0
 80030b8:	46a8      	mov	r8, r5
 80030ba:	46b1      	mov	r9, r6
 80030bc:	eb18 0308 	adds.w	r3, r8, r8
 80030c0:	eb49 0409 	adc.w	r4, r9, r9
 80030c4:	4698      	mov	r8, r3
 80030c6:	46a1      	mov	r9, r4
 80030c8:	eb18 0805 	adds.w	r8, r8, r5
 80030cc:	eb49 0906 	adc.w	r9, r9, r6
 80030d0:	f04f 0100 	mov.w	r1, #0
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030e4:	4688      	mov	r8, r1
 80030e6:	4691      	mov	r9, r2
 80030e8:	eb18 0005 	adds.w	r0, r8, r5
 80030ec:	eb49 0106 	adc.w	r1, r9, r6
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	461d      	mov	r5, r3
 80030f6:	f04f 0600 	mov.w	r6, #0
 80030fa:	196b      	adds	r3, r5, r5
 80030fc:	eb46 0406 	adc.w	r4, r6, r6
 8003100:	461a      	mov	r2, r3
 8003102:	4623      	mov	r3, r4
 8003104:	f7fd f8c4 	bl	8000290 <__aeabi_uldivmod>
 8003108:	4603      	mov	r3, r0
 800310a:	460c      	mov	r4, r1
 800310c:	461a      	mov	r2, r3
 800310e:	4b47      	ldr	r3, [pc, #284]	; (800322c <UART_SetConfig+0x384>)
 8003110:	fba3 2302 	umull	r2, r3, r3, r2
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	461d      	mov	r5, r3
 800311e:	f04f 0600 	mov.w	r6, #0
 8003122:	46a9      	mov	r9, r5
 8003124:	46b2      	mov	sl, r6
 8003126:	eb19 0309 	adds.w	r3, r9, r9
 800312a:	eb4a 040a 	adc.w	r4, sl, sl
 800312e:	4699      	mov	r9, r3
 8003130:	46a2      	mov	sl, r4
 8003132:	eb19 0905 	adds.w	r9, r9, r5
 8003136:	eb4a 0a06 	adc.w	sl, sl, r6
 800313a:	f04f 0100 	mov.w	r1, #0
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003146:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800314a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800314e:	4689      	mov	r9, r1
 8003150:	4692      	mov	sl, r2
 8003152:	eb19 0005 	adds.w	r0, r9, r5
 8003156:	eb4a 0106 	adc.w	r1, sl, r6
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	461d      	mov	r5, r3
 8003160:	f04f 0600 	mov.w	r6, #0
 8003164:	196b      	adds	r3, r5, r5
 8003166:	eb46 0406 	adc.w	r4, r6, r6
 800316a:	461a      	mov	r2, r3
 800316c:	4623      	mov	r3, r4
 800316e:	f7fd f88f 	bl	8000290 <__aeabi_uldivmod>
 8003172:	4603      	mov	r3, r0
 8003174:	460c      	mov	r4, r1
 8003176:	461a      	mov	r2, r3
 8003178:	4b2c      	ldr	r3, [pc, #176]	; (800322c <UART_SetConfig+0x384>)
 800317a:	fba3 1302 	umull	r1, r3, r3, r2
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2164      	movs	r1, #100	; 0x64
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	3332      	adds	r3, #50	; 0x32
 800318c:	4a27      	ldr	r2, [pc, #156]	; (800322c <UART_SetConfig+0x384>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800319a:	4498      	add	r8, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	461d      	mov	r5, r3
 80031a0:	f04f 0600 	mov.w	r6, #0
 80031a4:	46a9      	mov	r9, r5
 80031a6:	46b2      	mov	sl, r6
 80031a8:	eb19 0309 	adds.w	r3, r9, r9
 80031ac:	eb4a 040a 	adc.w	r4, sl, sl
 80031b0:	4699      	mov	r9, r3
 80031b2:	46a2      	mov	sl, r4
 80031b4:	eb19 0905 	adds.w	r9, r9, r5
 80031b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80031bc:	f04f 0100 	mov.w	r1, #0
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031d0:	4689      	mov	r9, r1
 80031d2:	4692      	mov	sl, r2
 80031d4:	eb19 0005 	adds.w	r0, r9, r5
 80031d8:	eb4a 0106 	adc.w	r1, sl, r6
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	461d      	mov	r5, r3
 80031e2:	f04f 0600 	mov.w	r6, #0
 80031e6:	196b      	adds	r3, r5, r5
 80031e8:	eb46 0406 	adc.w	r4, r6, r6
 80031ec:	461a      	mov	r2, r3
 80031ee:	4623      	mov	r3, r4
 80031f0:	f7fd f84e 	bl	8000290 <__aeabi_uldivmod>
 80031f4:	4603      	mov	r3, r0
 80031f6:	460c      	mov	r4, r1
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <UART_SetConfig+0x384>)
 80031fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	2164      	movs	r1, #100	; 0x64
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	3332      	adds	r3, #50	; 0x32
 800320e:	4a07      	ldr	r2, [pc, #28]	; (800322c <UART_SetConfig+0x384>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	f003 0207 	and.w	r2, r3, #7
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4442      	add	r2, r8
 8003220:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003222:	e1b2      	b.n	800358a <UART_SetConfig+0x6e2>
 8003224:	40011000 	.word	0x40011000
 8003228:	40011400 	.word	0x40011400
 800322c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4ad7      	ldr	r2, [pc, #860]	; (8003594 <UART_SetConfig+0x6ec>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d005      	beq.n	8003246 <UART_SetConfig+0x39e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4ad6      	ldr	r2, [pc, #856]	; (8003598 <UART_SetConfig+0x6f0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	f040 80d1 	bne.w	80033e8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003246:	f7ff fa21 	bl	800268c <HAL_RCC_GetPCLK2Freq>
 800324a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	469a      	mov	sl, r3
 8003250:	f04f 0b00 	mov.w	fp, #0
 8003254:	46d0      	mov	r8, sl
 8003256:	46d9      	mov	r9, fp
 8003258:	eb18 0308 	adds.w	r3, r8, r8
 800325c:	eb49 0409 	adc.w	r4, r9, r9
 8003260:	4698      	mov	r8, r3
 8003262:	46a1      	mov	r9, r4
 8003264:	eb18 080a 	adds.w	r8, r8, sl
 8003268:	eb49 090b 	adc.w	r9, r9, fp
 800326c:	f04f 0100 	mov.w	r1, #0
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003278:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800327c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003280:	4688      	mov	r8, r1
 8003282:	4691      	mov	r9, r2
 8003284:	eb1a 0508 	adds.w	r5, sl, r8
 8003288:	eb4b 0609 	adc.w	r6, fp, r9
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	4619      	mov	r1, r3
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	f04f 0400 	mov.w	r4, #0
 800329e:	0094      	lsls	r4, r2, #2
 80032a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032a4:	008b      	lsls	r3, r1, #2
 80032a6:	461a      	mov	r2, r3
 80032a8:	4623      	mov	r3, r4
 80032aa:	4628      	mov	r0, r5
 80032ac:	4631      	mov	r1, r6
 80032ae:	f7fc ffef 	bl	8000290 <__aeabi_uldivmod>
 80032b2:	4603      	mov	r3, r0
 80032b4:	460c      	mov	r4, r1
 80032b6:	461a      	mov	r2, r3
 80032b8:	4bb8      	ldr	r3, [pc, #736]	; (800359c <UART_SetConfig+0x6f4>)
 80032ba:	fba3 2302 	umull	r2, r3, r3, r2
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	469b      	mov	fp, r3
 80032c8:	f04f 0c00 	mov.w	ip, #0
 80032cc:	46d9      	mov	r9, fp
 80032ce:	46e2      	mov	sl, ip
 80032d0:	eb19 0309 	adds.w	r3, r9, r9
 80032d4:	eb4a 040a 	adc.w	r4, sl, sl
 80032d8:	4699      	mov	r9, r3
 80032da:	46a2      	mov	sl, r4
 80032dc:	eb19 090b 	adds.w	r9, r9, fp
 80032e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032e4:	f04f 0100 	mov.w	r1, #0
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032f8:	4689      	mov	r9, r1
 80032fa:	4692      	mov	sl, r2
 80032fc:	eb1b 0509 	adds.w	r5, fp, r9
 8003300:	eb4c 060a 	adc.w	r6, ip, sl
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4619      	mov	r1, r3
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	f04f 0400 	mov.w	r4, #0
 8003316:	0094      	lsls	r4, r2, #2
 8003318:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800331c:	008b      	lsls	r3, r1, #2
 800331e:	461a      	mov	r2, r3
 8003320:	4623      	mov	r3, r4
 8003322:	4628      	mov	r0, r5
 8003324:	4631      	mov	r1, r6
 8003326:	f7fc ffb3 	bl	8000290 <__aeabi_uldivmod>
 800332a:	4603      	mov	r3, r0
 800332c:	460c      	mov	r4, r1
 800332e:	461a      	mov	r2, r3
 8003330:	4b9a      	ldr	r3, [pc, #616]	; (800359c <UART_SetConfig+0x6f4>)
 8003332:	fba3 1302 	umull	r1, r3, r3, r2
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	2164      	movs	r1, #100	; 0x64
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	3332      	adds	r3, #50	; 0x32
 8003344:	4a95      	ldr	r2, [pc, #596]	; (800359c <UART_SetConfig+0x6f4>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003350:	4498      	add	r8, r3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	469b      	mov	fp, r3
 8003356:	f04f 0c00 	mov.w	ip, #0
 800335a:	46d9      	mov	r9, fp
 800335c:	46e2      	mov	sl, ip
 800335e:	eb19 0309 	adds.w	r3, r9, r9
 8003362:	eb4a 040a 	adc.w	r4, sl, sl
 8003366:	4699      	mov	r9, r3
 8003368:	46a2      	mov	sl, r4
 800336a:	eb19 090b 	adds.w	r9, r9, fp
 800336e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003372:	f04f 0100 	mov.w	r1, #0
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800337e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003382:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003386:	4689      	mov	r9, r1
 8003388:	4692      	mov	sl, r2
 800338a:	eb1b 0509 	adds.w	r5, fp, r9
 800338e:	eb4c 060a 	adc.w	r6, ip, sl
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4619      	mov	r1, r3
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	f04f 0400 	mov.w	r4, #0
 80033a4:	0094      	lsls	r4, r2, #2
 80033a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033aa:	008b      	lsls	r3, r1, #2
 80033ac:	461a      	mov	r2, r3
 80033ae:	4623      	mov	r3, r4
 80033b0:	4628      	mov	r0, r5
 80033b2:	4631      	mov	r1, r6
 80033b4:	f7fc ff6c 	bl	8000290 <__aeabi_uldivmod>
 80033b8:	4603      	mov	r3, r0
 80033ba:	460c      	mov	r4, r1
 80033bc:	461a      	mov	r2, r3
 80033be:	4b77      	ldr	r3, [pc, #476]	; (800359c <UART_SetConfig+0x6f4>)
 80033c0:	fba3 1302 	umull	r1, r3, r3, r2
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	2164      	movs	r1, #100	; 0x64
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	3332      	adds	r3, #50	; 0x32
 80033d2:	4a72      	ldr	r2, [pc, #456]	; (800359c <UART_SetConfig+0x6f4>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	f003 020f 	and.w	r2, r3, #15
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4442      	add	r2, r8
 80033e4:	609a      	str	r2, [r3, #8]
 80033e6:	e0d0      	b.n	800358a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80033e8:	f7ff f93c 	bl	8002664 <HAL_RCC_GetPCLK1Freq>
 80033ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	469a      	mov	sl, r3
 80033f2:	f04f 0b00 	mov.w	fp, #0
 80033f6:	46d0      	mov	r8, sl
 80033f8:	46d9      	mov	r9, fp
 80033fa:	eb18 0308 	adds.w	r3, r8, r8
 80033fe:	eb49 0409 	adc.w	r4, r9, r9
 8003402:	4698      	mov	r8, r3
 8003404:	46a1      	mov	r9, r4
 8003406:	eb18 080a 	adds.w	r8, r8, sl
 800340a:	eb49 090b 	adc.w	r9, r9, fp
 800340e:	f04f 0100 	mov.w	r1, #0
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800341a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800341e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003422:	4688      	mov	r8, r1
 8003424:	4691      	mov	r9, r2
 8003426:	eb1a 0508 	adds.w	r5, sl, r8
 800342a:	eb4b 0609 	adc.w	r6, fp, r9
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	4619      	mov	r1, r3
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	f04f 0400 	mov.w	r4, #0
 8003440:	0094      	lsls	r4, r2, #2
 8003442:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003446:	008b      	lsls	r3, r1, #2
 8003448:	461a      	mov	r2, r3
 800344a:	4623      	mov	r3, r4
 800344c:	4628      	mov	r0, r5
 800344e:	4631      	mov	r1, r6
 8003450:	f7fc ff1e 	bl	8000290 <__aeabi_uldivmod>
 8003454:	4603      	mov	r3, r0
 8003456:	460c      	mov	r4, r1
 8003458:	461a      	mov	r2, r3
 800345a:	4b50      	ldr	r3, [pc, #320]	; (800359c <UART_SetConfig+0x6f4>)
 800345c:	fba3 2302 	umull	r2, r3, r3, r2
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	469b      	mov	fp, r3
 800346a:	f04f 0c00 	mov.w	ip, #0
 800346e:	46d9      	mov	r9, fp
 8003470:	46e2      	mov	sl, ip
 8003472:	eb19 0309 	adds.w	r3, r9, r9
 8003476:	eb4a 040a 	adc.w	r4, sl, sl
 800347a:	4699      	mov	r9, r3
 800347c:	46a2      	mov	sl, r4
 800347e:	eb19 090b 	adds.w	r9, r9, fp
 8003482:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003486:	f04f 0100 	mov.w	r1, #0
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003492:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003496:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800349a:	4689      	mov	r9, r1
 800349c:	4692      	mov	sl, r2
 800349e:	eb1b 0509 	adds.w	r5, fp, r9
 80034a2:	eb4c 060a 	adc.w	r6, ip, sl
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4619      	mov	r1, r3
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	f04f 0400 	mov.w	r4, #0
 80034b8:	0094      	lsls	r4, r2, #2
 80034ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034be:	008b      	lsls	r3, r1, #2
 80034c0:	461a      	mov	r2, r3
 80034c2:	4623      	mov	r3, r4
 80034c4:	4628      	mov	r0, r5
 80034c6:	4631      	mov	r1, r6
 80034c8:	f7fc fee2 	bl	8000290 <__aeabi_uldivmod>
 80034cc:	4603      	mov	r3, r0
 80034ce:	460c      	mov	r4, r1
 80034d0:	461a      	mov	r2, r3
 80034d2:	4b32      	ldr	r3, [pc, #200]	; (800359c <UART_SetConfig+0x6f4>)
 80034d4:	fba3 1302 	umull	r1, r3, r3, r2
 80034d8:	095b      	lsrs	r3, r3, #5
 80034da:	2164      	movs	r1, #100	; 0x64
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	3332      	adds	r3, #50	; 0x32
 80034e6:	4a2d      	ldr	r2, [pc, #180]	; (800359c <UART_SetConfig+0x6f4>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	095b      	lsrs	r3, r3, #5
 80034ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f2:	4498      	add	r8, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	469b      	mov	fp, r3
 80034f8:	f04f 0c00 	mov.w	ip, #0
 80034fc:	46d9      	mov	r9, fp
 80034fe:	46e2      	mov	sl, ip
 8003500:	eb19 0309 	adds.w	r3, r9, r9
 8003504:	eb4a 040a 	adc.w	r4, sl, sl
 8003508:	4699      	mov	r9, r3
 800350a:	46a2      	mov	sl, r4
 800350c:	eb19 090b 	adds.w	r9, r9, fp
 8003510:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003514:	f04f 0100 	mov.w	r1, #0
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003520:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003524:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003528:	4689      	mov	r9, r1
 800352a:	4692      	mov	sl, r2
 800352c:	eb1b 0509 	adds.w	r5, fp, r9
 8003530:	eb4c 060a 	adc.w	r6, ip, sl
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	4619      	mov	r1, r3
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	f04f 0400 	mov.w	r4, #0
 8003546:	0094      	lsls	r4, r2, #2
 8003548:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800354c:	008b      	lsls	r3, r1, #2
 800354e:	461a      	mov	r2, r3
 8003550:	4623      	mov	r3, r4
 8003552:	4628      	mov	r0, r5
 8003554:	4631      	mov	r1, r6
 8003556:	f7fc fe9b 	bl	8000290 <__aeabi_uldivmod>
 800355a:	4603      	mov	r3, r0
 800355c:	460c      	mov	r4, r1
 800355e:	461a      	mov	r2, r3
 8003560:	4b0e      	ldr	r3, [pc, #56]	; (800359c <UART_SetConfig+0x6f4>)
 8003562:	fba3 1302 	umull	r1, r3, r3, r2
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	2164      	movs	r1, #100	; 0x64
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	3332      	adds	r3, #50	; 0x32
 8003574:	4a09      	ldr	r2, [pc, #36]	; (800359c <UART_SetConfig+0x6f4>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	f003 020f 	and.w	r2, r3, #15
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4442      	add	r2, r8
 8003586:	609a      	str	r2, [r3, #8]
}
 8003588:	e7ff      	b.n	800358a <UART_SetConfig+0x6e2>
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003594:	40011000 	.word	0x40011000
 8003598:	40011400 	.word	0x40011400
 800359c:	51eb851f 	.word	0x51eb851f

080035a0 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08c      	sub	sp, #48	; 0x30
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	4603      	mov	r3, r0
 80035aa:	71fb      	strb	r3, [r7, #7]
 80035ac:	460b      	mov	r3, r1
 80035ae:	71bb      	strb	r3, [r7, #6]
 80035b0:	4613      	mov	r3, r2
 80035b2:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80035b8:	79bb      	ldrb	r3, [r7, #6]
 80035ba:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80035bc:	797b      	ldrb	r3, [r7, #5]
 80035be:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80035c0:	f107 030c 	add.w	r3, r7, #12
 80035c4:	2207      	movs	r2, #7
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 ffce 	bl	800456a <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80035ce:	f107 0318 	add.w	r3, r7, #24
 80035d2:	2218      	movs	r2, #24
 80035d4:	2100      	movs	r1, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 ffc7 	bl	800456a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80035dc:	233f      	movs	r3, #63	; 0x3f
 80035de:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 80035e0:	238a      	movs	r3, #138	; 0x8a
 80035e2:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 80035e4:	f107 0314 	add.w	r3, r7, #20
 80035e8:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 80035ea:	2303      	movs	r3, #3
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 80035ee:	f107 030c 	add.w	r3, r7, #12
 80035f2:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 80035f4:	2307      	movs	r3, #7
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 80035f8:	f107 0318 	add.w	r3, r7, #24
 80035fc:	2100      	movs	r1, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fce6 	bl	8003fd0 <hci_send_req>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	da01      	bge.n	800360e <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 800360a:	23ff      	movs	r3, #255	; 0xff
 800360c:	e014      	b.n	8003638 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 800360e:	7b3b      	ldrb	r3, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8003614:	7b3b      	ldrb	r3, [r7, #12]
 8003616:	e00f      	b.n	8003638 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8003618:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 800361c:	b29a      	uxth	r2, r3
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003622:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8003626:	b29a      	uxth	r2, r3
 8003628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362a:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800362c:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8003630:	b29a      	uxth	r2, r3
 8003632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003634:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3730      	adds	r7, #48	; 0x30
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b095      	sub	sp, #84	; 0x54
 8003644:	af00      	add	r7, sp, #0
 8003646:	4604      	mov	r4, r0
 8003648:	4608      	mov	r0, r1
 800364a:	4611      	mov	r1, r2
 800364c:	461a      	mov	r2, r3
 800364e:	4623      	mov	r3, r4
 8003650:	71fb      	strb	r3, [r7, #7]
 8003652:	4603      	mov	r3, r0
 8003654:	80bb      	strh	r3, [r7, #4]
 8003656:	460b      	mov	r3, r1
 8003658:	807b      	strh	r3, [r7, #2]
 800365a:	4613      	mov	r3, r2
 800365c:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8003664:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8003668:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800366c:	4413      	add	r3, r2
 800366e:	330e      	adds	r3, #14
 8003670:	2b28      	cmp	r3, #40	; 0x28
 8003672:	d901      	bls.n	8003678 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8003674:	2342      	movs	r3, #66	; 0x42
 8003676:	e0ce      	b.n	8003816 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 8003678:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800367c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003680:	4413      	add	r3, r2
 8003682:	79fa      	ldrb	r2, [r7, #7]
 8003684:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8003688:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800368c:	3301      	adds	r3, #1
 800368e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8003692:	88bb      	ldrh	r3, [r7, #4]
 8003694:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8003696:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800369a:	f107 0208 	add.w	r2, r7, #8
 800369e:	4413      	add	r3, r2
 80036a0:	88ba      	ldrh	r2, [r7, #4]
 80036a2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80036a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80036a8:	3302      	adds	r3, #2
 80036aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 80036ae:	887b      	ldrh	r3, [r7, #2]
 80036b0:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80036b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80036b6:	f107 0208 	add.w	r2, r7, #8
 80036ba:	4413      	add	r3, r2
 80036bc:	887a      	ldrh	r2, [r7, #2]
 80036be:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80036c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80036c4:	3302      	adds	r3, #2
 80036c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 80036ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80036ce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80036d2:	4413      	add	r3, r2
 80036d4:	79ba      	ldrb	r2, [r7, #6]
 80036d6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80036da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80036de:	3301      	adds	r3, #1
 80036e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 80036e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80036e8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80036ec:	4413      	add	r3, r2
 80036ee:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80036f2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80036f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80036fa:	3301      	adds	r3, #1
 80036fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8003700:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003704:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003708:	4413      	add	r3, r2
 800370a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800370e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8003712:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003716:	3301      	adds	r3, #1
 8003718:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800371c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003720:	f107 0208 	add.w	r2, r7, #8
 8003724:	4413      	add	r3, r2
 8003726:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800372a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800372c:	4618      	mov	r0, r3
 800372e:	f000 ff11 	bl	8004554 <memcpy>
  indx +=  LocalNameLen;
 8003732:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003736:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800373a:	4413      	add	r3, r2
 800373c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8003740:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003744:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003748:	4413      	add	r3, r2
 800374a:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800374e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8003752:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003756:	3301      	adds	r3, #1
 8003758:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 800375c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003760:	f107 0208 	add.w	r2, r7, #8
 8003764:	4413      	add	r3, r2
 8003766:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800376a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fef1 	bl	8004554 <memcpy>
  indx +=  ServiceUUIDLen;  
 8003772:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003776:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800377a:	4413      	add	r3, r2
 800377c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8003780:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8003784:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8003788:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800378c:	f107 0208 	add.w	r2, r7, #8
 8003790:	4413      	add	r3, r2
 8003792:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8003796:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8003798:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800379c:	3302      	adds	r3, #2
 800379e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 80037a2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80037a6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80037aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80037ae:	f107 0208 	add.w	r2, r7, #8
 80037b2:	4413      	add	r3, r2
 80037b4:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80037b8:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80037ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80037be:	3302      	adds	r3, #2
 80037c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80037c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037c8:	2218      	movs	r2, #24
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fecc 	bl	800456a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80037d2:	233f      	movs	r3, #63	; 0x3f
 80037d4:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80037d6:	2383      	movs	r3, #131	; 0x83
 80037d8:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 80037da:	f107 0308 	add.w	r3, r7, #8
 80037de:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 80037e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80037e4:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 80037e6:	f107 0333 	add.w	r3, r7, #51	; 0x33
 80037ea:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 80037ec:	2301      	movs	r3, #1
 80037ee:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 80037f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fbea 	bl	8003fd0 <hci_send_req>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	da01      	bge.n	8003806 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 8003802:	23ff      	movs	r3, #255	; 0xff
 8003804:	e007      	b.n	8003816 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 8003806:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <aci_gap_set_discoverable+0x1d4>
    return status;
 800380e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003812:	e000      	b.n	8003816 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3754      	adds	r7, #84	; 0x54
 800381a:	46bd      	mov	sp, r7
 800381c:	bd90      	pop	{r4, r7, pc}

0800381e <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b088      	sub	sp, #32
 8003822:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003824:	f107 0308 	add.w	r3, r7, #8
 8003828:	2218      	movs	r2, #24
 800382a:	2100      	movs	r1, #0
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fe9c 	bl	800456a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003832:	233f      	movs	r3, #63	; 0x3f
 8003834:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8003836:	f240 1301 	movw	r3, #257	; 0x101
 800383a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800383c:	1dfb      	adds	r3, r7, #7
 800383e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003840:	2301      	movs	r3, #1
 8003842:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8003844:	f107 0308 	add.w	r3, r7, #8
 8003848:	2100      	movs	r1, #0
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fbc0 	bl	8003fd0 <hci_send_req>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	da01      	bge.n	800385a <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8003856:	23ff      	movs	r3, #255	; 0xff
 8003858:	e000      	b.n	800385c <aci_gatt_init+0x3e>

  return status;
 800385a:	79fb      	ldrb	r3, [r7, #7]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3720      	adds	r7, #32
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b090      	sub	sp, #64	; 0x40
 8003868:	af00      	add	r7, sp, #0
 800386a:	6039      	str	r1, [r7, #0]
 800386c:	4611      	mov	r1, r2
 800386e:	461a      	mov	r2, r3
 8003870:	4603      	mov	r3, r0
 8003872:	71fb      	strb	r3, [r7, #7]
 8003874:	460b      	mov	r3, r1
 8003876:	71bb      	strb	r3, [r7, #6]
 8003878:	4613      	mov	r3, r2
 800387a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8003882:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003886:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800388a:	4413      	add	r3, r2
 800388c:	79fa      	ldrb	r2, [r7, #7]
 800388e:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8003892:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003896:	3301      	adds	r3, #1
 8003898:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800389c:	79fb      	ldrb	r3, [r7, #7]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d103      	bne.n	80038aa <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 80038a2:	2302      	movs	r3, #2
 80038a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80038a8:	e002      	b.n	80038b0 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 80038aa:	2310      	movs	r3, #16
 80038ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80038b0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80038b4:	f107 020c 	add.w	r2, r7, #12
 80038b8:	4413      	add	r3, r2
 80038ba:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80038be:	6839      	ldr	r1, [r7, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fe47 	bl	8004554 <memcpy>
  indx +=  uuid_len;
 80038c6:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80038ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80038ce:	4413      	add	r3, r2
 80038d0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 80038d4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80038d8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80038dc:	4413      	add	r3, r2
 80038de:	79ba      	ldrb	r2, [r7, #6]
 80038e0:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80038e4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80038e8:	3301      	adds	r3, #1
 80038ea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 80038ee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80038f2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80038f6:	4413      	add	r3, r2
 80038f8:	797a      	ldrb	r2, [r7, #5]
 80038fa:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80038fe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003902:	3301      	adds	r3, #1
 8003904:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003908:	f107 0320 	add.w	r3, r7, #32
 800390c:	2203      	movs	r2, #3
 800390e:	2100      	movs	r1, #0
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fe2a 	bl	800456a <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800391a:	2218      	movs	r2, #24
 800391c:	2100      	movs	r1, #0
 800391e:	4618      	mov	r0, r3
 8003920:	f000 fe23 	bl	800456a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003924:	233f      	movs	r3, #63	; 0x3f
 8003926:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8003928:	f44f 7381 	mov.w	r3, #258	; 0x102
 800392c:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800392e:	f107 030c 	add.w	r3, r7, #12
 8003932:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8003934:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003938:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 800393a:	f107 0320 	add.w	r3, r7, #32
 800393e:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8003940:	2303      	movs	r3, #3
 8003942:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8003944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f000 fb40 	bl	8003fd0 <hci_send_req>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	da01      	bge.n	800395a <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 8003956:	23ff      	movs	r3, #255	; 0xff
 8003958:	e00c      	b.n	8003974 <aci_gatt_add_serv+0x110>

  if (resp.status) {
 800395a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <aci_gatt_add_serv+0x104>
    return resp.status;
 8003962:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003966:	e005      	b.n	8003974 <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 8003968:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 800396c:	b29a      	uxth	r2, r3
 800396e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003970:	801a      	strh	r2, [r3, #0]

  return 0;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3740      	adds	r7, #64	; 0x40
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b092      	sub	sp, #72	; 0x48
 8003980:	af00      	add	r7, sp, #0
 8003982:	603a      	str	r2, [r7, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	4603      	mov	r3, r0
 8003988:	80fb      	strh	r3, [r7, #6]
 800398a:	460b      	mov	r3, r1
 800398c:	717b      	strb	r3, [r7, #5]
 800398e:	4613      	mov	r3, r2
 8003990:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8003998:	88fb      	ldrh	r3, [r7, #6]
 800399a:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800399c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80039a0:	f107 020c 	add.w	r2, r7, #12
 80039a4:	4413      	add	r3, r2
 80039a6:	88fa      	ldrh	r2, [r7, #6]
 80039a8:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80039aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80039ae:	3302      	adds	r3, #2
 80039b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 80039b4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80039b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80039bc:	4413      	add	r3, r2
 80039be:	797a      	ldrb	r2, [r7, #5]
 80039c0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80039c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80039c8:	3301      	adds	r3, #1
 80039ca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 80039ce:	797b      	ldrb	r3, [r7, #5]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d103      	bne.n	80039dc <aci_gatt_add_char+0x60>
    uuid_len = 2;
 80039d4:	2302      	movs	r3, #2
 80039d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80039da:	e002      	b.n	80039e2 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 80039dc:	2310      	movs	r3, #16
 80039de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80039e2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80039e6:	f107 020c 	add.w	r2, r7, #12
 80039ea:	4413      	add	r3, r2
 80039ec:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80039f0:	6839      	ldr	r1, [r7, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fdae 	bl	8004554 <memcpy>
  indx +=  uuid_len;
 80039f8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80039fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a00:	4413      	add	r3, r2
 8003a02:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8003a06:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a0e:	4413      	add	r3, r2
 8003a10:	793a      	ldrb	r2, [r7, #4]
 8003a12:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8003a16:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 8003a20:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a24:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a28:	4413      	add	r3, r2
 8003a2a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8003a2e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8003a32:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a36:	3301      	adds	r3, #1
 8003a38:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8003a3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a40:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a44:	4413      	add	r3, r2
 8003a46:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8003a4a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8003a4e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a52:	3301      	adds	r3, #1
 8003a54:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 8003a58:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a5c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a60:	4413      	add	r3, r2
 8003a62:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8003a66:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8003a6a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 8003a74:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a78:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8003a82:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8003a86:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 8003a90:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003a94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a98:	4413      	add	r3, r2
 8003a9a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8003a9e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8003aa2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003aac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fd58 	bl	800456a <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003aba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003abe:	2218      	movs	r2, #24
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fd51 	bl	800456a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003ac8:	233f      	movs	r3, #63	; 0x3f
 8003aca:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8003acc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003ad0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8003ad2:	f107 030c 	add.w	r3, r7, #12
 8003ad6:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8003ad8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003adc:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8003ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8003ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fa6e 	bl	8003fd0 <hci_send_req>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	da01      	bge.n	8003afe <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 8003afa:	23ff      	movs	r3, #255	; 0xff
 8003afc:	e00c      	b.n	8003b18 <aci_gatt_add_char+0x19c>

  if (resp.status) {
 8003afe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <aci_gatt_add_char+0x190>
    return resp.status;
 8003b06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b0a:	e005      	b.n	8003b18 <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 8003b0c:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b14:	801a      	strh	r2, [r3, #0]

  return 0;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3748      	adds	r7, #72	; 0x48
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b0ab      	sub	sp, #172	; 0xac
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4604      	mov	r4, r0
 8003b28:	4608      	mov	r0, r1
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4623      	mov	r3, r4
 8003b30:	80fb      	strh	r3, [r7, #6]
 8003b32:	4603      	mov	r3, r0
 8003b34:	80bb      	strh	r3, [r7, #4]
 8003b36:	460b      	mov	r3, r1
 8003b38:	70fb      	strb	r3, [r7, #3]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8003b44:	78bb      	ldrb	r3, [r7, #2]
 8003b46:	3306      	adds	r3, #6
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	dd01      	ble.n	8003b50 <aci_gatt_update_char_value+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 8003b4c:	2342      	movs	r3, #66	; 0x42
 8003b4e:	e076      	b.n	8003c3e <aci_gatt_update_char_value+0x11e>

  servHandle = htobs(servHandle);
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8003b54:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003b58:	f107 0208 	add.w	r2, r7, #8
 8003b5c:	4413      	add	r3, r2
 8003b5e:	88fa      	ldrh	r2, [r7, #6]
 8003b60:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8003b62:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003b66:	3302      	adds	r3, #2
 8003b68:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 8003b6c:	88bb      	ldrh	r3, [r7, #4]
 8003b6e:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8003b70:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003b74:	f107 0208 	add.w	r2, r7, #8
 8003b78:	4413      	add	r3, r2
 8003b7a:	88ba      	ldrh	r2, [r7, #4]
 8003b7c:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8003b7e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003b82:	3302      	adds	r3, #2
 8003b84:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 8003b88:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003b8c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b90:	4413      	add	r3, r2
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8003b98:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 8003ba2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003ba6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003baa:	4413      	add	r3, r2
 8003bac:	78ba      	ldrb	r2, [r7, #2]
 8003bae:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8003bb2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8003bbc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003bc0:	f107 0208 	add.w	r2, r7, #8
 8003bc4:	4413      	add	r3, r2
 8003bc6:	78ba      	ldrb	r2, [r7, #2]
 8003bc8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fcc1 	bl	8004554 <memcpy>
  indx +=  charValueLen;
 8003bd2:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8003bd6:	78bb      	ldrb	r3, [r7, #2]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003bde:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003be2:	2218      	movs	r2, #24
 8003be4:	2100      	movs	r1, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fcbf 	bl	800456a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003bec:	233f      	movs	r3, #63	; 0x3f
 8003bee:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8003bf2:	f44f 7383 	mov.w	r3, #262	; 0x106
 8003bf6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8003bfa:	f107 0308 	add.w	r3, r7, #8
 8003bfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8003c02:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003c06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8003c0a:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8003c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8003c12:	2301      	movs	r3, #1
 8003c14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8003c18:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 f9d6 	bl	8003fd0 <hci_send_req>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	da01      	bge.n	8003c2e <aci_gatt_update_char_value+0x10e>
    return BLE_STATUS_TIMEOUT;
 8003c2a:	23ff      	movs	r3, #255	; 0xff
 8003c2c:	e007      	b.n	8003c3e <aci_gatt_update_char_value+0x11e>

  if (status) {
 8003c2e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <aci_gatt_update_char_value+0x11c>
    return status;
 8003c36:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8003c3a:	e000      	b.n	8003c3e <aci_gatt_update_char_value+0x11e>
  }

  return 0;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	37ac      	adds	r7, #172	; 0xac
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd90      	pop	{r4, r7, pc}

08003c46 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b0aa      	sub	sp, #168	; 0xa8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	603a      	str	r2, [r7, #0]
 8003c50:	71fb      	strb	r3, [r7, #7]
 8003c52:	460b      	mov	r3, r1
 8003c54:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8003c5c:	79bb      	ldrb	r3, [r7, #6]
 8003c5e:	3302      	adds	r3, #2
 8003c60:	2b80      	cmp	r3, #128	; 0x80
 8003c62:	dd01      	ble.n	8003c68 <aci_hal_write_config_data+0x22>
    return BLE_STATUS_INVALID_PARAMS;
 8003c64:	2342      	movs	r3, #66	; 0x42
 8003c66:	e052      	b.n	8003d0e <aci_hal_write_config_data+0xc8>

  buffer[indx] = offset;
 8003c68:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003c6c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003c70:	4413      	add	r3, r2
 8003c72:	79fa      	ldrb	r2, [r7, #7]
 8003c74:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8003c78:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 8003c82:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003c86:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003c8a:	4413      	add	r3, r2
 8003c8c:	79ba      	ldrb	r2, [r7, #6]
 8003c8e:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8003c92:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003c96:	3301      	adds	r3, #1
 8003c98:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8003c9c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003ca0:	f107 0208 	add.w	r2, r7, #8
 8003ca4:	4413      	add	r3, r2
 8003ca6:	79ba      	ldrb	r2, [r7, #6]
 8003ca8:	6839      	ldr	r1, [r7, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fc52 	bl	8004554 <memcpy>
  indx +=  len;
 8003cb0:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8003cb4:	79bb      	ldrb	r3, [r7, #6]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003cbc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003cc0:	2218      	movs	r2, #24
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fc50 	bl	800456a <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003cca:	233f      	movs	r3, #63	; 0x3f
 8003ccc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8003cd0:	230c      	movs	r3, #12
 8003cd2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8003cd6:	f107 0308 	add.w	r3, r7, #8
 8003cda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8003cde:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003ce2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8003ce6:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8003cea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8003cf4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f968 	bl	8003fd0 <hci_send_req>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	da01      	bge.n	8003d0a <aci_hal_write_config_data+0xc4>
    return BLE_STATUS_TIMEOUT;
 8003d06:	23ff      	movs	r3, #255	; 0xff
 8003d08:	e001      	b.n	8003d0e <aci_hal_write_config_data+0xc8>

  return status;
 8003d0a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	37a8      	adds	r7, #168	; 0xa8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b088      	sub	sp, #32
 8003d1a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003d1c:	f107 0308 	add.w	r3, r7, #8
 8003d20:	2218      	movs	r2, #24
 8003d22:	2100      	movs	r1, #0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fc20 	bl	800456a <memset>
  rq.ogf = OGF_HOST_CTL;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003d32:	1dfb      	adds	r3, r7, #7
 8003d34:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003d36:	2301      	movs	r3, #1
 8003d38:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003d3a:	f107 0308 	add.w	r3, r7, #8
 8003d3e:	2100      	movs	r1, #0
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f945 	bl	8003fd0 <hci_send_req>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	da01      	bge.n	8003d50 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8003d4c:	23ff      	movs	r3, #255	; 0xff
 8003d4e:	e000      	b.n	8003d52 <hci_reset+0x3c>
  
  return status;  
 8003d50:	79fb      	ldrb	r3, [r7, #7]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b092      	sub	sp, #72	; 0x48
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	4603      	mov	r3, r0
 8003d62:	6039      	str	r1, [r7, #0]
 8003d64:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8003d66:	f107 0310 	add.w	r3, r7, #16
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fbfb 	bl	800456a <memset>
  scan_resp_cp.length = length;
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	2b1f      	cmp	r3, #31
 8003d7c:	bf28      	it	cs
 8003d7e:	231f      	movcs	r3, #31
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	f107 0310 	add.w	r3, r7, #16
 8003d88:	3301      	adds	r3, #1
 8003d8a:	6839      	ldr	r1, [r7, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fbe1 	bl	8004554 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003d92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d96:	2218      	movs	r2, #24
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fbe5 	bl	800456a <memset>
  rq.ogf = OGF_LE_CTL;
 8003da0:	2308      	movs	r3, #8
 8003da2:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8003da4:	2309      	movs	r3, #9
 8003da6:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 8003da8:	f107 0310 	add.w	r3, r7, #16
 8003dac:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8003dae:	2320      	movs	r3, #32
 8003db0:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8003db2:	f107 030f 	add.w	r3, r7, #15
 8003db6:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8003db8:	2301      	movs	r3, #1
 8003dba:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003dbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 f904 	bl	8003fd0 <hci_send_req>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	da01      	bge.n	8003dd2 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8003dce:	23ff      	movs	r3, #255	; 0xff
 8003dd0:	e000      	b.n	8003dd4 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3748      	adds	r7, #72	; 0x48
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3308      	adds	r3, #8
 8003de8:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d001      	beq.n	8003df6 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8003df2:	2301      	movs	r3, #1
 8003df4:	e00c      	b.n	8003e10 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3302      	adds	r3, #2
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003e04:	3b03      	subs	r3, #3
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d001      	beq.n	8003e0e <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e000      	b.n	8003e10 <verify_packet+0x34>
  
  return 0;      
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b0a6      	sub	sp, #152	; 0x98
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	607b      	str	r3, [r7, #4]
 8003e24:	4603      	mov	r3, r0
 8003e26:	81fb      	strh	r3, [r7, #14]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	81bb      	strh	r3, [r7, #12]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8003e30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e38:	b21a      	sxth	r2, r3
 8003e3a:	89fb      	ldrh	r3, [r7, #14]
 8003e3c:	029b      	lsls	r3, r3, #10
 8003e3e:	b21b      	sxth	r3, r3
 8003e40:	4313      	orrs	r3, r2
 8003e42:	b21b      	sxth	r3, r3
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8003e48:	7afb      	ldrb	r3, [r7, #11]
 8003e4a:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8003e50:	f107 0318 	add.w	r3, r7, #24
 8003e54:	3301      	adds	r3, #1
 8003e56:	461a      	mov	r2, r3
 8003e58:	f107 0314 	add.w	r3, r7, #20
 8003e5c:	8819      	ldrh	r1, [r3, #0]
 8003e5e:	789b      	ldrb	r3, [r3, #2]
 8003e60:	8011      	strh	r1, [r2, #0]
 8003e62:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8003e64:	f107 0318 	add.w	r3, r7, #24
 8003e68:	3304      	adds	r3, #4
 8003e6a:	7afa      	ldrb	r2, [r7, #11]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fb70 	bl	8004554 <memcpy>
  
  if (hciContext.io.Send)
 8003e74:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <send_cmd+0x7c>)
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d009      	beq.n	8003e90 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <send_cmd+0x7c>)
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	7afa      	ldrb	r2, [r7, #11]
 8003e82:	b292      	uxth	r2, r2
 8003e84:	3204      	adds	r2, #4
 8003e86:	b291      	uxth	r1, r2
 8003e88:	f107 0218 	add.w	r2, r7, #24
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	4798      	blx	r3
  }
}
 8003e90:	bf00      	nop
 8003e92:	3798      	adds	r7, #152	; 0x98
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	20000460 	.word	0x20000460

08003e9c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8003ea6:	e00a      	b.n	8003ebe <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8003ea8:	f107 030c 	add.w	r3, r7, #12
 8003eac:	4619      	mov	r1, r3
 8003eae:	6838      	ldr	r0, [r7, #0]
 8003eb0:	f000 fada 	bl	8004468 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fa49 	bl	8004350 <list_insert_head>
  while (!list_is_empty(src_list))
 8003ebe:	6838      	ldr	r0, [r7, #0]
 8003ec0:	f000 fa26 	bl	8004310 <list_is_empty>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0ee      	beq.n	8003ea8 <move_list+0xc>
  }
}
 8003eca:	bf00      	nop
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003eda:	e009      	b.n	8003ef0 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8003edc:	1d3b      	adds	r3, r7, #4
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4808      	ldr	r0, [pc, #32]	; (8003f04 <free_event_list+0x30>)
 8003ee2:	f000 fa9c 	bl	800441e <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4807      	ldr	r0, [pc, #28]	; (8003f08 <free_event_list+0x34>)
 8003eec:	f000 fa54 	bl	8004398 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003ef0:	4805      	ldr	r0, [pc, #20]	; (8003f08 <free_event_list+0x34>)
 8003ef2:	f000 fade 	bl	80044b2 <list_get_size>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	ddef      	ble.n	8003edc <free_event_list+0x8>
  }
}
 8003efc:	bf00      	nop
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	2000053c 	.word	0x2000053c
 8003f08:	20000534 	.word	0x20000534

08003f0c <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8003f1c:	4a18      	ldr	r2, [pc, #96]	; (8003f80 <hci_init+0x74>)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8003f22:	4818      	ldr	r0, [pc, #96]	; (8003f84 <hci_init+0x78>)
 8003f24:	f000 f9e4 	bl	80042f0 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8003f28:	4817      	ldr	r0, [pc, #92]	; (8003f88 <hci_init+0x7c>)
 8003f2a:	f000 f9e1 	bl	80042f0 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8003f2e:	f7fc fc67 	bl	8000800 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003f32:	2300      	movs	r3, #0
 8003f34:	73fb      	strb	r3, [r7, #15]
 8003f36:	e00c      	b.n	8003f52 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	228c      	movs	r2, #140	; 0x8c
 8003f3c:	fb02 f303 	mul.w	r3, r2, r3
 8003f40:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <hci_init+0x80>)
 8003f42:	4413      	add	r3, r2
 8003f44:	4619      	mov	r1, r3
 8003f46:	480f      	ldr	r0, [pc, #60]	; (8003f84 <hci_init+0x78>)
 8003f48:	f000 fa26 	bl	8004398 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	73fb      	strb	r3, [r7, #15]
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d9ef      	bls.n	8003f38 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <hci_init+0x74>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <hci_init+0x5c>
 8003f60:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <hci_init+0x74>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2000      	movs	r0, #0
 8003f66:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <hci_init+0x74>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <hci_init+0x6a>
 8003f70:	4b03      	ldr	r3, [pc, #12]	; (8003f80 <hci_init+0x74>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4798      	blx	r3
}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000460 	.word	0x20000460
 8003f84:	20000534 	.word	0x20000534
 8003f88:	2000053c 	.word	0x2000053c
 8003f8c:	200001a4 	.word	0x200001a4

08003f90 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a0b      	ldr	r2, [pc, #44]	; (8003fcc <hci_register_io_bus+0x3c>)
 8003f9e:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4a09      	ldr	r2, [pc, #36]	; (8003fcc <hci_register_io_bus+0x3c>)
 8003fa6:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	4a07      	ldr	r2, [pc, #28]	; (8003fcc <hci_register_io_bus+0x3c>)
 8003fae:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	4a05      	ldr	r2, [pc, #20]	; (8003fcc <hci_register_io_bus+0x3c>)
 8003fb6:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	4a03      	ldr	r2, [pc, #12]	; (8003fcc <hci_register_io_bus+0x3c>)
 8003fbe:	6093      	str	r3, [r2, #8]
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	20000460 	.word	0x20000460

08003fd0 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08e      	sub	sp, #56	; 0x38
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	885b      	ldrh	r3, [r3, #2]
 8003fe0:	b21b      	sxth	r3, r3
 8003fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fe6:	b21a      	sxth	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	029b      	lsls	r3, r3, #10
 8003fee:	b21b      	sxth	r3, r3
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	b21b      	sxth	r3, r3
 8003ff4:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8003ffa:	f107 0308 	add.w	r3, r7, #8
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f976 	bl	80042f0 <list_init_head>

  free_event_list();
 8004004:	f7ff ff66 	bl	8003ed4 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8818      	ldrh	r0, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8859      	ldrh	r1, [r3, #2]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	b2da      	uxtb	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f7ff feff 	bl	8003e1c <send_cmd>
  
  if (async)
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <hci_send_req+0x58>
  {
    return 0;
 8004024:	2300      	movs	r3, #0
 8004026:	e0e2      	b.n	80041ee <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8004028:	f7fd faa0 	bl	800156c <HAL_GetTick>
 800402c:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800402e:	f7fd fa9d 	bl	800156c <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800403c:	f200 80b3 	bhi.w	80041a6 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8004040:	486d      	ldr	r0, [pc, #436]	; (80041f8 <hci_send_req+0x228>)
 8004042:	f000 f965 	bl	8004310 <list_is_empty>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d000      	beq.n	800404e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800404c:	e7ef      	b.n	800402e <hci_send_req+0x5e>
      {
        break;
 800404e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8004050:	f107 0310 	add.w	r3, r7, #16
 8004054:	4619      	mov	r1, r3
 8004056:	4868      	ldr	r0, [pc, #416]	; (80041f8 <hci_send_req+0x228>)
 8004058:	f000 f9e1 	bl	800441e <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	3308      	adds	r3, #8
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b04      	cmp	r3, #4
 8004068:	d17a      	bne.n	8004160 <hci_send_req+0x190>
    {
      event_pckt = (void *)(hci_hdr->data);
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	3301      	adds	r3, #1
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	3308      	adds	r3, #8
 8004074:	3303      	adds	r3, #3
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800407e:	3b03      	subs	r3, #3
 8004080:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8004082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b0f      	cmp	r3, #15
 8004088:	d00a      	beq.n	80040a0 <hci_send_req+0xd0>
 800408a:	2b0f      	cmp	r3, #15
 800408c:	dc02      	bgt.n	8004094 <hci_send_req+0xc4>
 800408e:	2b0e      	cmp	r3, #14
 8004090:	d028      	beq.n	80040e4 <hci_send_req+0x114>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8004092:	e06a      	b.n	800416a <hci_send_req+0x19a>
      switch (event_pckt->evt) 
 8004094:	2b10      	cmp	r3, #16
 8004096:	f000 8088 	beq.w	80041aa <hci_send_req+0x1da>
 800409a:	2b3e      	cmp	r3, #62	; 0x3e
 800409c:	d042      	beq.n	8004124 <hci_send_req+0x154>
        break;
 800409e:	e064      	b.n	800416a <hci_send_req+0x19a>
        cs = (void *) ptr;
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	61bb      	str	r3, [r7, #24]
        if (cs->opcode != opcode)
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	885b      	ldrh	r3, [r3, #2]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d17e      	bne.n	80041ae <hci_send_req+0x1de>
        if (r->event != EVT_CMD_STATUS) {
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b0f      	cmp	r3, #15
 80040b6:	d004      	beq.n	80040c2 <hci_send_req+0xf2>
          if (cs->status) {
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d051      	beq.n	8004164 <hci_send_req+0x194>
            goto failed;
 80040c0:	e078      	b.n	80041b4 <hci_send_req+0x1e4>
        r->rlen = MIN(len, r->rlen);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	bf28      	it	cs
 80040cc:	461a      	movcs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6918      	ldr	r0, [r3, #16]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	461a      	mov	r2, r3
 80040dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040de:	f000 fa39 	bl	8004554 <memcpy>
        goto done;
 80040e2:	e078      	b.n	80041d6 <hci_send_req+0x206>
        cc = (void *) ptr;
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	617b      	str	r3, [r7, #20]
        if (cc->opcode != opcode)
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d15d      	bne.n	80041b2 <hci_send_req+0x1e2>
        ptr += EVT_CMD_COMPLETE_SIZE;
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	3303      	adds	r3, #3
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	3b03      	subs	r3, #3
 8004100:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	429a      	cmp	r2, r3
 800410a:	bf28      	it	cs
 800410c:	461a      	movcs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6918      	ldr	r0, [r3, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	461a      	mov	r2, r3
 800411c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800411e:	f000 fa19 	bl	8004554 <memcpy>
        goto done;
 8004122:	e058      	b.n	80041d6 <hci_send_req+0x206>
        me = (void *) ptr;
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	61fb      	str	r3, [r7, #28]
        if (me->subevent != r->event)
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	429a      	cmp	r2, r3
 8004134:	d118      	bne.n	8004168 <hci_send_req+0x198>
        len -= 1;
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	3b01      	subs	r3, #1
 800413a:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	695a      	ldr	r2, [r3, #20]
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	429a      	cmp	r2, r3
 8004144:	bf28      	it	cs
 8004146:	461a      	movcs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6918      	ldr	r0, [r3, #16]
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	1c59      	adds	r1, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	461a      	mov	r2, r3
 800415a:	f000 f9fb 	bl	8004554 <memcpy>
        goto done;
 800415e:	e03a      	b.n	80041d6 <hci_send_req+0x206>
      }
    }
 8004160:	bf00      	nop
 8004162:	e002      	b.n	800416a <hci_send_req+0x19a>
          break;
 8004164:	bf00      	nop
 8004166:	e000      	b.n	800416a <hci_send_req+0x19a>
          break;
 8004168:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800416a:	4824      	ldr	r0, [pc, #144]	; (80041fc <hci_send_req+0x22c>)
 800416c:	f000 f8d0 	bl	8004310 <list_is_empty>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00d      	beq.n	8004192 <hci_send_req+0x1c2>
 8004176:	4820      	ldr	r0, [pc, #128]	; (80041f8 <hci_send_req+0x228>)
 8004178:	f000 f8ca 	bl	8004310 <list_is_empty>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4619      	mov	r1, r3
 8004186:	481d      	ldr	r0, [pc, #116]	; (80041fc <hci_send_req+0x22c>)
 8004188:	f000 f906 	bl	8004398 <list_insert_tail>
      hciReadPacket=NULL;
 800418c:	2300      	movs	r3, #0
 800418e:	613b      	str	r3, [r7, #16]
 8004190:	e008      	b.n	80041a4 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	f107 0308 	add.w	r3, r7, #8
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f000 f8fc 	bl	8004398 <list_insert_tail>
      hciReadPacket=NULL;
 80041a0:	2300      	movs	r3, #0
 80041a2:	613b      	str	r3, [r7, #16]
  {
 80041a4:	e740      	b.n	8004028 <hci_send_req+0x58>
        goto failed;
 80041a6:	bf00      	nop
 80041a8:	e004      	b.n	80041b4 <hci_send_req+0x1e4>
        goto failed;
 80041aa:	bf00      	nop
 80041ac:	e002      	b.n	80041b4 <hci_send_req+0x1e4>
          goto failed;
 80041ae:	bf00      	nop
 80041b0:	e000      	b.n	80041b4 <hci_send_req+0x1e4>
          goto failed;
 80041b2:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d004      	beq.n	80041c4 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4619      	mov	r1, r3
 80041be:	480f      	ldr	r0, [pc, #60]	; (80041fc <hci_send_req+0x22c>)
 80041c0:	f000 f8c6 	bl	8004350 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80041c4:	f107 0308 	add.w	r3, r7, #8
 80041c8:	4619      	mov	r1, r3
 80041ca:	480b      	ldr	r0, [pc, #44]	; (80041f8 <hci_send_req+0x228>)
 80041cc:	f7ff fe66 	bl	8003e9c <move_list>

  return -1;
 80041d0:	f04f 33ff 	mov.w	r3, #4294967295
 80041d4:	e00b      	b.n	80041ee <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	4619      	mov	r1, r3
 80041da:	4808      	ldr	r0, [pc, #32]	; (80041fc <hci_send_req+0x22c>)
 80041dc:	f000 f8b8 	bl	8004350 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80041e0:	f107 0308 	add.w	r3, r7, #8
 80041e4:	4619      	mov	r1, r3
 80041e6:	4804      	ldr	r0, [pc, #16]	; (80041f8 <hci_send_req+0x228>)
 80041e8:	f7ff fe58 	bl	8003e9c <move_list>

  return 0;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3738      	adds	r7, #56	; 0x38
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	2000053c 	.word	0x2000053c
 80041fc:	20000534 	.word	0x20000534

08004200 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8004206:	2300      	movs	r3, #0
 8004208:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800420a:	e013      	b.n	8004234 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800420c:	1d3b      	adds	r3, r7, #4
 800420e:	4619      	mov	r1, r3
 8004210:	480d      	ldr	r0, [pc, #52]	; (8004248 <hci_user_evt_proc+0x48>)
 8004212:	f000 f904 	bl	800441e <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8004216:	4b0d      	ldr	r3, [pc, #52]	; (800424c <hci_user_evt_proc+0x4c>)
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800421e:	4b0b      	ldr	r3, [pc, #44]	; (800424c <hci_user_evt_proc+0x4c>)
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	3208      	adds	r2, #8
 8004226:	4610      	mov	r0, r2
 8004228:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4619      	mov	r1, r3
 800422e:	4808      	ldr	r0, [pc, #32]	; (8004250 <hci_user_evt_proc+0x50>)
 8004230:	f000 f8b2 	bl	8004398 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8004234:	4804      	ldr	r0, [pc, #16]	; (8004248 <hci_user_evt_proc+0x48>)
 8004236:	f000 f86b 	bl	8004310 <list_is_empty>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0e5      	beq.n	800420c <hci_user_evt_proc+0xc>
  }
}
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	2000053c 	.word	0x2000053c
 800424c:	20000460 	.word	0x20000460
 8004250:	20000534 	.word	0x20000534

08004254 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8004264:	481f      	ldr	r0, [pc, #124]	; (80042e4 <hci_notify_asynch_evt+0x90>)
 8004266:	f000 f853 	bl	8004310 <list_is_empty>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d132      	bne.n	80042d6 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8004270:	f107 030c 	add.w	r3, r7, #12
 8004274:	4619      	mov	r1, r3
 8004276:	481b      	ldr	r0, [pc, #108]	; (80042e4 <hci_notify_asynch_evt+0x90>)
 8004278:	f000 f8d1 	bl	800441e <list_remove_head>
    
    if (hciContext.io.Receive)
 800427c:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <hci_notify_asynch_evt+0x94>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d02a      	beq.n	80042da <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8004284:	4b18      	ldr	r3, [pc, #96]	; (80042e8 <hci_notify_asynch_evt+0x94>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	3208      	adds	r2, #8
 800428c:	2180      	movs	r1, #128	; 0x80
 800428e:	4610      	mov	r0, r2
 8004290:	4798      	blx	r3
 8004292:	4603      	mov	r3, r0
 8004294:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8004296:	7cfb      	ldrb	r3, [r7, #19]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d016      	beq.n	80042ca <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	7cfa      	ldrb	r2, [r7, #19]
 80042a0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff fd98 	bl	8003ddc <verify_packet>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d105      	bne.n	80042be <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4619      	mov	r1, r3
 80042b6:	480d      	ldr	r0, [pc, #52]	; (80042ec <hci_notify_asynch_evt+0x98>)
 80042b8:	f000 f86e 	bl	8004398 <list_insert_tail>
 80042bc:	e00d      	b.n	80042da <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4619      	mov	r1, r3
 80042c2:	4808      	ldr	r0, [pc, #32]	; (80042e4 <hci_notify_asynch_evt+0x90>)
 80042c4:	f000 f844 	bl	8004350 <list_insert_head>
 80042c8:	e007      	b.n	80042da <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4619      	mov	r1, r3
 80042ce:	4805      	ldr	r0, [pc, #20]	; (80042e4 <hci_notify_asynch_evt+0x90>)
 80042d0:	f000 f83e 	bl	8004350 <list_insert_head>
 80042d4:	e001      	b.n	80042da <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80042d6:	2301      	movs	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80042da:	697b      	ldr	r3, [r7, #20]

}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20000534 	.word	0x20000534
 80042e8:	20000460 	.word	0x20000460
 80042ec:	2000053c 	.word	0x2000053c

080042f0 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	605a      	str	r2, [r3, #4]
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004318:	f3ef 8310 	mrs	r3, PRIMASK
 800431c:	60fb      	str	r3, [r7, #12]
  return(result);
 800431e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004320:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004322:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	429a      	cmp	r2, r3
 800432c:	d102      	bne.n	8004334 <list_is_empty+0x24>
  {
    return_value = 1;
 800432e:	2301      	movs	r3, #1
 8004330:	75fb      	strb	r3, [r7, #23]
 8004332:	e001      	b.n	8004338 <list_is_empty+0x28>
  }
  else
  {
    return_value = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	75fb      	strb	r3, [r7, #23]
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8004342:	7dfb      	ldrb	r3, [r7, #23]
}
 8004344:	4618      	mov	r0, r3
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800435a:	f3ef 8310 	mrs	r3, PRIMASK
 800435e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004360:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004362:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004364:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800438c:	bf00      	nop
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a2:	f3ef 8310 	mrs	r3, PRIMASK
 80043a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80043a8:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80043aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80043ac:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80043d4:	bf00      	nop
 80043d6:	371c      	adds	r7, #28
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e8:	f3ef 8310 	mrs	r3, PRIMASK
 80043ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80043ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80043f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80043f2:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6852      	ldr	r2, [r2, #4]
 8004406:	605a      	str	r2, [r3, #4]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004412:	bf00      	nop
 8004414:	371c      	adds	r7, #28
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b086      	sub	sp, #24
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004428:	f3ef 8310 	mrs	r3, PRIMASK
 800442c:	60fb      	str	r3, [r7, #12]
  return(result);
 800442e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004430:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004432:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff ffcd 	bl	80043e0 <list_remove_node>
  (*node)->next = NULL;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2200      	movs	r2, #0
 8004454:	605a      	str	r2, [r3, #4]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004460:	bf00      	nop
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004472:	f3ef 8310 	mrs	r3, PRIMASK
 8004476:	60fb      	str	r3, [r7, #12]
  return(result);
 8004478:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800447a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800447c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff ffa8 	bl	80043e0 <list_remove_node>
  (*node)->next = NULL;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2200      	movs	r2, #0
 800449e:	605a      	str	r2, [r3, #4]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80044aa:	bf00      	nop
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b089      	sub	sp, #36	; 0x24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  int size = 0;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044be:	f3ef 8310 	mrs	r3, PRIMASK
 80044c2:	613b      	str	r3, [r7, #16]
  return(result);
 80044c4:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80044c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80044c8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80044d0:	e005      	b.n	80044de <list_get_size+0x2c>
  {
    size++;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	3301      	adds	r3, #1
 80044d6:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d1f5      	bne.n	80044d2 <list_get_size+0x20>
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80044f0:	69fb      	ldr	r3, [r7, #28]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3724      	adds	r7, #36	; 0x24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <__errno>:
 8004500:	4b01      	ldr	r3, [pc, #4]	; (8004508 <__errno+0x8>)
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000010 	.word	0x20000010

0800450c <__libc_init_array>:
 800450c:	b570      	push	{r4, r5, r6, lr}
 800450e:	4e0d      	ldr	r6, [pc, #52]	; (8004544 <__libc_init_array+0x38>)
 8004510:	4c0d      	ldr	r4, [pc, #52]	; (8004548 <__libc_init_array+0x3c>)
 8004512:	1ba4      	subs	r4, r4, r6
 8004514:	10a4      	asrs	r4, r4, #2
 8004516:	2500      	movs	r5, #0
 8004518:	42a5      	cmp	r5, r4
 800451a:	d109      	bne.n	8004530 <__libc_init_array+0x24>
 800451c:	4e0b      	ldr	r6, [pc, #44]	; (800454c <__libc_init_array+0x40>)
 800451e:	4c0c      	ldr	r4, [pc, #48]	; (8004550 <__libc_init_array+0x44>)
 8004520:	f000 ff74 	bl	800540c <_init>
 8004524:	1ba4      	subs	r4, r4, r6
 8004526:	10a4      	asrs	r4, r4, #2
 8004528:	2500      	movs	r5, #0
 800452a:	42a5      	cmp	r5, r4
 800452c:	d105      	bne.n	800453a <__libc_init_array+0x2e>
 800452e:	bd70      	pop	{r4, r5, r6, pc}
 8004530:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004534:	4798      	blx	r3
 8004536:	3501      	adds	r5, #1
 8004538:	e7ee      	b.n	8004518 <__libc_init_array+0xc>
 800453a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800453e:	4798      	blx	r3
 8004540:	3501      	adds	r5, #1
 8004542:	e7f2      	b.n	800452a <__libc_init_array+0x1e>
 8004544:	08005568 	.word	0x08005568
 8004548:	08005568 	.word	0x08005568
 800454c:	08005568 	.word	0x08005568
 8004550:	0800556c 	.word	0x0800556c

08004554 <memcpy>:
 8004554:	b510      	push	{r4, lr}
 8004556:	1e43      	subs	r3, r0, #1
 8004558:	440a      	add	r2, r1
 800455a:	4291      	cmp	r1, r2
 800455c:	d100      	bne.n	8004560 <memcpy+0xc>
 800455e:	bd10      	pop	{r4, pc}
 8004560:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004564:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004568:	e7f7      	b.n	800455a <memcpy+0x6>

0800456a <memset>:
 800456a:	4402      	add	r2, r0
 800456c:	4603      	mov	r3, r0
 800456e:	4293      	cmp	r3, r2
 8004570:	d100      	bne.n	8004574 <memset+0xa>
 8004572:	4770      	bx	lr
 8004574:	f803 1b01 	strb.w	r1, [r3], #1
 8004578:	e7f9      	b.n	800456e <memset+0x4>
	...

0800457c <iprintf>:
 800457c:	b40f      	push	{r0, r1, r2, r3}
 800457e:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <iprintf+0x2c>)
 8004580:	b513      	push	{r0, r1, r4, lr}
 8004582:	681c      	ldr	r4, [r3, #0]
 8004584:	b124      	cbz	r4, 8004590 <iprintf+0x14>
 8004586:	69a3      	ldr	r3, [r4, #24]
 8004588:	b913      	cbnz	r3, 8004590 <iprintf+0x14>
 800458a:	4620      	mov	r0, r4
 800458c:	f000 fa22 	bl	80049d4 <__sinit>
 8004590:	ab05      	add	r3, sp, #20
 8004592:	9a04      	ldr	r2, [sp, #16]
 8004594:	68a1      	ldr	r1, [r4, #8]
 8004596:	9301      	str	r3, [sp, #4]
 8004598:	4620      	mov	r0, r4
 800459a:	f000 fbdb 	bl	8004d54 <_vfiprintf_r>
 800459e:	b002      	add	sp, #8
 80045a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045a4:	b004      	add	sp, #16
 80045a6:	4770      	bx	lr
 80045a8:	20000010 	.word	0x20000010

080045ac <_puts_r>:
 80045ac:	b570      	push	{r4, r5, r6, lr}
 80045ae:	460e      	mov	r6, r1
 80045b0:	4605      	mov	r5, r0
 80045b2:	b118      	cbz	r0, 80045bc <_puts_r+0x10>
 80045b4:	6983      	ldr	r3, [r0, #24]
 80045b6:	b90b      	cbnz	r3, 80045bc <_puts_r+0x10>
 80045b8:	f000 fa0c 	bl	80049d4 <__sinit>
 80045bc:	69ab      	ldr	r3, [r5, #24]
 80045be:	68ac      	ldr	r4, [r5, #8]
 80045c0:	b913      	cbnz	r3, 80045c8 <_puts_r+0x1c>
 80045c2:	4628      	mov	r0, r5
 80045c4:	f000 fa06 	bl	80049d4 <__sinit>
 80045c8:	4b23      	ldr	r3, [pc, #140]	; (8004658 <_puts_r+0xac>)
 80045ca:	429c      	cmp	r4, r3
 80045cc:	d117      	bne.n	80045fe <_puts_r+0x52>
 80045ce:	686c      	ldr	r4, [r5, #4]
 80045d0:	89a3      	ldrh	r3, [r4, #12]
 80045d2:	071b      	lsls	r3, r3, #28
 80045d4:	d51d      	bpl.n	8004612 <_puts_r+0x66>
 80045d6:	6923      	ldr	r3, [r4, #16]
 80045d8:	b1db      	cbz	r3, 8004612 <_puts_r+0x66>
 80045da:	3e01      	subs	r6, #1
 80045dc:	68a3      	ldr	r3, [r4, #8]
 80045de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80045e2:	3b01      	subs	r3, #1
 80045e4:	60a3      	str	r3, [r4, #8]
 80045e6:	b9e9      	cbnz	r1, 8004624 <_puts_r+0x78>
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	da2e      	bge.n	800464a <_puts_r+0x9e>
 80045ec:	4622      	mov	r2, r4
 80045ee:	210a      	movs	r1, #10
 80045f0:	4628      	mov	r0, r5
 80045f2:	f000 f83f 	bl	8004674 <__swbuf_r>
 80045f6:	3001      	adds	r0, #1
 80045f8:	d011      	beq.n	800461e <_puts_r+0x72>
 80045fa:	200a      	movs	r0, #10
 80045fc:	e011      	b.n	8004622 <_puts_r+0x76>
 80045fe:	4b17      	ldr	r3, [pc, #92]	; (800465c <_puts_r+0xb0>)
 8004600:	429c      	cmp	r4, r3
 8004602:	d101      	bne.n	8004608 <_puts_r+0x5c>
 8004604:	68ac      	ldr	r4, [r5, #8]
 8004606:	e7e3      	b.n	80045d0 <_puts_r+0x24>
 8004608:	4b15      	ldr	r3, [pc, #84]	; (8004660 <_puts_r+0xb4>)
 800460a:	429c      	cmp	r4, r3
 800460c:	bf08      	it	eq
 800460e:	68ec      	ldreq	r4, [r5, #12]
 8004610:	e7de      	b.n	80045d0 <_puts_r+0x24>
 8004612:	4621      	mov	r1, r4
 8004614:	4628      	mov	r0, r5
 8004616:	f000 f87f 	bl	8004718 <__swsetup_r>
 800461a:	2800      	cmp	r0, #0
 800461c:	d0dd      	beq.n	80045da <_puts_r+0x2e>
 800461e:	f04f 30ff 	mov.w	r0, #4294967295
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	2b00      	cmp	r3, #0
 8004626:	da04      	bge.n	8004632 <_puts_r+0x86>
 8004628:	69a2      	ldr	r2, [r4, #24]
 800462a:	429a      	cmp	r2, r3
 800462c:	dc06      	bgt.n	800463c <_puts_r+0x90>
 800462e:	290a      	cmp	r1, #10
 8004630:	d004      	beq.n	800463c <_puts_r+0x90>
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	6022      	str	r2, [r4, #0]
 8004638:	7019      	strb	r1, [r3, #0]
 800463a:	e7cf      	b.n	80045dc <_puts_r+0x30>
 800463c:	4622      	mov	r2, r4
 800463e:	4628      	mov	r0, r5
 8004640:	f000 f818 	bl	8004674 <__swbuf_r>
 8004644:	3001      	adds	r0, #1
 8004646:	d1c9      	bne.n	80045dc <_puts_r+0x30>
 8004648:	e7e9      	b.n	800461e <_puts_r+0x72>
 800464a:	6823      	ldr	r3, [r4, #0]
 800464c:	200a      	movs	r0, #10
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	6022      	str	r2, [r4, #0]
 8004652:	7018      	strb	r0, [r3, #0]
 8004654:	e7e5      	b.n	8004622 <_puts_r+0x76>
 8004656:	bf00      	nop
 8004658:	080054ec 	.word	0x080054ec
 800465c:	0800550c 	.word	0x0800550c
 8004660:	080054cc 	.word	0x080054cc

08004664 <puts>:
 8004664:	4b02      	ldr	r3, [pc, #8]	; (8004670 <puts+0xc>)
 8004666:	4601      	mov	r1, r0
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	f7ff bf9f 	b.w	80045ac <_puts_r>
 800466e:	bf00      	nop
 8004670:	20000010 	.word	0x20000010

08004674 <__swbuf_r>:
 8004674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004676:	460e      	mov	r6, r1
 8004678:	4614      	mov	r4, r2
 800467a:	4605      	mov	r5, r0
 800467c:	b118      	cbz	r0, 8004686 <__swbuf_r+0x12>
 800467e:	6983      	ldr	r3, [r0, #24]
 8004680:	b90b      	cbnz	r3, 8004686 <__swbuf_r+0x12>
 8004682:	f000 f9a7 	bl	80049d4 <__sinit>
 8004686:	4b21      	ldr	r3, [pc, #132]	; (800470c <__swbuf_r+0x98>)
 8004688:	429c      	cmp	r4, r3
 800468a:	d12a      	bne.n	80046e2 <__swbuf_r+0x6e>
 800468c:	686c      	ldr	r4, [r5, #4]
 800468e:	69a3      	ldr	r3, [r4, #24]
 8004690:	60a3      	str	r3, [r4, #8]
 8004692:	89a3      	ldrh	r3, [r4, #12]
 8004694:	071a      	lsls	r2, r3, #28
 8004696:	d52e      	bpl.n	80046f6 <__swbuf_r+0x82>
 8004698:	6923      	ldr	r3, [r4, #16]
 800469a:	b363      	cbz	r3, 80046f6 <__swbuf_r+0x82>
 800469c:	6923      	ldr	r3, [r4, #16]
 800469e:	6820      	ldr	r0, [r4, #0]
 80046a0:	1ac0      	subs	r0, r0, r3
 80046a2:	6963      	ldr	r3, [r4, #20]
 80046a4:	b2f6      	uxtb	r6, r6
 80046a6:	4283      	cmp	r3, r0
 80046a8:	4637      	mov	r7, r6
 80046aa:	dc04      	bgt.n	80046b6 <__swbuf_r+0x42>
 80046ac:	4621      	mov	r1, r4
 80046ae:	4628      	mov	r0, r5
 80046b0:	f000 f926 	bl	8004900 <_fflush_r>
 80046b4:	bb28      	cbnz	r0, 8004702 <__swbuf_r+0x8e>
 80046b6:	68a3      	ldr	r3, [r4, #8]
 80046b8:	3b01      	subs	r3, #1
 80046ba:	60a3      	str	r3, [r4, #8]
 80046bc:	6823      	ldr	r3, [r4, #0]
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	6022      	str	r2, [r4, #0]
 80046c2:	701e      	strb	r6, [r3, #0]
 80046c4:	6963      	ldr	r3, [r4, #20]
 80046c6:	3001      	adds	r0, #1
 80046c8:	4283      	cmp	r3, r0
 80046ca:	d004      	beq.n	80046d6 <__swbuf_r+0x62>
 80046cc:	89a3      	ldrh	r3, [r4, #12]
 80046ce:	07db      	lsls	r3, r3, #31
 80046d0:	d519      	bpl.n	8004706 <__swbuf_r+0x92>
 80046d2:	2e0a      	cmp	r6, #10
 80046d4:	d117      	bne.n	8004706 <__swbuf_r+0x92>
 80046d6:	4621      	mov	r1, r4
 80046d8:	4628      	mov	r0, r5
 80046da:	f000 f911 	bl	8004900 <_fflush_r>
 80046de:	b190      	cbz	r0, 8004706 <__swbuf_r+0x92>
 80046e0:	e00f      	b.n	8004702 <__swbuf_r+0x8e>
 80046e2:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <__swbuf_r+0x9c>)
 80046e4:	429c      	cmp	r4, r3
 80046e6:	d101      	bne.n	80046ec <__swbuf_r+0x78>
 80046e8:	68ac      	ldr	r4, [r5, #8]
 80046ea:	e7d0      	b.n	800468e <__swbuf_r+0x1a>
 80046ec:	4b09      	ldr	r3, [pc, #36]	; (8004714 <__swbuf_r+0xa0>)
 80046ee:	429c      	cmp	r4, r3
 80046f0:	bf08      	it	eq
 80046f2:	68ec      	ldreq	r4, [r5, #12]
 80046f4:	e7cb      	b.n	800468e <__swbuf_r+0x1a>
 80046f6:	4621      	mov	r1, r4
 80046f8:	4628      	mov	r0, r5
 80046fa:	f000 f80d 	bl	8004718 <__swsetup_r>
 80046fe:	2800      	cmp	r0, #0
 8004700:	d0cc      	beq.n	800469c <__swbuf_r+0x28>
 8004702:	f04f 37ff 	mov.w	r7, #4294967295
 8004706:	4638      	mov	r0, r7
 8004708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800470a:	bf00      	nop
 800470c:	080054ec 	.word	0x080054ec
 8004710:	0800550c 	.word	0x0800550c
 8004714:	080054cc 	.word	0x080054cc

08004718 <__swsetup_r>:
 8004718:	4b32      	ldr	r3, [pc, #200]	; (80047e4 <__swsetup_r+0xcc>)
 800471a:	b570      	push	{r4, r5, r6, lr}
 800471c:	681d      	ldr	r5, [r3, #0]
 800471e:	4606      	mov	r6, r0
 8004720:	460c      	mov	r4, r1
 8004722:	b125      	cbz	r5, 800472e <__swsetup_r+0x16>
 8004724:	69ab      	ldr	r3, [r5, #24]
 8004726:	b913      	cbnz	r3, 800472e <__swsetup_r+0x16>
 8004728:	4628      	mov	r0, r5
 800472a:	f000 f953 	bl	80049d4 <__sinit>
 800472e:	4b2e      	ldr	r3, [pc, #184]	; (80047e8 <__swsetup_r+0xd0>)
 8004730:	429c      	cmp	r4, r3
 8004732:	d10f      	bne.n	8004754 <__swsetup_r+0x3c>
 8004734:	686c      	ldr	r4, [r5, #4]
 8004736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800473a:	b29a      	uxth	r2, r3
 800473c:	0715      	lsls	r5, r2, #28
 800473e:	d42c      	bmi.n	800479a <__swsetup_r+0x82>
 8004740:	06d0      	lsls	r0, r2, #27
 8004742:	d411      	bmi.n	8004768 <__swsetup_r+0x50>
 8004744:	2209      	movs	r2, #9
 8004746:	6032      	str	r2, [r6, #0]
 8004748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800474c:	81a3      	strh	r3, [r4, #12]
 800474e:	f04f 30ff 	mov.w	r0, #4294967295
 8004752:	e03e      	b.n	80047d2 <__swsetup_r+0xba>
 8004754:	4b25      	ldr	r3, [pc, #148]	; (80047ec <__swsetup_r+0xd4>)
 8004756:	429c      	cmp	r4, r3
 8004758:	d101      	bne.n	800475e <__swsetup_r+0x46>
 800475a:	68ac      	ldr	r4, [r5, #8]
 800475c:	e7eb      	b.n	8004736 <__swsetup_r+0x1e>
 800475e:	4b24      	ldr	r3, [pc, #144]	; (80047f0 <__swsetup_r+0xd8>)
 8004760:	429c      	cmp	r4, r3
 8004762:	bf08      	it	eq
 8004764:	68ec      	ldreq	r4, [r5, #12]
 8004766:	e7e6      	b.n	8004736 <__swsetup_r+0x1e>
 8004768:	0751      	lsls	r1, r2, #29
 800476a:	d512      	bpl.n	8004792 <__swsetup_r+0x7a>
 800476c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800476e:	b141      	cbz	r1, 8004782 <__swsetup_r+0x6a>
 8004770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004774:	4299      	cmp	r1, r3
 8004776:	d002      	beq.n	800477e <__swsetup_r+0x66>
 8004778:	4630      	mov	r0, r6
 800477a:	f000 fa19 	bl	8004bb0 <_free_r>
 800477e:	2300      	movs	r3, #0
 8004780:	6363      	str	r3, [r4, #52]	; 0x34
 8004782:	89a3      	ldrh	r3, [r4, #12]
 8004784:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004788:	81a3      	strh	r3, [r4, #12]
 800478a:	2300      	movs	r3, #0
 800478c:	6063      	str	r3, [r4, #4]
 800478e:	6923      	ldr	r3, [r4, #16]
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	89a3      	ldrh	r3, [r4, #12]
 8004794:	f043 0308 	orr.w	r3, r3, #8
 8004798:	81a3      	strh	r3, [r4, #12]
 800479a:	6923      	ldr	r3, [r4, #16]
 800479c:	b94b      	cbnz	r3, 80047b2 <__swsetup_r+0x9a>
 800479e:	89a3      	ldrh	r3, [r4, #12]
 80047a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a8:	d003      	beq.n	80047b2 <__swsetup_r+0x9a>
 80047aa:	4621      	mov	r1, r4
 80047ac:	4630      	mov	r0, r6
 80047ae:	f000 f9bf 	bl	8004b30 <__smakebuf_r>
 80047b2:	89a2      	ldrh	r2, [r4, #12]
 80047b4:	f012 0301 	ands.w	r3, r2, #1
 80047b8:	d00c      	beq.n	80047d4 <__swsetup_r+0xbc>
 80047ba:	2300      	movs	r3, #0
 80047bc:	60a3      	str	r3, [r4, #8]
 80047be:	6963      	ldr	r3, [r4, #20]
 80047c0:	425b      	negs	r3, r3
 80047c2:	61a3      	str	r3, [r4, #24]
 80047c4:	6923      	ldr	r3, [r4, #16]
 80047c6:	b953      	cbnz	r3, 80047de <__swsetup_r+0xc6>
 80047c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80047d0:	d1ba      	bne.n	8004748 <__swsetup_r+0x30>
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
 80047d4:	0792      	lsls	r2, r2, #30
 80047d6:	bf58      	it	pl
 80047d8:	6963      	ldrpl	r3, [r4, #20]
 80047da:	60a3      	str	r3, [r4, #8]
 80047dc:	e7f2      	b.n	80047c4 <__swsetup_r+0xac>
 80047de:	2000      	movs	r0, #0
 80047e0:	e7f7      	b.n	80047d2 <__swsetup_r+0xba>
 80047e2:	bf00      	nop
 80047e4:	20000010 	.word	0x20000010
 80047e8:	080054ec 	.word	0x080054ec
 80047ec:	0800550c 	.word	0x0800550c
 80047f0:	080054cc 	.word	0x080054cc

080047f4 <__sflush_r>:
 80047f4:	898a      	ldrh	r2, [r1, #12]
 80047f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fa:	4605      	mov	r5, r0
 80047fc:	0710      	lsls	r0, r2, #28
 80047fe:	460c      	mov	r4, r1
 8004800:	d458      	bmi.n	80048b4 <__sflush_r+0xc0>
 8004802:	684b      	ldr	r3, [r1, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	dc05      	bgt.n	8004814 <__sflush_r+0x20>
 8004808:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	dc02      	bgt.n	8004814 <__sflush_r+0x20>
 800480e:	2000      	movs	r0, #0
 8004810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004816:	2e00      	cmp	r6, #0
 8004818:	d0f9      	beq.n	800480e <__sflush_r+0x1a>
 800481a:	2300      	movs	r3, #0
 800481c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004820:	682f      	ldr	r7, [r5, #0]
 8004822:	6a21      	ldr	r1, [r4, #32]
 8004824:	602b      	str	r3, [r5, #0]
 8004826:	d032      	beq.n	800488e <__sflush_r+0x9a>
 8004828:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	075a      	lsls	r2, r3, #29
 800482e:	d505      	bpl.n	800483c <__sflush_r+0x48>
 8004830:	6863      	ldr	r3, [r4, #4]
 8004832:	1ac0      	subs	r0, r0, r3
 8004834:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004836:	b10b      	cbz	r3, 800483c <__sflush_r+0x48>
 8004838:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800483a:	1ac0      	subs	r0, r0, r3
 800483c:	2300      	movs	r3, #0
 800483e:	4602      	mov	r2, r0
 8004840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004842:	6a21      	ldr	r1, [r4, #32]
 8004844:	4628      	mov	r0, r5
 8004846:	47b0      	blx	r6
 8004848:	1c43      	adds	r3, r0, #1
 800484a:	89a3      	ldrh	r3, [r4, #12]
 800484c:	d106      	bne.n	800485c <__sflush_r+0x68>
 800484e:	6829      	ldr	r1, [r5, #0]
 8004850:	291d      	cmp	r1, #29
 8004852:	d848      	bhi.n	80048e6 <__sflush_r+0xf2>
 8004854:	4a29      	ldr	r2, [pc, #164]	; (80048fc <__sflush_r+0x108>)
 8004856:	40ca      	lsrs	r2, r1
 8004858:	07d6      	lsls	r6, r2, #31
 800485a:	d544      	bpl.n	80048e6 <__sflush_r+0xf2>
 800485c:	2200      	movs	r2, #0
 800485e:	6062      	str	r2, [r4, #4]
 8004860:	04d9      	lsls	r1, r3, #19
 8004862:	6922      	ldr	r2, [r4, #16]
 8004864:	6022      	str	r2, [r4, #0]
 8004866:	d504      	bpl.n	8004872 <__sflush_r+0x7e>
 8004868:	1c42      	adds	r2, r0, #1
 800486a:	d101      	bne.n	8004870 <__sflush_r+0x7c>
 800486c:	682b      	ldr	r3, [r5, #0]
 800486e:	b903      	cbnz	r3, 8004872 <__sflush_r+0x7e>
 8004870:	6560      	str	r0, [r4, #84]	; 0x54
 8004872:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004874:	602f      	str	r7, [r5, #0]
 8004876:	2900      	cmp	r1, #0
 8004878:	d0c9      	beq.n	800480e <__sflush_r+0x1a>
 800487a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800487e:	4299      	cmp	r1, r3
 8004880:	d002      	beq.n	8004888 <__sflush_r+0x94>
 8004882:	4628      	mov	r0, r5
 8004884:	f000 f994 	bl	8004bb0 <_free_r>
 8004888:	2000      	movs	r0, #0
 800488a:	6360      	str	r0, [r4, #52]	; 0x34
 800488c:	e7c0      	b.n	8004810 <__sflush_r+0x1c>
 800488e:	2301      	movs	r3, #1
 8004890:	4628      	mov	r0, r5
 8004892:	47b0      	blx	r6
 8004894:	1c41      	adds	r1, r0, #1
 8004896:	d1c8      	bne.n	800482a <__sflush_r+0x36>
 8004898:	682b      	ldr	r3, [r5, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0c5      	beq.n	800482a <__sflush_r+0x36>
 800489e:	2b1d      	cmp	r3, #29
 80048a0:	d001      	beq.n	80048a6 <__sflush_r+0xb2>
 80048a2:	2b16      	cmp	r3, #22
 80048a4:	d101      	bne.n	80048aa <__sflush_r+0xb6>
 80048a6:	602f      	str	r7, [r5, #0]
 80048a8:	e7b1      	b.n	800480e <__sflush_r+0x1a>
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b0:	81a3      	strh	r3, [r4, #12]
 80048b2:	e7ad      	b.n	8004810 <__sflush_r+0x1c>
 80048b4:	690f      	ldr	r7, [r1, #16]
 80048b6:	2f00      	cmp	r7, #0
 80048b8:	d0a9      	beq.n	800480e <__sflush_r+0x1a>
 80048ba:	0793      	lsls	r3, r2, #30
 80048bc:	680e      	ldr	r6, [r1, #0]
 80048be:	bf08      	it	eq
 80048c0:	694b      	ldreq	r3, [r1, #20]
 80048c2:	600f      	str	r7, [r1, #0]
 80048c4:	bf18      	it	ne
 80048c6:	2300      	movne	r3, #0
 80048c8:	eba6 0807 	sub.w	r8, r6, r7
 80048cc:	608b      	str	r3, [r1, #8]
 80048ce:	f1b8 0f00 	cmp.w	r8, #0
 80048d2:	dd9c      	ble.n	800480e <__sflush_r+0x1a>
 80048d4:	4643      	mov	r3, r8
 80048d6:	463a      	mov	r2, r7
 80048d8:	6a21      	ldr	r1, [r4, #32]
 80048da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048dc:	4628      	mov	r0, r5
 80048de:	47b0      	blx	r6
 80048e0:	2800      	cmp	r0, #0
 80048e2:	dc06      	bgt.n	80048f2 <__sflush_r+0xfe>
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ea:	81a3      	strh	r3, [r4, #12]
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295
 80048f0:	e78e      	b.n	8004810 <__sflush_r+0x1c>
 80048f2:	4407      	add	r7, r0
 80048f4:	eba8 0800 	sub.w	r8, r8, r0
 80048f8:	e7e9      	b.n	80048ce <__sflush_r+0xda>
 80048fa:	bf00      	nop
 80048fc:	20400001 	.word	0x20400001

08004900 <_fflush_r>:
 8004900:	b538      	push	{r3, r4, r5, lr}
 8004902:	690b      	ldr	r3, [r1, #16]
 8004904:	4605      	mov	r5, r0
 8004906:	460c      	mov	r4, r1
 8004908:	b1db      	cbz	r3, 8004942 <_fflush_r+0x42>
 800490a:	b118      	cbz	r0, 8004914 <_fflush_r+0x14>
 800490c:	6983      	ldr	r3, [r0, #24]
 800490e:	b90b      	cbnz	r3, 8004914 <_fflush_r+0x14>
 8004910:	f000 f860 	bl	80049d4 <__sinit>
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <_fflush_r+0x48>)
 8004916:	429c      	cmp	r4, r3
 8004918:	d109      	bne.n	800492e <_fflush_r+0x2e>
 800491a:	686c      	ldr	r4, [r5, #4]
 800491c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004920:	b17b      	cbz	r3, 8004942 <_fflush_r+0x42>
 8004922:	4621      	mov	r1, r4
 8004924:	4628      	mov	r0, r5
 8004926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800492a:	f7ff bf63 	b.w	80047f4 <__sflush_r>
 800492e:	4b07      	ldr	r3, [pc, #28]	; (800494c <_fflush_r+0x4c>)
 8004930:	429c      	cmp	r4, r3
 8004932:	d101      	bne.n	8004938 <_fflush_r+0x38>
 8004934:	68ac      	ldr	r4, [r5, #8]
 8004936:	e7f1      	b.n	800491c <_fflush_r+0x1c>
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <_fflush_r+0x50>)
 800493a:	429c      	cmp	r4, r3
 800493c:	bf08      	it	eq
 800493e:	68ec      	ldreq	r4, [r5, #12]
 8004940:	e7ec      	b.n	800491c <_fflush_r+0x1c>
 8004942:	2000      	movs	r0, #0
 8004944:	bd38      	pop	{r3, r4, r5, pc}
 8004946:	bf00      	nop
 8004948:	080054ec 	.word	0x080054ec
 800494c:	0800550c 	.word	0x0800550c
 8004950:	080054cc 	.word	0x080054cc

08004954 <std>:
 8004954:	2300      	movs	r3, #0
 8004956:	b510      	push	{r4, lr}
 8004958:	4604      	mov	r4, r0
 800495a:	e9c0 3300 	strd	r3, r3, [r0]
 800495e:	6083      	str	r3, [r0, #8]
 8004960:	8181      	strh	r1, [r0, #12]
 8004962:	6643      	str	r3, [r0, #100]	; 0x64
 8004964:	81c2      	strh	r2, [r0, #14]
 8004966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800496a:	6183      	str	r3, [r0, #24]
 800496c:	4619      	mov	r1, r3
 800496e:	2208      	movs	r2, #8
 8004970:	305c      	adds	r0, #92	; 0x5c
 8004972:	f7ff fdfa 	bl	800456a <memset>
 8004976:	4b05      	ldr	r3, [pc, #20]	; (800498c <std+0x38>)
 8004978:	6263      	str	r3, [r4, #36]	; 0x24
 800497a:	4b05      	ldr	r3, [pc, #20]	; (8004990 <std+0x3c>)
 800497c:	62a3      	str	r3, [r4, #40]	; 0x28
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <std+0x40>)
 8004980:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004982:	4b05      	ldr	r3, [pc, #20]	; (8004998 <std+0x44>)
 8004984:	6224      	str	r4, [r4, #32]
 8004986:	6323      	str	r3, [r4, #48]	; 0x30
 8004988:	bd10      	pop	{r4, pc}
 800498a:	bf00      	nop
 800498c:	080052b1 	.word	0x080052b1
 8004990:	080052d3 	.word	0x080052d3
 8004994:	0800530b 	.word	0x0800530b
 8004998:	0800532f 	.word	0x0800532f

0800499c <_cleanup_r>:
 800499c:	4901      	ldr	r1, [pc, #4]	; (80049a4 <_cleanup_r+0x8>)
 800499e:	f000 b885 	b.w	8004aac <_fwalk_reent>
 80049a2:	bf00      	nop
 80049a4:	08004901 	.word	0x08004901

080049a8 <__sfmoreglue>:
 80049a8:	b570      	push	{r4, r5, r6, lr}
 80049aa:	1e4a      	subs	r2, r1, #1
 80049ac:	2568      	movs	r5, #104	; 0x68
 80049ae:	4355      	muls	r5, r2
 80049b0:	460e      	mov	r6, r1
 80049b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049b6:	f000 f949 	bl	8004c4c <_malloc_r>
 80049ba:	4604      	mov	r4, r0
 80049bc:	b140      	cbz	r0, 80049d0 <__sfmoreglue+0x28>
 80049be:	2100      	movs	r1, #0
 80049c0:	e9c0 1600 	strd	r1, r6, [r0]
 80049c4:	300c      	adds	r0, #12
 80049c6:	60a0      	str	r0, [r4, #8]
 80049c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049cc:	f7ff fdcd 	bl	800456a <memset>
 80049d0:	4620      	mov	r0, r4
 80049d2:	bd70      	pop	{r4, r5, r6, pc}

080049d4 <__sinit>:
 80049d4:	6983      	ldr	r3, [r0, #24]
 80049d6:	b510      	push	{r4, lr}
 80049d8:	4604      	mov	r4, r0
 80049da:	bb33      	cbnz	r3, 8004a2a <__sinit+0x56>
 80049dc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80049e0:	6503      	str	r3, [r0, #80]	; 0x50
 80049e2:	4b12      	ldr	r3, [pc, #72]	; (8004a2c <__sinit+0x58>)
 80049e4:	4a12      	ldr	r2, [pc, #72]	; (8004a30 <__sinit+0x5c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6282      	str	r2, [r0, #40]	; 0x28
 80049ea:	4298      	cmp	r0, r3
 80049ec:	bf04      	itt	eq
 80049ee:	2301      	moveq	r3, #1
 80049f0:	6183      	streq	r3, [r0, #24]
 80049f2:	f000 f81f 	bl	8004a34 <__sfp>
 80049f6:	6060      	str	r0, [r4, #4]
 80049f8:	4620      	mov	r0, r4
 80049fa:	f000 f81b 	bl	8004a34 <__sfp>
 80049fe:	60a0      	str	r0, [r4, #8]
 8004a00:	4620      	mov	r0, r4
 8004a02:	f000 f817 	bl	8004a34 <__sfp>
 8004a06:	2200      	movs	r2, #0
 8004a08:	60e0      	str	r0, [r4, #12]
 8004a0a:	2104      	movs	r1, #4
 8004a0c:	6860      	ldr	r0, [r4, #4]
 8004a0e:	f7ff ffa1 	bl	8004954 <std>
 8004a12:	2201      	movs	r2, #1
 8004a14:	2109      	movs	r1, #9
 8004a16:	68a0      	ldr	r0, [r4, #8]
 8004a18:	f7ff ff9c 	bl	8004954 <std>
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	2112      	movs	r1, #18
 8004a20:	68e0      	ldr	r0, [r4, #12]
 8004a22:	f7ff ff97 	bl	8004954 <std>
 8004a26:	2301      	movs	r3, #1
 8004a28:	61a3      	str	r3, [r4, #24]
 8004a2a:	bd10      	pop	{r4, pc}
 8004a2c:	080054c8 	.word	0x080054c8
 8004a30:	0800499d 	.word	0x0800499d

08004a34 <__sfp>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	4b1b      	ldr	r3, [pc, #108]	; (8004aa4 <__sfp+0x70>)
 8004a38:	681e      	ldr	r6, [r3, #0]
 8004a3a:	69b3      	ldr	r3, [r6, #24]
 8004a3c:	4607      	mov	r7, r0
 8004a3e:	b913      	cbnz	r3, 8004a46 <__sfp+0x12>
 8004a40:	4630      	mov	r0, r6
 8004a42:	f7ff ffc7 	bl	80049d4 <__sinit>
 8004a46:	3648      	adds	r6, #72	; 0x48
 8004a48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	d503      	bpl.n	8004a58 <__sfp+0x24>
 8004a50:	6833      	ldr	r3, [r6, #0]
 8004a52:	b133      	cbz	r3, 8004a62 <__sfp+0x2e>
 8004a54:	6836      	ldr	r6, [r6, #0]
 8004a56:	e7f7      	b.n	8004a48 <__sfp+0x14>
 8004a58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a5c:	b16d      	cbz	r5, 8004a7a <__sfp+0x46>
 8004a5e:	3468      	adds	r4, #104	; 0x68
 8004a60:	e7f4      	b.n	8004a4c <__sfp+0x18>
 8004a62:	2104      	movs	r1, #4
 8004a64:	4638      	mov	r0, r7
 8004a66:	f7ff ff9f 	bl	80049a8 <__sfmoreglue>
 8004a6a:	6030      	str	r0, [r6, #0]
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	d1f1      	bne.n	8004a54 <__sfp+0x20>
 8004a70:	230c      	movs	r3, #12
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	4604      	mov	r4, r0
 8004a76:	4620      	mov	r0, r4
 8004a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <__sfp+0x74>)
 8004a7c:	6665      	str	r5, [r4, #100]	; 0x64
 8004a7e:	e9c4 5500 	strd	r5, r5, [r4]
 8004a82:	60a5      	str	r5, [r4, #8]
 8004a84:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004a88:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004a8c:	2208      	movs	r2, #8
 8004a8e:	4629      	mov	r1, r5
 8004a90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a94:	f7ff fd69 	bl	800456a <memset>
 8004a98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004aa0:	e7e9      	b.n	8004a76 <__sfp+0x42>
 8004aa2:	bf00      	nop
 8004aa4:	080054c8 	.word	0x080054c8
 8004aa8:	ffff0001 	.word	0xffff0001

08004aac <_fwalk_reent>:
 8004aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ab0:	4680      	mov	r8, r0
 8004ab2:	4689      	mov	r9, r1
 8004ab4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ab8:	2600      	movs	r6, #0
 8004aba:	b914      	cbnz	r4, 8004ac2 <_fwalk_reent+0x16>
 8004abc:	4630      	mov	r0, r6
 8004abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ac2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004ac6:	3f01      	subs	r7, #1
 8004ac8:	d501      	bpl.n	8004ace <_fwalk_reent+0x22>
 8004aca:	6824      	ldr	r4, [r4, #0]
 8004acc:	e7f5      	b.n	8004aba <_fwalk_reent+0xe>
 8004ace:	89ab      	ldrh	r3, [r5, #12]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d907      	bls.n	8004ae4 <_fwalk_reent+0x38>
 8004ad4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	d003      	beq.n	8004ae4 <_fwalk_reent+0x38>
 8004adc:	4629      	mov	r1, r5
 8004ade:	4640      	mov	r0, r8
 8004ae0:	47c8      	blx	r9
 8004ae2:	4306      	orrs	r6, r0
 8004ae4:	3568      	adds	r5, #104	; 0x68
 8004ae6:	e7ee      	b.n	8004ac6 <_fwalk_reent+0x1a>

08004ae8 <__swhatbuf_r>:
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	460e      	mov	r6, r1
 8004aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af0:	2900      	cmp	r1, #0
 8004af2:	b096      	sub	sp, #88	; 0x58
 8004af4:	4614      	mov	r4, r2
 8004af6:	461d      	mov	r5, r3
 8004af8:	da07      	bge.n	8004b0a <__swhatbuf_r+0x22>
 8004afa:	2300      	movs	r3, #0
 8004afc:	602b      	str	r3, [r5, #0]
 8004afe:	89b3      	ldrh	r3, [r6, #12]
 8004b00:	061a      	lsls	r2, r3, #24
 8004b02:	d410      	bmi.n	8004b26 <__swhatbuf_r+0x3e>
 8004b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b08:	e00e      	b.n	8004b28 <__swhatbuf_r+0x40>
 8004b0a:	466a      	mov	r2, sp
 8004b0c:	f000 fc36 	bl	800537c <_fstat_r>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	dbf2      	blt.n	8004afa <__swhatbuf_r+0x12>
 8004b14:	9a01      	ldr	r2, [sp, #4]
 8004b16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b1e:	425a      	negs	r2, r3
 8004b20:	415a      	adcs	r2, r3
 8004b22:	602a      	str	r2, [r5, #0]
 8004b24:	e7ee      	b.n	8004b04 <__swhatbuf_r+0x1c>
 8004b26:	2340      	movs	r3, #64	; 0x40
 8004b28:	2000      	movs	r0, #0
 8004b2a:	6023      	str	r3, [r4, #0]
 8004b2c:	b016      	add	sp, #88	; 0x58
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}

08004b30 <__smakebuf_r>:
 8004b30:	898b      	ldrh	r3, [r1, #12]
 8004b32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b34:	079d      	lsls	r5, r3, #30
 8004b36:	4606      	mov	r6, r0
 8004b38:	460c      	mov	r4, r1
 8004b3a:	d507      	bpl.n	8004b4c <__smakebuf_r+0x1c>
 8004b3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	6123      	str	r3, [r4, #16]
 8004b44:	2301      	movs	r3, #1
 8004b46:	6163      	str	r3, [r4, #20]
 8004b48:	b002      	add	sp, #8
 8004b4a:	bd70      	pop	{r4, r5, r6, pc}
 8004b4c:	ab01      	add	r3, sp, #4
 8004b4e:	466a      	mov	r2, sp
 8004b50:	f7ff ffca 	bl	8004ae8 <__swhatbuf_r>
 8004b54:	9900      	ldr	r1, [sp, #0]
 8004b56:	4605      	mov	r5, r0
 8004b58:	4630      	mov	r0, r6
 8004b5a:	f000 f877 	bl	8004c4c <_malloc_r>
 8004b5e:	b948      	cbnz	r0, 8004b74 <__smakebuf_r+0x44>
 8004b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b64:	059a      	lsls	r2, r3, #22
 8004b66:	d4ef      	bmi.n	8004b48 <__smakebuf_r+0x18>
 8004b68:	f023 0303 	bic.w	r3, r3, #3
 8004b6c:	f043 0302 	orr.w	r3, r3, #2
 8004b70:	81a3      	strh	r3, [r4, #12]
 8004b72:	e7e3      	b.n	8004b3c <__smakebuf_r+0xc>
 8004b74:	4b0d      	ldr	r3, [pc, #52]	; (8004bac <__smakebuf_r+0x7c>)
 8004b76:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b78:	89a3      	ldrh	r3, [r4, #12]
 8004b7a:	6020      	str	r0, [r4, #0]
 8004b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b80:	81a3      	strh	r3, [r4, #12]
 8004b82:	9b00      	ldr	r3, [sp, #0]
 8004b84:	6163      	str	r3, [r4, #20]
 8004b86:	9b01      	ldr	r3, [sp, #4]
 8004b88:	6120      	str	r0, [r4, #16]
 8004b8a:	b15b      	cbz	r3, 8004ba4 <__smakebuf_r+0x74>
 8004b8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b90:	4630      	mov	r0, r6
 8004b92:	f000 fc05 	bl	80053a0 <_isatty_r>
 8004b96:	b128      	cbz	r0, 8004ba4 <__smakebuf_r+0x74>
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	f023 0303 	bic.w	r3, r3, #3
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	81a3      	strh	r3, [r4, #12]
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	431d      	orrs	r5, r3
 8004ba8:	81a5      	strh	r5, [r4, #12]
 8004baa:	e7cd      	b.n	8004b48 <__smakebuf_r+0x18>
 8004bac:	0800499d 	.word	0x0800499d

08004bb0 <_free_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4605      	mov	r5, r0
 8004bb4:	2900      	cmp	r1, #0
 8004bb6:	d045      	beq.n	8004c44 <_free_r+0x94>
 8004bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bbc:	1f0c      	subs	r4, r1, #4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	bfb8      	it	lt
 8004bc2:	18e4      	addlt	r4, r4, r3
 8004bc4:	f000 fc0e 	bl	80053e4 <__malloc_lock>
 8004bc8:	4a1f      	ldr	r2, [pc, #124]	; (8004c48 <_free_r+0x98>)
 8004bca:	6813      	ldr	r3, [r2, #0]
 8004bcc:	4610      	mov	r0, r2
 8004bce:	b933      	cbnz	r3, 8004bde <_free_r+0x2e>
 8004bd0:	6063      	str	r3, [r4, #4]
 8004bd2:	6014      	str	r4, [r2, #0]
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bda:	f000 bc04 	b.w	80053e6 <__malloc_unlock>
 8004bde:	42a3      	cmp	r3, r4
 8004be0:	d90c      	bls.n	8004bfc <_free_r+0x4c>
 8004be2:	6821      	ldr	r1, [r4, #0]
 8004be4:	1862      	adds	r2, r4, r1
 8004be6:	4293      	cmp	r3, r2
 8004be8:	bf04      	itt	eq
 8004bea:	681a      	ldreq	r2, [r3, #0]
 8004bec:	685b      	ldreq	r3, [r3, #4]
 8004bee:	6063      	str	r3, [r4, #4]
 8004bf0:	bf04      	itt	eq
 8004bf2:	1852      	addeq	r2, r2, r1
 8004bf4:	6022      	streq	r2, [r4, #0]
 8004bf6:	6004      	str	r4, [r0, #0]
 8004bf8:	e7ec      	b.n	8004bd4 <_free_r+0x24>
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	b10a      	cbz	r2, 8004c04 <_free_r+0x54>
 8004c00:	42a2      	cmp	r2, r4
 8004c02:	d9fa      	bls.n	8004bfa <_free_r+0x4a>
 8004c04:	6819      	ldr	r1, [r3, #0]
 8004c06:	1858      	adds	r0, r3, r1
 8004c08:	42a0      	cmp	r0, r4
 8004c0a:	d10b      	bne.n	8004c24 <_free_r+0x74>
 8004c0c:	6820      	ldr	r0, [r4, #0]
 8004c0e:	4401      	add	r1, r0
 8004c10:	1858      	adds	r0, r3, r1
 8004c12:	4282      	cmp	r2, r0
 8004c14:	6019      	str	r1, [r3, #0]
 8004c16:	d1dd      	bne.n	8004bd4 <_free_r+0x24>
 8004c18:	6810      	ldr	r0, [r2, #0]
 8004c1a:	6852      	ldr	r2, [r2, #4]
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	4401      	add	r1, r0
 8004c20:	6019      	str	r1, [r3, #0]
 8004c22:	e7d7      	b.n	8004bd4 <_free_r+0x24>
 8004c24:	d902      	bls.n	8004c2c <_free_r+0x7c>
 8004c26:	230c      	movs	r3, #12
 8004c28:	602b      	str	r3, [r5, #0]
 8004c2a:	e7d3      	b.n	8004bd4 <_free_r+0x24>
 8004c2c:	6820      	ldr	r0, [r4, #0]
 8004c2e:	1821      	adds	r1, r4, r0
 8004c30:	428a      	cmp	r2, r1
 8004c32:	bf04      	itt	eq
 8004c34:	6811      	ldreq	r1, [r2, #0]
 8004c36:	6852      	ldreq	r2, [r2, #4]
 8004c38:	6062      	str	r2, [r4, #4]
 8004c3a:	bf04      	itt	eq
 8004c3c:	1809      	addeq	r1, r1, r0
 8004c3e:	6021      	streq	r1, [r4, #0]
 8004c40:	605c      	str	r4, [r3, #4]
 8004c42:	e7c7      	b.n	8004bd4 <_free_r+0x24>
 8004c44:	bd38      	pop	{r3, r4, r5, pc}
 8004c46:	bf00      	nop
 8004c48:	20000480 	.word	0x20000480

08004c4c <_malloc_r>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	1ccd      	adds	r5, r1, #3
 8004c50:	f025 0503 	bic.w	r5, r5, #3
 8004c54:	3508      	adds	r5, #8
 8004c56:	2d0c      	cmp	r5, #12
 8004c58:	bf38      	it	cc
 8004c5a:	250c      	movcc	r5, #12
 8004c5c:	2d00      	cmp	r5, #0
 8004c5e:	4606      	mov	r6, r0
 8004c60:	db01      	blt.n	8004c66 <_malloc_r+0x1a>
 8004c62:	42a9      	cmp	r1, r5
 8004c64:	d903      	bls.n	8004c6e <_malloc_r+0x22>
 8004c66:	230c      	movs	r3, #12
 8004c68:	6033      	str	r3, [r6, #0]
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	bd70      	pop	{r4, r5, r6, pc}
 8004c6e:	f000 fbb9 	bl	80053e4 <__malloc_lock>
 8004c72:	4a21      	ldr	r2, [pc, #132]	; (8004cf8 <_malloc_r+0xac>)
 8004c74:	6814      	ldr	r4, [r2, #0]
 8004c76:	4621      	mov	r1, r4
 8004c78:	b991      	cbnz	r1, 8004ca0 <_malloc_r+0x54>
 8004c7a:	4c20      	ldr	r4, [pc, #128]	; (8004cfc <_malloc_r+0xb0>)
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	b91b      	cbnz	r3, 8004c88 <_malloc_r+0x3c>
 8004c80:	4630      	mov	r0, r6
 8004c82:	f000 fb05 	bl	8005290 <_sbrk_r>
 8004c86:	6020      	str	r0, [r4, #0]
 8004c88:	4629      	mov	r1, r5
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f000 fb00 	bl	8005290 <_sbrk_r>
 8004c90:	1c43      	adds	r3, r0, #1
 8004c92:	d124      	bne.n	8004cde <_malloc_r+0x92>
 8004c94:	230c      	movs	r3, #12
 8004c96:	6033      	str	r3, [r6, #0]
 8004c98:	4630      	mov	r0, r6
 8004c9a:	f000 fba4 	bl	80053e6 <__malloc_unlock>
 8004c9e:	e7e4      	b.n	8004c6a <_malloc_r+0x1e>
 8004ca0:	680b      	ldr	r3, [r1, #0]
 8004ca2:	1b5b      	subs	r3, r3, r5
 8004ca4:	d418      	bmi.n	8004cd8 <_malloc_r+0x8c>
 8004ca6:	2b0b      	cmp	r3, #11
 8004ca8:	d90f      	bls.n	8004cca <_malloc_r+0x7e>
 8004caa:	600b      	str	r3, [r1, #0]
 8004cac:	50cd      	str	r5, [r1, r3]
 8004cae:	18cc      	adds	r4, r1, r3
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	f000 fb98 	bl	80053e6 <__malloc_unlock>
 8004cb6:	f104 000b 	add.w	r0, r4, #11
 8004cba:	1d23      	adds	r3, r4, #4
 8004cbc:	f020 0007 	bic.w	r0, r0, #7
 8004cc0:	1ac3      	subs	r3, r0, r3
 8004cc2:	d0d3      	beq.n	8004c6c <_malloc_r+0x20>
 8004cc4:	425a      	negs	r2, r3
 8004cc6:	50e2      	str	r2, [r4, r3]
 8004cc8:	e7d0      	b.n	8004c6c <_malloc_r+0x20>
 8004cca:	428c      	cmp	r4, r1
 8004ccc:	684b      	ldr	r3, [r1, #4]
 8004cce:	bf16      	itet	ne
 8004cd0:	6063      	strne	r3, [r4, #4]
 8004cd2:	6013      	streq	r3, [r2, #0]
 8004cd4:	460c      	movne	r4, r1
 8004cd6:	e7eb      	b.n	8004cb0 <_malloc_r+0x64>
 8004cd8:	460c      	mov	r4, r1
 8004cda:	6849      	ldr	r1, [r1, #4]
 8004cdc:	e7cc      	b.n	8004c78 <_malloc_r+0x2c>
 8004cde:	1cc4      	adds	r4, r0, #3
 8004ce0:	f024 0403 	bic.w	r4, r4, #3
 8004ce4:	42a0      	cmp	r0, r4
 8004ce6:	d005      	beq.n	8004cf4 <_malloc_r+0xa8>
 8004ce8:	1a21      	subs	r1, r4, r0
 8004cea:	4630      	mov	r0, r6
 8004cec:	f000 fad0 	bl	8005290 <_sbrk_r>
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d0cf      	beq.n	8004c94 <_malloc_r+0x48>
 8004cf4:	6025      	str	r5, [r4, #0]
 8004cf6:	e7db      	b.n	8004cb0 <_malloc_r+0x64>
 8004cf8:	20000480 	.word	0x20000480
 8004cfc:	20000484 	.word	0x20000484

08004d00 <__sfputc_r>:
 8004d00:	6893      	ldr	r3, [r2, #8]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	b410      	push	{r4}
 8004d08:	6093      	str	r3, [r2, #8]
 8004d0a:	da08      	bge.n	8004d1e <__sfputc_r+0x1e>
 8004d0c:	6994      	ldr	r4, [r2, #24]
 8004d0e:	42a3      	cmp	r3, r4
 8004d10:	db01      	blt.n	8004d16 <__sfputc_r+0x16>
 8004d12:	290a      	cmp	r1, #10
 8004d14:	d103      	bne.n	8004d1e <__sfputc_r+0x1e>
 8004d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d1a:	f7ff bcab 	b.w	8004674 <__swbuf_r>
 8004d1e:	6813      	ldr	r3, [r2, #0]
 8004d20:	1c58      	adds	r0, r3, #1
 8004d22:	6010      	str	r0, [r2, #0]
 8004d24:	7019      	strb	r1, [r3, #0]
 8004d26:	4608      	mov	r0, r1
 8004d28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <__sfputs_r>:
 8004d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d30:	4606      	mov	r6, r0
 8004d32:	460f      	mov	r7, r1
 8004d34:	4614      	mov	r4, r2
 8004d36:	18d5      	adds	r5, r2, r3
 8004d38:	42ac      	cmp	r4, r5
 8004d3a:	d101      	bne.n	8004d40 <__sfputs_r+0x12>
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	e007      	b.n	8004d50 <__sfputs_r+0x22>
 8004d40:	463a      	mov	r2, r7
 8004d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d46:	4630      	mov	r0, r6
 8004d48:	f7ff ffda 	bl	8004d00 <__sfputc_r>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	d1f3      	bne.n	8004d38 <__sfputs_r+0xa>
 8004d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d54 <_vfiprintf_r>:
 8004d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d58:	460c      	mov	r4, r1
 8004d5a:	b09d      	sub	sp, #116	; 0x74
 8004d5c:	4617      	mov	r7, r2
 8004d5e:	461d      	mov	r5, r3
 8004d60:	4606      	mov	r6, r0
 8004d62:	b118      	cbz	r0, 8004d6c <_vfiprintf_r+0x18>
 8004d64:	6983      	ldr	r3, [r0, #24]
 8004d66:	b90b      	cbnz	r3, 8004d6c <_vfiprintf_r+0x18>
 8004d68:	f7ff fe34 	bl	80049d4 <__sinit>
 8004d6c:	4b7c      	ldr	r3, [pc, #496]	; (8004f60 <_vfiprintf_r+0x20c>)
 8004d6e:	429c      	cmp	r4, r3
 8004d70:	d158      	bne.n	8004e24 <_vfiprintf_r+0xd0>
 8004d72:	6874      	ldr	r4, [r6, #4]
 8004d74:	89a3      	ldrh	r3, [r4, #12]
 8004d76:	0718      	lsls	r0, r3, #28
 8004d78:	d55e      	bpl.n	8004e38 <_vfiprintf_r+0xe4>
 8004d7a:	6923      	ldr	r3, [r4, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d05b      	beq.n	8004e38 <_vfiprintf_r+0xe4>
 8004d80:	2300      	movs	r3, #0
 8004d82:	9309      	str	r3, [sp, #36]	; 0x24
 8004d84:	2320      	movs	r3, #32
 8004d86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d8a:	2330      	movs	r3, #48	; 0x30
 8004d8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d90:	9503      	str	r5, [sp, #12]
 8004d92:	f04f 0b01 	mov.w	fp, #1
 8004d96:	46b8      	mov	r8, r7
 8004d98:	4645      	mov	r5, r8
 8004d9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d9e:	b10b      	cbz	r3, 8004da4 <_vfiprintf_r+0x50>
 8004da0:	2b25      	cmp	r3, #37	; 0x25
 8004da2:	d154      	bne.n	8004e4e <_vfiprintf_r+0xfa>
 8004da4:	ebb8 0a07 	subs.w	sl, r8, r7
 8004da8:	d00b      	beq.n	8004dc2 <_vfiprintf_r+0x6e>
 8004daa:	4653      	mov	r3, sl
 8004dac:	463a      	mov	r2, r7
 8004dae:	4621      	mov	r1, r4
 8004db0:	4630      	mov	r0, r6
 8004db2:	f7ff ffbc 	bl	8004d2e <__sfputs_r>
 8004db6:	3001      	adds	r0, #1
 8004db8:	f000 80c2 	beq.w	8004f40 <_vfiprintf_r+0x1ec>
 8004dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dbe:	4453      	add	r3, sl
 8004dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc2:	f898 3000 	ldrb.w	r3, [r8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 80ba 	beq.w	8004f40 <_vfiprintf_r+0x1ec>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dd6:	9304      	str	r3, [sp, #16]
 8004dd8:	9307      	str	r3, [sp, #28]
 8004dda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dde:	931a      	str	r3, [sp, #104]	; 0x68
 8004de0:	46a8      	mov	r8, r5
 8004de2:	2205      	movs	r2, #5
 8004de4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004de8:	485e      	ldr	r0, [pc, #376]	; (8004f64 <_vfiprintf_r+0x210>)
 8004dea:	f7fb fa01 	bl	80001f0 <memchr>
 8004dee:	9b04      	ldr	r3, [sp, #16]
 8004df0:	bb78      	cbnz	r0, 8004e52 <_vfiprintf_r+0xfe>
 8004df2:	06d9      	lsls	r1, r3, #27
 8004df4:	bf44      	itt	mi
 8004df6:	2220      	movmi	r2, #32
 8004df8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004dfc:	071a      	lsls	r2, r3, #28
 8004dfe:	bf44      	itt	mi
 8004e00:	222b      	movmi	r2, #43	; 0x2b
 8004e02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e06:	782a      	ldrb	r2, [r5, #0]
 8004e08:	2a2a      	cmp	r2, #42	; 0x2a
 8004e0a:	d02a      	beq.n	8004e62 <_vfiprintf_r+0x10e>
 8004e0c:	9a07      	ldr	r2, [sp, #28]
 8004e0e:	46a8      	mov	r8, r5
 8004e10:	2000      	movs	r0, #0
 8004e12:	250a      	movs	r5, #10
 8004e14:	4641      	mov	r1, r8
 8004e16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e1a:	3b30      	subs	r3, #48	; 0x30
 8004e1c:	2b09      	cmp	r3, #9
 8004e1e:	d969      	bls.n	8004ef4 <_vfiprintf_r+0x1a0>
 8004e20:	b360      	cbz	r0, 8004e7c <_vfiprintf_r+0x128>
 8004e22:	e024      	b.n	8004e6e <_vfiprintf_r+0x11a>
 8004e24:	4b50      	ldr	r3, [pc, #320]	; (8004f68 <_vfiprintf_r+0x214>)
 8004e26:	429c      	cmp	r4, r3
 8004e28:	d101      	bne.n	8004e2e <_vfiprintf_r+0xda>
 8004e2a:	68b4      	ldr	r4, [r6, #8]
 8004e2c:	e7a2      	b.n	8004d74 <_vfiprintf_r+0x20>
 8004e2e:	4b4f      	ldr	r3, [pc, #316]	; (8004f6c <_vfiprintf_r+0x218>)
 8004e30:	429c      	cmp	r4, r3
 8004e32:	bf08      	it	eq
 8004e34:	68f4      	ldreq	r4, [r6, #12]
 8004e36:	e79d      	b.n	8004d74 <_vfiprintf_r+0x20>
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	f7ff fc6c 	bl	8004718 <__swsetup_r>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d09d      	beq.n	8004d80 <_vfiprintf_r+0x2c>
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295
 8004e48:	b01d      	add	sp, #116	; 0x74
 8004e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4e:	46a8      	mov	r8, r5
 8004e50:	e7a2      	b.n	8004d98 <_vfiprintf_r+0x44>
 8004e52:	4a44      	ldr	r2, [pc, #272]	; (8004f64 <_vfiprintf_r+0x210>)
 8004e54:	1a80      	subs	r0, r0, r2
 8004e56:	fa0b f000 	lsl.w	r0, fp, r0
 8004e5a:	4318      	orrs	r0, r3
 8004e5c:	9004      	str	r0, [sp, #16]
 8004e5e:	4645      	mov	r5, r8
 8004e60:	e7be      	b.n	8004de0 <_vfiprintf_r+0x8c>
 8004e62:	9a03      	ldr	r2, [sp, #12]
 8004e64:	1d11      	adds	r1, r2, #4
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	9103      	str	r1, [sp, #12]
 8004e6a:	2a00      	cmp	r2, #0
 8004e6c:	db01      	blt.n	8004e72 <_vfiprintf_r+0x11e>
 8004e6e:	9207      	str	r2, [sp, #28]
 8004e70:	e004      	b.n	8004e7c <_vfiprintf_r+0x128>
 8004e72:	4252      	negs	r2, r2
 8004e74:	f043 0302 	orr.w	r3, r3, #2
 8004e78:	9207      	str	r2, [sp, #28]
 8004e7a:	9304      	str	r3, [sp, #16]
 8004e7c:	f898 3000 	ldrb.w	r3, [r8]
 8004e80:	2b2e      	cmp	r3, #46	; 0x2e
 8004e82:	d10e      	bne.n	8004ea2 <_vfiprintf_r+0x14e>
 8004e84:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004e88:	2b2a      	cmp	r3, #42	; 0x2a
 8004e8a:	d138      	bne.n	8004efe <_vfiprintf_r+0x1aa>
 8004e8c:	9b03      	ldr	r3, [sp, #12]
 8004e8e:	1d1a      	adds	r2, r3, #4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	9203      	str	r2, [sp, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bfb8      	it	lt
 8004e98:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e9c:	f108 0802 	add.w	r8, r8, #2
 8004ea0:	9305      	str	r3, [sp, #20]
 8004ea2:	4d33      	ldr	r5, [pc, #204]	; (8004f70 <_vfiprintf_r+0x21c>)
 8004ea4:	f898 1000 	ldrb.w	r1, [r8]
 8004ea8:	2203      	movs	r2, #3
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f7fb f9a0 	bl	80001f0 <memchr>
 8004eb0:	b140      	cbz	r0, 8004ec4 <_vfiprintf_r+0x170>
 8004eb2:	2340      	movs	r3, #64	; 0x40
 8004eb4:	1b40      	subs	r0, r0, r5
 8004eb6:	fa03 f000 	lsl.w	r0, r3, r0
 8004eba:	9b04      	ldr	r3, [sp, #16]
 8004ebc:	4303      	orrs	r3, r0
 8004ebe:	f108 0801 	add.w	r8, r8, #1
 8004ec2:	9304      	str	r3, [sp, #16]
 8004ec4:	f898 1000 	ldrb.w	r1, [r8]
 8004ec8:	482a      	ldr	r0, [pc, #168]	; (8004f74 <_vfiprintf_r+0x220>)
 8004eca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ece:	2206      	movs	r2, #6
 8004ed0:	f108 0701 	add.w	r7, r8, #1
 8004ed4:	f7fb f98c 	bl	80001f0 <memchr>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d037      	beq.n	8004f4c <_vfiprintf_r+0x1f8>
 8004edc:	4b26      	ldr	r3, [pc, #152]	; (8004f78 <_vfiprintf_r+0x224>)
 8004ede:	bb1b      	cbnz	r3, 8004f28 <_vfiprintf_r+0x1d4>
 8004ee0:	9b03      	ldr	r3, [sp, #12]
 8004ee2:	3307      	adds	r3, #7
 8004ee4:	f023 0307 	bic.w	r3, r3, #7
 8004ee8:	3308      	adds	r3, #8
 8004eea:	9303      	str	r3, [sp, #12]
 8004eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eee:	444b      	add	r3, r9
 8004ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef2:	e750      	b.n	8004d96 <_vfiprintf_r+0x42>
 8004ef4:	fb05 3202 	mla	r2, r5, r2, r3
 8004ef8:	2001      	movs	r0, #1
 8004efa:	4688      	mov	r8, r1
 8004efc:	e78a      	b.n	8004e14 <_vfiprintf_r+0xc0>
 8004efe:	2300      	movs	r3, #0
 8004f00:	f108 0801 	add.w	r8, r8, #1
 8004f04:	9305      	str	r3, [sp, #20]
 8004f06:	4619      	mov	r1, r3
 8004f08:	250a      	movs	r5, #10
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f10:	3a30      	subs	r2, #48	; 0x30
 8004f12:	2a09      	cmp	r2, #9
 8004f14:	d903      	bls.n	8004f1e <_vfiprintf_r+0x1ca>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0c3      	beq.n	8004ea2 <_vfiprintf_r+0x14e>
 8004f1a:	9105      	str	r1, [sp, #20]
 8004f1c:	e7c1      	b.n	8004ea2 <_vfiprintf_r+0x14e>
 8004f1e:	fb05 2101 	mla	r1, r5, r1, r2
 8004f22:	2301      	movs	r3, #1
 8004f24:	4680      	mov	r8, r0
 8004f26:	e7f0      	b.n	8004f0a <_vfiprintf_r+0x1b6>
 8004f28:	ab03      	add	r3, sp, #12
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	4622      	mov	r2, r4
 8004f2e:	4b13      	ldr	r3, [pc, #76]	; (8004f7c <_vfiprintf_r+0x228>)
 8004f30:	a904      	add	r1, sp, #16
 8004f32:	4630      	mov	r0, r6
 8004f34:	f3af 8000 	nop.w
 8004f38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004f3c:	4681      	mov	r9, r0
 8004f3e:	d1d5      	bne.n	8004eec <_vfiprintf_r+0x198>
 8004f40:	89a3      	ldrh	r3, [r4, #12]
 8004f42:	065b      	lsls	r3, r3, #25
 8004f44:	f53f af7e 	bmi.w	8004e44 <_vfiprintf_r+0xf0>
 8004f48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f4a:	e77d      	b.n	8004e48 <_vfiprintf_r+0xf4>
 8004f4c:	ab03      	add	r3, sp, #12
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	4622      	mov	r2, r4
 8004f52:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <_vfiprintf_r+0x228>)
 8004f54:	a904      	add	r1, sp, #16
 8004f56:	4630      	mov	r0, r6
 8004f58:	f000 f888 	bl	800506c <_printf_i>
 8004f5c:	e7ec      	b.n	8004f38 <_vfiprintf_r+0x1e4>
 8004f5e:	bf00      	nop
 8004f60:	080054ec 	.word	0x080054ec
 8004f64:	0800552c 	.word	0x0800552c
 8004f68:	0800550c 	.word	0x0800550c
 8004f6c:	080054cc 	.word	0x080054cc
 8004f70:	08005532 	.word	0x08005532
 8004f74:	08005536 	.word	0x08005536
 8004f78:	00000000 	.word	0x00000000
 8004f7c:	08004d2f 	.word	0x08004d2f

08004f80 <_printf_common>:
 8004f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f84:	4691      	mov	r9, r2
 8004f86:	461f      	mov	r7, r3
 8004f88:	688a      	ldr	r2, [r1, #8]
 8004f8a:	690b      	ldr	r3, [r1, #16]
 8004f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f90:	4293      	cmp	r3, r2
 8004f92:	bfb8      	it	lt
 8004f94:	4613      	movlt	r3, r2
 8004f96:	f8c9 3000 	str.w	r3, [r9]
 8004f9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	460c      	mov	r4, r1
 8004fa2:	b112      	cbz	r2, 8004faa <_printf_common+0x2a>
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	f8c9 3000 	str.w	r3, [r9]
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	0699      	lsls	r1, r3, #26
 8004fae:	bf42      	ittt	mi
 8004fb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004fb4:	3302      	addmi	r3, #2
 8004fb6:	f8c9 3000 	strmi.w	r3, [r9]
 8004fba:	6825      	ldr	r5, [r4, #0]
 8004fbc:	f015 0506 	ands.w	r5, r5, #6
 8004fc0:	d107      	bne.n	8004fd2 <_printf_common+0x52>
 8004fc2:	f104 0a19 	add.w	sl, r4, #25
 8004fc6:	68e3      	ldr	r3, [r4, #12]
 8004fc8:	f8d9 2000 	ldr.w	r2, [r9]
 8004fcc:	1a9b      	subs	r3, r3, r2
 8004fce:	42ab      	cmp	r3, r5
 8004fd0:	dc28      	bgt.n	8005024 <_printf_common+0xa4>
 8004fd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004fd6:	6822      	ldr	r2, [r4, #0]
 8004fd8:	3300      	adds	r3, #0
 8004fda:	bf18      	it	ne
 8004fdc:	2301      	movne	r3, #1
 8004fde:	0692      	lsls	r2, r2, #26
 8004fe0:	d42d      	bmi.n	800503e <_printf_common+0xbe>
 8004fe2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fe6:	4639      	mov	r1, r7
 8004fe8:	4630      	mov	r0, r6
 8004fea:	47c0      	blx	r8
 8004fec:	3001      	adds	r0, #1
 8004fee:	d020      	beq.n	8005032 <_printf_common+0xb2>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	68e5      	ldr	r5, [r4, #12]
 8004ff4:	f8d9 2000 	ldr.w	r2, [r9]
 8004ff8:	f003 0306 	and.w	r3, r3, #6
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	bf08      	it	eq
 8005000:	1aad      	subeq	r5, r5, r2
 8005002:	68a3      	ldr	r3, [r4, #8]
 8005004:	6922      	ldr	r2, [r4, #16]
 8005006:	bf0c      	ite	eq
 8005008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800500c:	2500      	movne	r5, #0
 800500e:	4293      	cmp	r3, r2
 8005010:	bfc4      	itt	gt
 8005012:	1a9b      	subgt	r3, r3, r2
 8005014:	18ed      	addgt	r5, r5, r3
 8005016:	f04f 0900 	mov.w	r9, #0
 800501a:	341a      	adds	r4, #26
 800501c:	454d      	cmp	r5, r9
 800501e:	d11a      	bne.n	8005056 <_printf_common+0xd6>
 8005020:	2000      	movs	r0, #0
 8005022:	e008      	b.n	8005036 <_printf_common+0xb6>
 8005024:	2301      	movs	r3, #1
 8005026:	4652      	mov	r2, sl
 8005028:	4639      	mov	r1, r7
 800502a:	4630      	mov	r0, r6
 800502c:	47c0      	blx	r8
 800502e:	3001      	adds	r0, #1
 8005030:	d103      	bne.n	800503a <_printf_common+0xba>
 8005032:	f04f 30ff 	mov.w	r0, #4294967295
 8005036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503a:	3501      	adds	r5, #1
 800503c:	e7c3      	b.n	8004fc6 <_printf_common+0x46>
 800503e:	18e1      	adds	r1, r4, r3
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	2030      	movs	r0, #48	; 0x30
 8005044:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005048:	4422      	add	r2, r4
 800504a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800504e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005052:	3302      	adds	r3, #2
 8005054:	e7c5      	b.n	8004fe2 <_printf_common+0x62>
 8005056:	2301      	movs	r3, #1
 8005058:	4622      	mov	r2, r4
 800505a:	4639      	mov	r1, r7
 800505c:	4630      	mov	r0, r6
 800505e:	47c0      	blx	r8
 8005060:	3001      	adds	r0, #1
 8005062:	d0e6      	beq.n	8005032 <_printf_common+0xb2>
 8005064:	f109 0901 	add.w	r9, r9, #1
 8005068:	e7d8      	b.n	800501c <_printf_common+0x9c>
	...

0800506c <_printf_i>:
 800506c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005070:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005074:	460c      	mov	r4, r1
 8005076:	7e09      	ldrb	r1, [r1, #24]
 8005078:	b085      	sub	sp, #20
 800507a:	296e      	cmp	r1, #110	; 0x6e
 800507c:	4617      	mov	r7, r2
 800507e:	4606      	mov	r6, r0
 8005080:	4698      	mov	r8, r3
 8005082:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005084:	f000 80b3 	beq.w	80051ee <_printf_i+0x182>
 8005088:	d822      	bhi.n	80050d0 <_printf_i+0x64>
 800508a:	2963      	cmp	r1, #99	; 0x63
 800508c:	d036      	beq.n	80050fc <_printf_i+0x90>
 800508e:	d80a      	bhi.n	80050a6 <_printf_i+0x3a>
 8005090:	2900      	cmp	r1, #0
 8005092:	f000 80b9 	beq.w	8005208 <_printf_i+0x19c>
 8005096:	2958      	cmp	r1, #88	; 0x58
 8005098:	f000 8083 	beq.w	80051a2 <_printf_i+0x136>
 800509c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80050a4:	e032      	b.n	800510c <_printf_i+0xa0>
 80050a6:	2964      	cmp	r1, #100	; 0x64
 80050a8:	d001      	beq.n	80050ae <_printf_i+0x42>
 80050aa:	2969      	cmp	r1, #105	; 0x69
 80050ac:	d1f6      	bne.n	800509c <_printf_i+0x30>
 80050ae:	6820      	ldr	r0, [r4, #0]
 80050b0:	6813      	ldr	r3, [r2, #0]
 80050b2:	0605      	lsls	r5, r0, #24
 80050b4:	f103 0104 	add.w	r1, r3, #4
 80050b8:	d52a      	bpl.n	8005110 <_printf_i+0xa4>
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6011      	str	r1, [r2, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	da03      	bge.n	80050ca <_printf_i+0x5e>
 80050c2:	222d      	movs	r2, #45	; 0x2d
 80050c4:	425b      	negs	r3, r3
 80050c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80050ca:	486f      	ldr	r0, [pc, #444]	; (8005288 <_printf_i+0x21c>)
 80050cc:	220a      	movs	r2, #10
 80050ce:	e039      	b.n	8005144 <_printf_i+0xd8>
 80050d0:	2973      	cmp	r1, #115	; 0x73
 80050d2:	f000 809d 	beq.w	8005210 <_printf_i+0x1a4>
 80050d6:	d808      	bhi.n	80050ea <_printf_i+0x7e>
 80050d8:	296f      	cmp	r1, #111	; 0x6f
 80050da:	d020      	beq.n	800511e <_printf_i+0xb2>
 80050dc:	2970      	cmp	r1, #112	; 0x70
 80050de:	d1dd      	bne.n	800509c <_printf_i+0x30>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	f043 0320 	orr.w	r3, r3, #32
 80050e6:	6023      	str	r3, [r4, #0]
 80050e8:	e003      	b.n	80050f2 <_printf_i+0x86>
 80050ea:	2975      	cmp	r1, #117	; 0x75
 80050ec:	d017      	beq.n	800511e <_printf_i+0xb2>
 80050ee:	2978      	cmp	r1, #120	; 0x78
 80050f0:	d1d4      	bne.n	800509c <_printf_i+0x30>
 80050f2:	2378      	movs	r3, #120	; 0x78
 80050f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050f8:	4864      	ldr	r0, [pc, #400]	; (800528c <_printf_i+0x220>)
 80050fa:	e055      	b.n	80051a8 <_printf_i+0x13c>
 80050fc:	6813      	ldr	r3, [r2, #0]
 80050fe:	1d19      	adds	r1, r3, #4
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6011      	str	r1, [r2, #0]
 8005104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800510c:	2301      	movs	r3, #1
 800510e:	e08c      	b.n	800522a <_printf_i+0x1be>
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6011      	str	r1, [r2, #0]
 8005114:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005118:	bf18      	it	ne
 800511a:	b21b      	sxthne	r3, r3
 800511c:	e7cf      	b.n	80050be <_printf_i+0x52>
 800511e:	6813      	ldr	r3, [r2, #0]
 8005120:	6825      	ldr	r5, [r4, #0]
 8005122:	1d18      	adds	r0, r3, #4
 8005124:	6010      	str	r0, [r2, #0]
 8005126:	0628      	lsls	r0, r5, #24
 8005128:	d501      	bpl.n	800512e <_printf_i+0xc2>
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	e002      	b.n	8005134 <_printf_i+0xc8>
 800512e:	0668      	lsls	r0, r5, #25
 8005130:	d5fb      	bpl.n	800512a <_printf_i+0xbe>
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	4854      	ldr	r0, [pc, #336]	; (8005288 <_printf_i+0x21c>)
 8005136:	296f      	cmp	r1, #111	; 0x6f
 8005138:	bf14      	ite	ne
 800513a:	220a      	movne	r2, #10
 800513c:	2208      	moveq	r2, #8
 800513e:	2100      	movs	r1, #0
 8005140:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005144:	6865      	ldr	r5, [r4, #4]
 8005146:	60a5      	str	r5, [r4, #8]
 8005148:	2d00      	cmp	r5, #0
 800514a:	f2c0 8095 	blt.w	8005278 <_printf_i+0x20c>
 800514e:	6821      	ldr	r1, [r4, #0]
 8005150:	f021 0104 	bic.w	r1, r1, #4
 8005154:	6021      	str	r1, [r4, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d13d      	bne.n	80051d6 <_printf_i+0x16a>
 800515a:	2d00      	cmp	r5, #0
 800515c:	f040 808e 	bne.w	800527c <_printf_i+0x210>
 8005160:	4665      	mov	r5, ip
 8005162:	2a08      	cmp	r2, #8
 8005164:	d10b      	bne.n	800517e <_printf_i+0x112>
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	07db      	lsls	r3, r3, #31
 800516a:	d508      	bpl.n	800517e <_printf_i+0x112>
 800516c:	6923      	ldr	r3, [r4, #16]
 800516e:	6862      	ldr	r2, [r4, #4]
 8005170:	429a      	cmp	r2, r3
 8005172:	bfde      	ittt	le
 8005174:	2330      	movle	r3, #48	; 0x30
 8005176:	f805 3c01 	strble.w	r3, [r5, #-1]
 800517a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800517e:	ebac 0305 	sub.w	r3, ip, r5
 8005182:	6123      	str	r3, [r4, #16]
 8005184:	f8cd 8000 	str.w	r8, [sp]
 8005188:	463b      	mov	r3, r7
 800518a:	aa03      	add	r2, sp, #12
 800518c:	4621      	mov	r1, r4
 800518e:	4630      	mov	r0, r6
 8005190:	f7ff fef6 	bl	8004f80 <_printf_common>
 8005194:	3001      	adds	r0, #1
 8005196:	d14d      	bne.n	8005234 <_printf_i+0x1c8>
 8005198:	f04f 30ff 	mov.w	r0, #4294967295
 800519c:	b005      	add	sp, #20
 800519e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051a2:	4839      	ldr	r0, [pc, #228]	; (8005288 <_printf_i+0x21c>)
 80051a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80051a8:	6813      	ldr	r3, [r2, #0]
 80051aa:	6821      	ldr	r1, [r4, #0]
 80051ac:	1d1d      	adds	r5, r3, #4
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6015      	str	r5, [r2, #0]
 80051b2:	060a      	lsls	r2, r1, #24
 80051b4:	d50b      	bpl.n	80051ce <_printf_i+0x162>
 80051b6:	07ca      	lsls	r2, r1, #31
 80051b8:	bf44      	itt	mi
 80051ba:	f041 0120 	orrmi.w	r1, r1, #32
 80051be:	6021      	strmi	r1, [r4, #0]
 80051c0:	b91b      	cbnz	r3, 80051ca <_printf_i+0x15e>
 80051c2:	6822      	ldr	r2, [r4, #0]
 80051c4:	f022 0220 	bic.w	r2, r2, #32
 80051c8:	6022      	str	r2, [r4, #0]
 80051ca:	2210      	movs	r2, #16
 80051cc:	e7b7      	b.n	800513e <_printf_i+0xd2>
 80051ce:	064d      	lsls	r5, r1, #25
 80051d0:	bf48      	it	mi
 80051d2:	b29b      	uxthmi	r3, r3
 80051d4:	e7ef      	b.n	80051b6 <_printf_i+0x14a>
 80051d6:	4665      	mov	r5, ip
 80051d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80051dc:	fb02 3311 	mls	r3, r2, r1, r3
 80051e0:	5cc3      	ldrb	r3, [r0, r3]
 80051e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051e6:	460b      	mov	r3, r1
 80051e8:	2900      	cmp	r1, #0
 80051ea:	d1f5      	bne.n	80051d8 <_printf_i+0x16c>
 80051ec:	e7b9      	b.n	8005162 <_printf_i+0xf6>
 80051ee:	6813      	ldr	r3, [r2, #0]
 80051f0:	6825      	ldr	r5, [r4, #0]
 80051f2:	6961      	ldr	r1, [r4, #20]
 80051f4:	1d18      	adds	r0, r3, #4
 80051f6:	6010      	str	r0, [r2, #0]
 80051f8:	0628      	lsls	r0, r5, #24
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	d501      	bpl.n	8005202 <_printf_i+0x196>
 80051fe:	6019      	str	r1, [r3, #0]
 8005200:	e002      	b.n	8005208 <_printf_i+0x19c>
 8005202:	066a      	lsls	r2, r5, #25
 8005204:	d5fb      	bpl.n	80051fe <_printf_i+0x192>
 8005206:	8019      	strh	r1, [r3, #0]
 8005208:	2300      	movs	r3, #0
 800520a:	6123      	str	r3, [r4, #16]
 800520c:	4665      	mov	r5, ip
 800520e:	e7b9      	b.n	8005184 <_printf_i+0x118>
 8005210:	6813      	ldr	r3, [r2, #0]
 8005212:	1d19      	adds	r1, r3, #4
 8005214:	6011      	str	r1, [r2, #0]
 8005216:	681d      	ldr	r5, [r3, #0]
 8005218:	6862      	ldr	r2, [r4, #4]
 800521a:	2100      	movs	r1, #0
 800521c:	4628      	mov	r0, r5
 800521e:	f7fa ffe7 	bl	80001f0 <memchr>
 8005222:	b108      	cbz	r0, 8005228 <_printf_i+0x1bc>
 8005224:	1b40      	subs	r0, r0, r5
 8005226:	6060      	str	r0, [r4, #4]
 8005228:	6863      	ldr	r3, [r4, #4]
 800522a:	6123      	str	r3, [r4, #16]
 800522c:	2300      	movs	r3, #0
 800522e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005232:	e7a7      	b.n	8005184 <_printf_i+0x118>
 8005234:	6923      	ldr	r3, [r4, #16]
 8005236:	462a      	mov	r2, r5
 8005238:	4639      	mov	r1, r7
 800523a:	4630      	mov	r0, r6
 800523c:	47c0      	blx	r8
 800523e:	3001      	adds	r0, #1
 8005240:	d0aa      	beq.n	8005198 <_printf_i+0x12c>
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	079b      	lsls	r3, r3, #30
 8005246:	d413      	bmi.n	8005270 <_printf_i+0x204>
 8005248:	68e0      	ldr	r0, [r4, #12]
 800524a:	9b03      	ldr	r3, [sp, #12]
 800524c:	4298      	cmp	r0, r3
 800524e:	bfb8      	it	lt
 8005250:	4618      	movlt	r0, r3
 8005252:	e7a3      	b.n	800519c <_printf_i+0x130>
 8005254:	2301      	movs	r3, #1
 8005256:	464a      	mov	r2, r9
 8005258:	4639      	mov	r1, r7
 800525a:	4630      	mov	r0, r6
 800525c:	47c0      	blx	r8
 800525e:	3001      	adds	r0, #1
 8005260:	d09a      	beq.n	8005198 <_printf_i+0x12c>
 8005262:	3501      	adds	r5, #1
 8005264:	68e3      	ldr	r3, [r4, #12]
 8005266:	9a03      	ldr	r2, [sp, #12]
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	42ab      	cmp	r3, r5
 800526c:	dcf2      	bgt.n	8005254 <_printf_i+0x1e8>
 800526e:	e7eb      	b.n	8005248 <_printf_i+0x1dc>
 8005270:	2500      	movs	r5, #0
 8005272:	f104 0919 	add.w	r9, r4, #25
 8005276:	e7f5      	b.n	8005264 <_printf_i+0x1f8>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1ac      	bne.n	80051d6 <_printf_i+0x16a>
 800527c:	7803      	ldrb	r3, [r0, #0]
 800527e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005282:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005286:	e76c      	b.n	8005162 <_printf_i+0xf6>
 8005288:	0800553d 	.word	0x0800553d
 800528c:	0800554e 	.word	0x0800554e

08005290 <_sbrk_r>:
 8005290:	b538      	push	{r3, r4, r5, lr}
 8005292:	4c06      	ldr	r4, [pc, #24]	; (80052ac <_sbrk_r+0x1c>)
 8005294:	2300      	movs	r3, #0
 8005296:	4605      	mov	r5, r0
 8005298:	4608      	mov	r0, r1
 800529a:	6023      	str	r3, [r4, #0]
 800529c:	f7fb fff8 	bl	8001290 <_sbrk>
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	d102      	bne.n	80052aa <_sbrk_r+0x1a>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	b103      	cbz	r3, 80052aa <_sbrk_r+0x1a>
 80052a8:	602b      	str	r3, [r5, #0]
 80052aa:	bd38      	pop	{r3, r4, r5, pc}
 80052ac:	20000544 	.word	0x20000544

080052b0 <__sread>:
 80052b0:	b510      	push	{r4, lr}
 80052b2:	460c      	mov	r4, r1
 80052b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b8:	f000 f896 	bl	80053e8 <_read_r>
 80052bc:	2800      	cmp	r0, #0
 80052be:	bfab      	itete	ge
 80052c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052c2:	89a3      	ldrhlt	r3, [r4, #12]
 80052c4:	181b      	addge	r3, r3, r0
 80052c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052ca:	bfac      	ite	ge
 80052cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80052ce:	81a3      	strhlt	r3, [r4, #12]
 80052d0:	bd10      	pop	{r4, pc}

080052d2 <__swrite>:
 80052d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d6:	461f      	mov	r7, r3
 80052d8:	898b      	ldrh	r3, [r1, #12]
 80052da:	05db      	lsls	r3, r3, #23
 80052dc:	4605      	mov	r5, r0
 80052de:	460c      	mov	r4, r1
 80052e0:	4616      	mov	r6, r2
 80052e2:	d505      	bpl.n	80052f0 <__swrite+0x1e>
 80052e4:	2302      	movs	r3, #2
 80052e6:	2200      	movs	r2, #0
 80052e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ec:	f000 f868 	bl	80053c0 <_lseek_r>
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052fa:	81a3      	strh	r3, [r4, #12]
 80052fc:	4632      	mov	r2, r6
 80052fe:	463b      	mov	r3, r7
 8005300:	4628      	mov	r0, r5
 8005302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005306:	f000 b817 	b.w	8005338 <_write_r>

0800530a <__sseek>:
 800530a:	b510      	push	{r4, lr}
 800530c:	460c      	mov	r4, r1
 800530e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005312:	f000 f855 	bl	80053c0 <_lseek_r>
 8005316:	1c43      	adds	r3, r0, #1
 8005318:	89a3      	ldrh	r3, [r4, #12]
 800531a:	bf15      	itete	ne
 800531c:	6560      	strne	r0, [r4, #84]	; 0x54
 800531e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005326:	81a3      	strheq	r3, [r4, #12]
 8005328:	bf18      	it	ne
 800532a:	81a3      	strhne	r3, [r4, #12]
 800532c:	bd10      	pop	{r4, pc}

0800532e <__sclose>:
 800532e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005332:	f000 b813 	b.w	800535c <_close_r>
	...

08005338 <_write_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	4c07      	ldr	r4, [pc, #28]	; (8005358 <_write_r+0x20>)
 800533c:	4605      	mov	r5, r0
 800533e:	4608      	mov	r0, r1
 8005340:	4611      	mov	r1, r2
 8005342:	2200      	movs	r2, #0
 8005344:	6022      	str	r2, [r4, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	f7fb ff51 	bl	80011ee <_write>
 800534c:	1c43      	adds	r3, r0, #1
 800534e:	d102      	bne.n	8005356 <_write_r+0x1e>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	b103      	cbz	r3, 8005356 <_write_r+0x1e>
 8005354:	602b      	str	r3, [r5, #0]
 8005356:	bd38      	pop	{r3, r4, r5, pc}
 8005358:	20000544 	.word	0x20000544

0800535c <_close_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4c06      	ldr	r4, [pc, #24]	; (8005378 <_close_r+0x1c>)
 8005360:	2300      	movs	r3, #0
 8005362:	4605      	mov	r5, r0
 8005364:	4608      	mov	r0, r1
 8005366:	6023      	str	r3, [r4, #0]
 8005368:	f7fb ff5d 	bl	8001226 <_close>
 800536c:	1c43      	adds	r3, r0, #1
 800536e:	d102      	bne.n	8005376 <_close_r+0x1a>
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	b103      	cbz	r3, 8005376 <_close_r+0x1a>
 8005374:	602b      	str	r3, [r5, #0]
 8005376:	bd38      	pop	{r3, r4, r5, pc}
 8005378:	20000544 	.word	0x20000544

0800537c <_fstat_r>:
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4c07      	ldr	r4, [pc, #28]	; (800539c <_fstat_r+0x20>)
 8005380:	2300      	movs	r3, #0
 8005382:	4605      	mov	r5, r0
 8005384:	4608      	mov	r0, r1
 8005386:	4611      	mov	r1, r2
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	f7fb ff58 	bl	800123e <_fstat>
 800538e:	1c43      	adds	r3, r0, #1
 8005390:	d102      	bne.n	8005398 <_fstat_r+0x1c>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	b103      	cbz	r3, 8005398 <_fstat_r+0x1c>
 8005396:	602b      	str	r3, [r5, #0]
 8005398:	bd38      	pop	{r3, r4, r5, pc}
 800539a:	bf00      	nop
 800539c:	20000544 	.word	0x20000544

080053a0 <_isatty_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4c06      	ldr	r4, [pc, #24]	; (80053bc <_isatty_r+0x1c>)
 80053a4:	2300      	movs	r3, #0
 80053a6:	4605      	mov	r5, r0
 80053a8:	4608      	mov	r0, r1
 80053aa:	6023      	str	r3, [r4, #0]
 80053ac:	f7fb ff57 	bl	800125e <_isatty>
 80053b0:	1c43      	adds	r3, r0, #1
 80053b2:	d102      	bne.n	80053ba <_isatty_r+0x1a>
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	b103      	cbz	r3, 80053ba <_isatty_r+0x1a>
 80053b8:	602b      	str	r3, [r5, #0]
 80053ba:	bd38      	pop	{r3, r4, r5, pc}
 80053bc:	20000544 	.word	0x20000544

080053c0 <_lseek_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4c07      	ldr	r4, [pc, #28]	; (80053e0 <_lseek_r+0x20>)
 80053c4:	4605      	mov	r5, r0
 80053c6:	4608      	mov	r0, r1
 80053c8:	4611      	mov	r1, r2
 80053ca:	2200      	movs	r2, #0
 80053cc:	6022      	str	r2, [r4, #0]
 80053ce:	461a      	mov	r2, r3
 80053d0:	f7fb ff50 	bl	8001274 <_lseek>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_lseek_r+0x1e>
 80053d8:	6823      	ldr	r3, [r4, #0]
 80053da:	b103      	cbz	r3, 80053de <_lseek_r+0x1e>
 80053dc:	602b      	str	r3, [r5, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	20000544 	.word	0x20000544

080053e4 <__malloc_lock>:
 80053e4:	4770      	bx	lr

080053e6 <__malloc_unlock>:
 80053e6:	4770      	bx	lr

080053e8 <_read_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4c07      	ldr	r4, [pc, #28]	; (8005408 <_read_r+0x20>)
 80053ec:	4605      	mov	r5, r0
 80053ee:	4608      	mov	r0, r1
 80053f0:	4611      	mov	r1, r2
 80053f2:	2200      	movs	r2, #0
 80053f4:	6022      	str	r2, [r4, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f7fb fedc 	bl	80011b4 <_read>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d102      	bne.n	8005406 <_read_r+0x1e>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	b103      	cbz	r3, 8005406 <_read_r+0x1e>
 8005404:	602b      	str	r3, [r5, #0]
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	20000544 	.word	0x20000544

0800540c <_init>:
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540e:	bf00      	nop
 8005410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005412:	bc08      	pop	{r3}
 8005414:	469e      	mov	lr, r3
 8005416:	4770      	bx	lr

08005418 <_fini>:
 8005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541a:	bf00      	nop
 800541c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541e:	bc08      	pop	{r3}
 8005420:	469e      	mov	lr, r3
 8005422:	4770      	bx	lr
