
Proj_Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004458  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080045ec  080045ec  000145ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004650  08004650  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004650  08004650  00014650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004658  08004658  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800465c  0800465c  0001465c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  20000070  080046d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  080046d0  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019922  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003096  00000000  00000000  000399c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec0  00000000  00000000  0003ca58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d80  00000000  00000000  0003d918  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001937f  00000000  00000000  0003e698  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f2cb  00000000  00000000  00057a17  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f4c5  00000000  00000000  00066ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f61a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c44  00000000  00000000  000f6224  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080045d4 	.word	0x080045d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	080045d4 	.word	0x080045d4

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b972 	b.w	80004e0 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	4688      	mov	r8, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14b      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000222:	428a      	cmp	r2, r1
 8000224:	4615      	mov	r5, r2
 8000226:	d967      	bls.n	80002f8 <__udivmoddi4+0xe4>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b14a      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 800022e:	f1c2 0720 	rsb	r7, r2, #32
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	fa20 f707 	lsr.w	r7, r0, r7
 800023a:	4095      	lsls	r5, r2
 800023c:	ea47 0803 	orr.w	r8, r7, r3
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	fbb8 f7fe 	udiv	r7, r8, lr
 800024c:	fa1f fc85 	uxth.w	ip, r5
 8000250:	fb0e 8817 	mls	r8, lr, r7, r8
 8000254:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000258:	fb07 f10c 	mul.w	r1, r7, ip
 800025c:	4299      	cmp	r1, r3
 800025e:	d909      	bls.n	8000274 <__udivmoddi4+0x60>
 8000260:	18eb      	adds	r3, r5, r3
 8000262:	f107 30ff 	add.w	r0, r7, #4294967295
 8000266:	f080 811b 	bcs.w	80004a0 <__udivmoddi4+0x28c>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 8118 	bls.w	80004a0 <__udivmoddi4+0x28c>
 8000270:	3f02      	subs	r7, #2
 8000272:	442b      	add	r3, r5
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0fe 	udiv	r0, r3, lr
 800027c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 fc0c 	mul.w	ip, r0, ip
 8000288:	45a4      	cmp	ip, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x8c>
 800028c:	192c      	adds	r4, r5, r4
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x290>
 8000296:	45a4      	cmp	ip, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x290>
 800029c:	3802      	subs	r0, #2
 800029e:	442c      	add	r4, r5
 80002a0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a4:	eba4 040c 	sub.w	r4, r4, ip
 80002a8:	2700      	movs	r7, #0
 80002aa:	b11e      	cbz	r6, 80002b4 <__udivmoddi4+0xa0>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c6 4300 	strd	r4, r3, [r6]
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xbe>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	f000 80eb 	beq.w	800049a <__udivmoddi4+0x286>
 80002c4:	2700      	movs	r7, #0
 80002c6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ca:	4638      	mov	r0, r7
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f783 	clz	r7, r3
 80002d6:	2f00      	cmp	r7, #0
 80002d8:	d147      	bne.n	800036a <__udivmoddi4+0x156>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd0>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2c4>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4698      	mov	r8, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa0>
 80002f2:	e9c6 4800 	strd	r4, r8, [r6]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa0>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xe8>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 808f 	bne.w	8000424 <__udivmoddi4+0x210>
 8000306:	1b49      	subs	r1, r1, r5
 8000308:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800030c:	fa1f f885 	uxth.w	r8, r5
 8000310:	2701      	movs	r7, #1
 8000312:	fbb1 fcfe 	udiv	ip, r1, lr
 8000316:	0c23      	lsrs	r3, r4, #16
 8000318:	fb0e 111c 	mls	r1, lr, ip, r1
 800031c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000320:	fb08 f10c 	mul.w	r1, r8, ip
 8000324:	4299      	cmp	r1, r3
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x124>
 8000328:	18eb      	adds	r3, r5, r3
 800032a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x122>
 8000330:	4299      	cmp	r1, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2bc>
 8000336:	4684      	mov	ip, r0
 8000338:	1a59      	subs	r1, r3, r1
 800033a:	b2a3      	uxth	r3, r4
 800033c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000340:	fb0e 1410 	mls	r4, lr, r0, r1
 8000344:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000348:	fb08 f800 	mul.w	r8, r8, r0
 800034c:	45a0      	cmp	r8, r4
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x14c>
 8000350:	192c      	adds	r4, r5, r4
 8000352:	f100 33ff 	add.w	r3, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x14a>
 8000358:	45a0      	cmp	r8, r4
 800035a:	f200 80b6 	bhi.w	80004ca <__udivmoddi4+0x2b6>
 800035e:	4618      	mov	r0, r3
 8000360:	eba4 0408 	sub.w	r4, r4, r8
 8000364:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000368:	e79f      	b.n	80002aa <__udivmoddi4+0x96>
 800036a:	f1c7 0c20 	rsb	ip, r7, #32
 800036e:	40bb      	lsls	r3, r7
 8000370:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000374:	ea4e 0e03 	orr.w	lr, lr, r3
 8000378:	fa01 f407 	lsl.w	r4, r1, r7
 800037c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000380:	fa21 f30c 	lsr.w	r3, r1, ip
 8000384:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000388:	4325      	orrs	r5, r4
 800038a:	fbb3 f9f8 	udiv	r9, r3, r8
 800038e:	0c2c      	lsrs	r4, r5, #16
 8000390:	fb08 3319 	mls	r3, r8, r9, r3
 8000394:	fa1f fa8e 	uxth.w	sl, lr
 8000398:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800039c:	fb09 f40a 	mul.w	r4, r9, sl
 80003a0:	429c      	cmp	r4, r3
 80003a2:	fa02 f207 	lsl.w	r2, r2, r7
 80003a6:	fa00 f107 	lsl.w	r1, r0, r7
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b0>
 80003ac:	eb1e 0303 	adds.w	r3, lr, r3
 80003b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b4:	f080 8087 	bcs.w	80004c6 <__udivmoddi4+0x2b2>
 80003b8:	429c      	cmp	r4, r3
 80003ba:	f240 8084 	bls.w	80004c6 <__udivmoddi4+0x2b2>
 80003be:	f1a9 0902 	sub.w	r9, r9, #2
 80003c2:	4473      	add	r3, lr
 80003c4:	1b1b      	subs	r3, r3, r4
 80003c6:	b2ad      	uxth	r5, r5
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d8:	45a2      	cmp	sl, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1da>
 80003dc:	eb1e 0404 	adds.w	r4, lr, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e4:	d26b      	bcs.n	80004be <__udivmoddi4+0x2aa>
 80003e6:	45a2      	cmp	sl, r4
 80003e8:	d969      	bls.n	80004be <__udivmoddi4+0x2aa>
 80003ea:	3802      	subs	r0, #2
 80003ec:	4474      	add	r4, lr
 80003ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f2:	fba0 8902 	umull	r8, r9, r0, r2
 80003f6:	eba4 040a 	sub.w	r4, r4, sl
 80003fa:	454c      	cmp	r4, r9
 80003fc:	46c2      	mov	sl, r8
 80003fe:	464b      	mov	r3, r9
 8000400:	d354      	bcc.n	80004ac <__udivmoddi4+0x298>
 8000402:	d051      	beq.n	80004a8 <__udivmoddi4+0x294>
 8000404:	2e00      	cmp	r6, #0
 8000406:	d069      	beq.n	80004dc <__udivmoddi4+0x2c8>
 8000408:	ebb1 050a 	subs.w	r5, r1, sl
 800040c:	eb64 0403 	sbc.w	r4, r4, r3
 8000410:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000414:	40fd      	lsrs	r5, r7
 8000416:	40fc      	lsrs	r4, r7
 8000418:	ea4c 0505 	orr.w	r5, ip, r5
 800041c:	e9c6 5400 	strd	r5, r4, [r6]
 8000420:	2700      	movs	r7, #0
 8000422:	e747      	b.n	80002b4 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f703 	lsr.w	r7, r0, r3
 800042c:	4095      	lsls	r5, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	fa21 f303 	lsr.w	r3, r1, r3
 8000436:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043a:	4338      	orrs	r0, r7
 800043c:	0c01      	lsrs	r1, r0, #16
 800043e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000442:	fa1f f885 	uxth.w	r8, r5
 8000446:	fb0e 3317 	mls	r3, lr, r7, r3
 800044a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044e:	fb07 f308 	mul.w	r3, r7, r8
 8000452:	428b      	cmp	r3, r1
 8000454:	fa04 f402 	lsl.w	r4, r4, r2
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x256>
 800045a:	1869      	adds	r1, r5, r1
 800045c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000460:	d22f      	bcs.n	80004c2 <__udivmoddi4+0x2ae>
 8000462:	428b      	cmp	r3, r1
 8000464:	d92d      	bls.n	80004c2 <__udivmoddi4+0x2ae>
 8000466:	3f02      	subs	r7, #2
 8000468:	4429      	add	r1, r5
 800046a:	1acb      	subs	r3, r1, r3
 800046c:	b281      	uxth	r1, r0
 800046e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000472:	fb0e 3310 	mls	r3, lr, r0, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb00 f308 	mul.w	r3, r0, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x27e>
 8000482:	1869      	adds	r1, r5, r1
 8000484:	f100 3cff 	add.w	ip, r0, #4294967295
 8000488:	d217      	bcs.n	80004ba <__udivmoddi4+0x2a6>
 800048a:	428b      	cmp	r3, r1
 800048c:	d915      	bls.n	80004ba <__udivmoddi4+0x2a6>
 800048e:	3802      	subs	r0, #2
 8000490:	4429      	add	r1, r5
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000498:	e73b      	b.n	8000312 <__udivmoddi4+0xfe>
 800049a:	4637      	mov	r7, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e709      	b.n	80002b4 <__udivmoddi4+0xa0>
 80004a0:	4607      	mov	r7, r0
 80004a2:	e6e7      	b.n	8000274 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x8c>
 80004a8:	4541      	cmp	r1, r8
 80004aa:	d2ab      	bcs.n	8000404 <__udivmoddi4+0x1f0>
 80004ac:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b0:	eb69 020e 	sbc.w	r2, r9, lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4613      	mov	r3, r2
 80004b8:	e7a4      	b.n	8000404 <__udivmoddi4+0x1f0>
 80004ba:	4660      	mov	r0, ip
 80004bc:	e7e9      	b.n	8000492 <__udivmoddi4+0x27e>
 80004be:	4618      	mov	r0, r3
 80004c0:	e795      	b.n	80003ee <__udivmoddi4+0x1da>
 80004c2:	4667      	mov	r7, ip
 80004c4:	e7d1      	b.n	800046a <__udivmoddi4+0x256>
 80004c6:	4681      	mov	r9, r0
 80004c8:	e77c      	b.n	80003c4 <__udivmoddi4+0x1b0>
 80004ca:	3802      	subs	r0, #2
 80004cc:	442c      	add	r4, r5
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0x14c>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	442b      	add	r3, r5
 80004d6:	e72f      	b.n	8000338 <__udivmoddi4+0x124>
 80004d8:	4638      	mov	r0, r7
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xda>
 80004dc:	4637      	mov	r7, r6
 80004de:	e6e9      	b.n	80002b4 <__udivmoddi4+0xa0>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	2300      	movs	r3, #0
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <HCI_TL_SPI_Init+0x84>)
 80004f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f4:	4a1c      	ldr	r2, [pc, #112]	; (8000568 <HCI_TL_SPI_Init+0x84>)
 80004f6:	f043 0301 	orr.w	r3, r3, #1
 80004fa:	6313      	str	r3, [r2, #48]	; 0x30
 80004fc:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <HCI_TL_SPI_Init+0x84>)
 80004fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000508:	2301      	movs	r3, #1
 800050a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800050c:	4b17      	ldr	r3, [pc, #92]	; (800056c <HCI_TL_SPI_Init+0x88>)
 800050e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	4619      	mov	r1, r3
 800051a:	4815      	ldr	r0, [pc, #84]	; (8000570 <HCI_TL_SPI_Init+0x8c>)
 800051c:	f001 f8f8 	bl	8001710 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000524:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000526:	2301      	movs	r3, #1
 8000528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	2300      	movs	r3, #0
 8000530:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	4619      	mov	r1, r3
 8000538:	480d      	ldr	r0, [pc, #52]	; (8000570 <HCI_TL_SPI_Init+0x8c>)
 800053a:	f001 f8e9 	bl	8001710 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800053e:	2302      	movs	r3, #2
 8000540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000542:	2301      	movs	r3, #1
 8000544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	4619      	mov	r1, r3
 8000554:	4806      	ldr	r0, [pc, #24]	; (8000570 <HCI_TL_SPI_Init+0x8c>)
 8000556:	f001 f8db 	bl	8001710 <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 800055a:	f000 fcdd 	bl	8000f18 <BSP_SPI1_Init>
 800055e:	4603      	mov	r3, r0
}
 8000560:	4618      	mov	r0, r3
 8000562:	3720      	adds	r7, #32
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40023800 	.word	0x40023800
 800056c:	10110000 	.word	0x10110000
 8000570:	40020000 	.word	0x40020000

08000574 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000578:	2101      	movs	r1, #1
 800057a:	4807      	ldr	r0, [pc, #28]	; (8000598 <HCI_TL_SPI_DeInit+0x24>)
 800057c:	f001 fa4a 	bl	8001a14 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000580:	2102      	movs	r1, #2
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <HCI_TL_SPI_DeInit+0x24>)
 8000584:	f001 fa46 	bl	8001a14 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <HCI_TL_SPI_DeInit+0x24>)
 800058e:	f001 fa41 	bl	8001a14 <HAL_GPIO_DeInit>
  return 0;
 8000592:	2300      	movs	r3, #0
}
 8000594:	4618      	mov	r0, r3
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40020000 	.word	0x40020000

0800059c <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2102      	movs	r1, #2
 80005a4:	480b      	ldr	r0, [pc, #44]	; (80005d4 <HCI_TL_SPI_Reset+0x38>)
 80005a6:	f001 fb2f 	bl	8001c08 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b0:	4808      	ldr	r0, [pc, #32]	; (80005d4 <HCI_TL_SPI_Reset+0x38>)
 80005b2:	f001 fb29 	bl	8001c08 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005b6:	2005      	movs	r0, #5
 80005b8:	f000 ff24 	bl	8001404 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c2:	4804      	ldr	r0, [pc, #16]	; (80005d4 <HCI_TL_SPI_Reset+0x38>)
 80005c4:	f001 fb20 	bl	8001c08 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80005c8:	2005      	movs	r0, #5
 80005ca:	f000 ff1b 	bl	8001404 <HAL_Delay>
  return 0;
 80005ce:	2300      	movs	r3, #0
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40020000 	.word	0x40020000

080005d8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80005e8:	23ff      	movs	r3, #255	; 0xff
 80005ea:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80005ec:	230b      	movs	r3, #11
 80005ee:	753b      	strb	r3, [r7, #20]
 80005f0:	2300      	movs	r3, #0
 80005f2:	757b      	strb	r3, [r7, #21]
 80005f4:	2300      	movs	r3, #0
 80005f6:	75bb      	strb	r3, [r7, #22]
 80005f8:	2300      	movs	r3, #0
 80005fa:	75fb      	strb	r3, [r7, #23]
 80005fc:	2300      	movs	r3, #0
 80005fe:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2102      	movs	r1, #2
 8000604:	4820      	ldr	r0, [pc, #128]	; (8000688 <HCI_TL_SPI_Receive+0xb0>)
 8000606:	f001 faff 	bl	8001c08 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800060a:	f107 010c 	add.w	r1, r7, #12
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2205      	movs	r2, #5
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fcaf 	bl	8000f78 <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 800061a:	7b3b      	ldrb	r3, [r7, #12]
 800061c:	2b02      	cmp	r3, #2
 800061e:	d129      	bne.n	8000674 <HCI_TL_SPI_Receive+0x9c>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8000620:	7c3b      	ldrb	r3, [r7, #16]
 8000622:	021b      	lsls	r3, r3, #8
 8000624:	b21a      	sxth	r2, r3
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	b21b      	sxth	r3, r3
 800062a:	4313      	orrs	r3, r2
 800062c:	b21b      	sxth	r3, r3
 800062e:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8000630:	8bfb      	ldrh	r3, [r7, #30]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d01e      	beq.n	8000674 <HCI_TL_SPI_Receive+0x9c>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8000636:	8bfa      	ldrh	r2, [r7, #30]
 8000638:	887b      	ldrh	r3, [r7, #2]
 800063a:	429a      	cmp	r2, r3
 800063c:	d901      	bls.n	8000642 <HCI_TL_SPI_Receive+0x6a>
        byte_count = size;
 800063e:	887b      	ldrh	r3, [r7, #2]
 8000640:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8000642:	2300      	movs	r3, #0
 8000644:	777b      	strb	r3, [r7, #29]
 8000646:	e010      	b.n	800066a <HCI_TL_SPI_Receive+0x92>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8000648:	f107 011b 	add.w	r1, r7, #27
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	2201      	movs	r2, #1
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fc90 	bl	8000f78 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8000658:	7f7b      	ldrb	r3, [r7, #29]
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	7efa      	ldrb	r2, [r7, #27]
 8000660:	b2d2      	uxtb	r2, r2
 8000662:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8000664:	7f7b      	ldrb	r3, [r7, #29]
 8000666:	3301      	adds	r3, #1
 8000668:	777b      	strb	r3, [r7, #29]
 800066a:	7f7b      	ldrb	r3, [r7, #29]
 800066c:	b29b      	uxth	r3, r3
 800066e:	8bfa      	ldrh	r2, [r7, #30]
 8000670:	429a      	cmp	r2, r3
 8000672:	d8e9      	bhi.n	8000648 <HCI_TL_SPI_Receive+0x70>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2102      	movs	r1, #2
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <HCI_TL_SPI_Receive+0xb0>)
 800067a:	f001 fac5 	bl	8001c08 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 800067e:	7f7b      	ldrb	r3, [r7, #29]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40020000 	.word	0x40020000

0800068c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	460b      	mov	r3, r1
 8000696:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000698:	230a      	movs	r3, #10
 800069a:	743b      	strb	r3, [r7, #16]
 800069c:	2300      	movs	r3, #0
 800069e:	747b      	strb	r3, [r7, #17]
 80006a0:	2300      	movs	r3, #0
 80006a2:	74bb      	strb	r3, [r7, #18]
 80006a4:	2300      	movs	r3, #0
 80006a6:	74fb      	strb	r3, [r7, #19]
 80006a8:	2300      	movs	r3, #0
 80006aa:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80006ac:	f000 fe9e 	bl	80013ec <HAL_GetTick>
 80006b0:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2102      	movs	r1, #2
 80006ba:	481c      	ldr	r0, [pc, #112]	; (800072c <HCI_TL_SPI_Send+0xa0>)
 80006bc:	f001 faa4 	bl	8001c08 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006c0:	f107 0108 	add.w	r1, r7, #8
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	2205      	movs	r2, #5
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fc54 	bl	8000f78 <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 80006d0:	7a3b      	ldrb	r3, [r7, #8]
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d10f      	bne.n	80006f6 <HCI_TL_SPI_Send+0x6a>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80006d6:	7a7b      	ldrb	r3, [r7, #9]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	887a      	ldrh	r2, [r7, #2]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d806      	bhi.n	80006ee <HCI_TL_SPI_Send+0x62>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80006e0:	887b      	ldrh	r3, [r7, #2]
 80006e2:	461a      	mov	r2, r3
 80006e4:	4912      	ldr	r1, [pc, #72]	; (8000730 <HCI_TL_SPI_Send+0xa4>)
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f000 fc46 	bl	8000f78 <BSP_SPI1_SendRecv>
 80006ec:	e006      	b.n	80006fc <HCI_TL_SPI_Send+0x70>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80006ee:	f06f 0301 	mvn.w	r3, #1
 80006f2:	61fb      	str	r3, [r7, #28]
 80006f4:	e002      	b.n	80006fc <HCI_TL_SPI_Send+0x70>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2102      	movs	r1, #2
 8000700:	480a      	ldr	r0, [pc, #40]	; (800072c <HCI_TL_SPI_Send+0xa0>)
 8000702:	f001 fa81 	bl	8001c08 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000706:	f000 fe71 	bl	80013ec <HAL_GetTick>
 800070a:	4602      	mov	r2, r0
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	2b0f      	cmp	r3, #15
 8000712:	d903      	bls.n	800071c <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8000714:	f06f 0302 	mvn.w	r3, #2
 8000718:	61fb      	str	r3, [r7, #28]
      break;
 800071a:	e002      	b.n	8000722 <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	2b00      	cmp	r3, #0
 8000720:	dbc7      	blt.n	80006b2 <HCI_TL_SPI_Send+0x26>

  return result;
 8000722:	69fb      	ldr	r3, [r7, #28]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3720      	adds	r7, #32
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40020000 	.word	0x40020000
 8000730:	2000008c 	.word	0x2000008c

08000734 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000738:	2101      	movs	r1, #1
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <IsDataAvailable+0x1c>)
 800073c:	f001 fa4c 	bl	8001bd8 <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	2b01      	cmp	r3, #1
 8000744:	bf0c      	ite	eq
 8000746:	2301      	moveq	r3, #1
 8000748:	2300      	movne	r3, #0
 800074a:	b2db      	uxtb	r3, r3
}
 800074c:	4618      	mov	r0, r3
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40020000 	.word	0x40020000

08000754 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <hci_tl_lowlevel_init+0x54>)
 800075c:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <hci_tl_lowlevel_init+0x58>)
 8000760:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <hci_tl_lowlevel_init+0x5c>)
 8000764:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <hci_tl_lowlevel_init+0x60>)
 8000768:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <hci_tl_lowlevel_init+0x64>)
 800076c:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <hci_tl_lowlevel_init+0x68>)
 8000770:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4618      	mov	r0, r3
 8000776:	f003 fb8f 	bl	8003e98 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800077a:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 800077e:	4810      	ldr	r0, [pc, #64]	; (80007c0 <hci_tl_lowlevel_init+0x6c>)
 8000780:	f000 ff8d 	bl	800169e <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000784:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <hci_tl_lowlevel_init+0x70>)
 8000786:	2100      	movs	r1, #0
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <hci_tl_lowlevel_init+0x6c>)
 800078a:	f000 ff6e 	bl	800166a <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	2006      	movs	r0, #6
 8000794:	f000 ff33 	bl	80015fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000798:	2006      	movs	r0, #6
 800079a:	f000 ff4c 	bl	8001636 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 800079e:	bf00      	nop
 80007a0:	3720      	adds	r7, #32
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	080004e5 	.word	0x080004e5
 80007ac:	08000575 	.word	0x08000575
 80007b0:	0800068d 	.word	0x0800068d
 80007b4:	080005d9 	.word	0x080005d9
 80007b8:	0800059d 	.word	0x0800059d
 80007bc:	08000fb9 	.word	0x08000fb9
 80007c0:	20000480 	.word	0x20000480
 80007c4:	080007c9 	.word	0x080007c9

080007c8 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80007cc:	e005      	b.n	80007da <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80007ce:	2000      	movs	r0, #0
 80007d0:	f003 fcc4 	bl	800415c <hci_notify_asynch_evt>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d105      	bne.n	80007e6 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80007da:	f7ff ffab 	bl	8000734 <IsDataAvailable>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1f4      	bne.n	80007ce <hci_tl_lowlevel_isr+0x6>
 80007e4:	e000      	b.n	80007e8 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80007e6:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <MX_BlueNRG_MS_Init>:


/*
 * Initialization of BlueNRG module
 */
void MX_BlueNRG_MS_Init() {
 80007ec:	b5b0      	push	{r4, r5, r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af02      	add	r7, sp, #8
	const char* name = "Preis";
 80007f2:	4b23      	ldr	r3, [pc, #140]	; (8000880 <MX_BlueNRG_MS_Init+0x94>)
 80007f4:	61fb      	str	r3, [r7, #28]
	uint8_t SERVER_BDADDR[] = {0x01,0x02,0x03,0x04,0x05,0x06};
 80007f6:	4a23      	ldr	r2, [pc, #140]	; (8000884 <MX_BlueNRG_MS_Init+0x98>)
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000800:	6018      	str	r0, [r3, #0]
 8000802:	3304      	adds	r3, #4
 8000804:	8019      	strh	r1, [r3, #0]
	uint8_t bdaddr[BDADDR_SIZE];

	uint16_t service_handle, dev_name_char_handle, appearance_char_handle;

	hci_init(user_notify, NULL);
 8000806:	2100      	movs	r1, #0
 8000808:	481f      	ldr	r0, [pc, #124]	; (8000888 <MX_BlueNRG_MS_Init+0x9c>)
 800080a:	f003 fb03 	bl	8003e14 <hci_init>
	hci_reset();
 800080e:	f003 fa05 	bl	8003c1c <hci_reset>
	HAL_Delay(100);
 8000812:	2064      	movs	r0, #100	; 0x64
 8000814:	f000 fdf6 	bl	8001404 <HAL_Delay>

	BLUENRG_memcpy(bdaddr,SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	f107 0214 	add.w	r2, r7, #20
 8000820:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000824:	6018      	str	r0, [r3, #0]
 8000826:	3304      	adds	r3, #4
 8000828:	8019      	strh	r1, [r3, #0]

	aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN,bdaddr);
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	461a      	mov	r2, r3
 8000830:	2106      	movs	r1, #6
 8000832:	2000      	movs	r0, #0
 8000834:	f003 f98a 	bl	8003b4c <aci_hal_write_config_data>
	aci_gatt_init();
 8000838:	f002 fe35 	bl	80034a6 <aci_gatt_init>

	//IDB05A1 BLE
	aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800083c:	f107 020a 	add.w	r2, r7, #10
 8000840:	1dbb      	adds	r3, r7, #6
 8000842:	9301      	str	r3, [sp, #4]
 8000844:	f107 0308 	add.w	r3, r7, #8
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	4613      	mov	r3, r2
 800084c:	2207      	movs	r2, #7
 800084e:	2100      	movs	r1, #0
 8000850:	2001      	movs	r0, #1
 8000852:	f002 fce9 	bl	8003228 <aci_gap_init_IDB05A1>

	aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), (uint8_t*)name);
 8000856:	897c      	ldrh	r4, [r7, #10]
 8000858:	893d      	ldrh	r5, [r7, #8]
 800085a:	69f8      	ldr	r0, [r7, #28]
 800085c:	f7ff fcba 	bl	80001d4 <strlen>
 8000860:	4603      	mov	r3, r0
 8000862:	b2da      	uxtb	r2, r3
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	4613      	mov	r3, r2
 800086a:	2200      	movs	r2, #0
 800086c:	4629      	mov	r1, r5
 800086e:	4620      	mov	r0, r4
 8000870:	f003 f8ac 	bl	80039cc <aci_gatt_update_char_value>

	//add services
	addServices();
 8000874:	f000 f836 	bl	80008e4 <addServices>

}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bdb0      	pop	{r4, r5, r7, pc}
 8000880:	080045ec 	.word	0x080045ec
 8000884:	080045f4 	.word	0x080045f4
 8000888:	08000bb1 	.word	0x08000bb1

0800088c <MX_BlueNRG_MS_Process>:

/*
 * Initialization of BlueNRG process
 */
void MX_BlueNRG_MS_Process() {
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af08      	add	r7, sp, #32
	tBleStatus ret;
	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','L','E','-','A','X','G'};
 8000892:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <MX_BlueNRG_MS_Process+0x54>)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	e892 0003 	ldmia.w	r2, {r0, r1}
 800089a:	e883 0003 	stmia.w	r3, {r0, r1}

	hci_le_set_scan_resp_data(0, NULL);
 800089e:	2100      	movs	r1, #0
 80008a0:	2000      	movs	r0, #0
 80008a2:	f003 f9dd 	bl	8003c60 <hci_le_set_scan_resp_data>

	ret = aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR,NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 80008a6:	2300      	movs	r3, #0
 80008a8:	9306      	str	r3, [sp, #24]
 80008aa:	2300      	movs	r3, #0
 80008ac:	9305      	str	r3, [sp, #20]
 80008ae:	2300      	movs	r3, #0
 80008b0:	9304      	str	r3, [sp, #16]
 80008b2:	2300      	movs	r3, #0
 80008b4:	9303      	str	r3, [sp, #12]
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	9302      	str	r3, [sp, #8]
 80008ba:	2308      	movs	r3, #8
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	2300      	movs	r3, #0
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2300      	movs	r3, #0
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2000      	movs	r0, #0
 80008ca:	f002 fcfd 	bl	80032c8 <aci_gap_set_discoverable>
 80008ce:	4603      	mov	r3, r0
 80008d0:	73fb      	strb	r3, [r7, #15]

	hci_user_evt_proc();
 80008d2:	f003 fc19 	bl	8004108 <hci_user_evt_proc>
}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	080045fc 	.word	0x080045fc

080008e4 <addServices>:
/*
 * @brief add services to the devices
 *
 */

tBleStatus addServices(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af0a      	add	r7, sp, #40	; 0x28

	charactFormat charFormat;
	tBleStatus ret;

	aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &myServiceHandle);
 80008ea:	4b2f      	ldr	r3, [pc, #188]	; (80009a8 <addServices+0xc4>)
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2307      	movs	r3, #7
 80008f0:	2201      	movs	r2, #1
 80008f2:	492e      	ldr	r1, [pc, #184]	; (80009ac <addServices+0xc8>)
 80008f4:	2002      	movs	r0, #2
 80008f6:	f002 fdf9 	bl	80034ec <aci_gatt_add_serv>
	ret = aci_gatt_add_char(myServiceHandle, UUID_TYPE_128, char_uuid, 2, CHAR_PROP_READ, ATTR_PERMISSION_NONE, GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP, 16, 0, &myCharHandle);
 80008fa:	4b2b      	ldr	r3, [pc, #172]	; (80009a8 <addServices+0xc4>)
 80008fc:	8818      	ldrh	r0, [r3, #0]
 80008fe:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <addServices+0xcc>)
 8000900:	9305      	str	r3, [sp, #20]
 8000902:	2300      	movs	r3, #0
 8000904:	9304      	str	r3, [sp, #16]
 8000906:	2310      	movs	r3, #16
 8000908:	9303      	str	r3, [sp, #12]
 800090a:	2304      	movs	r3, #4
 800090c:	9302      	str	r3, [sp, #8]
 800090e:	2300      	movs	r3, #0
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	2302      	movs	r3, #2
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2302      	movs	r3, #2
 8000918:	4a26      	ldr	r2, [pc, #152]	; (80009b4 <addServices+0xd0>)
 800091a:	2102      	movs	r1, #2
 800091c:	f002 fe72 	bl	8003604 <aci_gatt_add_char>
 8000920:	4603      	mov	r3, r0
 8000922:	71fb      	strb	r3, [r7, #7]
	ret = aci_gatt_add_char(myServiceHandle, UUID_TYPE_128, tempchar_uuid, 2, CHAR_PROP_READ, ATTR_PERMISSION_NONE, GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP, 16, 0, &myTempCharHandle);
 8000924:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <addServices+0xc4>)
 8000926:	8818      	ldrh	r0, [r3, #0]
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <addServices+0xd4>)
 800092a:	9305      	str	r3, [sp, #20]
 800092c:	2300      	movs	r3, #0
 800092e:	9304      	str	r3, [sp, #16]
 8000930:	2310      	movs	r3, #16
 8000932:	9303      	str	r3, [sp, #12]
 8000934:	2304      	movs	r3, #4
 8000936:	9302      	str	r3, [sp, #8]
 8000938:	2300      	movs	r3, #0
 800093a:	9301      	str	r3, [sp, #4]
 800093c:	2302      	movs	r3, #2
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2302      	movs	r3, #2
 8000942:	4a1e      	ldr	r2, [pc, #120]	; (80009bc <addServices+0xd8>)
 8000944:	2102      	movs	r1, #2
 8000946:	f002 fe5d 	bl	8003604 <aci_gatt_add_char>
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]

	charFormat.format = FORMAT_SINT16;
 800094e:	230e      	movs	r3, #14
 8000950:	703b      	strb	r3, [r7, #0]
	charFormat.exp = -1;
 8000952:	23ff      	movs	r3, #255	; 0xff
 8000954:	707b      	strb	r3, [r7, #1]
	charFormat.unit = UNIT_TEMP_CELSIUS;
 8000956:	f242 732f 	movw	r3, #10031	; 0x272f
 800095a:	807b      	strh	r3, [r7, #2]
	charFormat.name_space = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	713b      	strb	r3, [r7, #4]
	charFormat.desc = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	717b      	strb	r3, [r7, #5]
 8000964:	2300      	movs	r3, #0
 8000966:	71bb      	strb	r3, [r7, #6]

	aci_gatt_add_char_desc(myServiceHandle, myTempCharHandle, UUID_TYPE_16, (uint8_t *)tempDesc_uuid, 7, 7, (void *)&charFormat, ATTR_PERMISSION_NONE, ATTR_ACCESS_READ_ONLY,0,16,FALSE, &myDescHandle);
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <addServices+0xc4>)
 800096a:	8818      	ldrh	r0, [r3, #0]
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <addServices+0xd4>)
 800096e:	8819      	ldrh	r1, [r3, #0]
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <addServices+0xdc>)
 8000972:	9308      	str	r3, [sp, #32]
 8000974:	2300      	movs	r3, #0
 8000976:	9307      	str	r3, [sp, #28]
 8000978:	2310      	movs	r3, #16
 800097a:	9306      	str	r3, [sp, #24]
 800097c:	2300      	movs	r3, #0
 800097e:	9305      	str	r3, [sp, #20]
 8000980:	2301      	movs	r3, #1
 8000982:	9304      	str	r3, [sp, #16]
 8000984:	2300      	movs	r3, #0
 8000986:	9303      	str	r3, [sp, #12]
 8000988:	463b      	mov	r3, r7
 800098a:	9302      	str	r3, [sp, #8]
 800098c:	2307      	movs	r3, #7
 800098e:	9301      	str	r3, [sp, #4]
 8000990:	2307      	movs	r3, #7
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <addServices+0xe0>)
 8000996:	2201      	movs	r2, #1
 8000998:	f002 ff06 	bl	80037a8 <aci_gatt_add_char_desc>

	return ret;
 800099c:	79fb      	ldrb	r3, [r7, #7]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000488 	.word	0x20000488
 80009ac:	08004604 	.word	0x08004604
 80009b0:	2000048a 	.word	0x2000048a
 80009b4:	08004614 	.word	0x08004614
 80009b8:	2000048e 	.word	0x2000048e
 80009bc:	08004624 	.word	0x08004624
 80009c0:	2000048c 	.word	0x2000048c
 80009c4:	08004634 	.word	0x08004634

080009c8 <updateData>:
/*
 * @brief update general data
 *
 */

tBleStatus updateData(int16_t newData) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	4603      	mov	r3, r0
 80009d0:	80fb      	strh	r3, [r7, #6]

	tBleStatus ret;

	ret = aci_gatt_update_char_value(myServiceHandle, myCharHandle, 0, 2, (uint8_t *)&newData);
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <updateData+0x2c>)
 80009d4:	8818      	ldrh	r0, [r3, #0]
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <updateData+0x30>)
 80009d8:	8819      	ldrh	r1, [r3, #0]
 80009da:	1dbb      	adds	r3, r7, #6
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2302      	movs	r3, #2
 80009e0:	2200      	movs	r2, #0
 80009e2:	f002 fff3 	bl	80039cc <aci_gatt_update_char_value>
 80009e6:	4603      	mov	r3, r0
 80009e8:	73fb      	strb	r3, [r7, #15]

	return ret;
 80009ea:	7bfb      	ldrb	r3, [r7, #15]

}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000488 	.word	0x20000488
 80009f8:	2000048a 	.word	0x2000048a

080009fc <updateTempData>:
/*
 * @brief update temperature data
 *
 */

tBleStatus updateTempData(int16_t tempData) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af02      	add	r7, sp, #8
 8000a02:	4603      	mov	r3, r0
 8000a04:	80fb      	strh	r3, [r7, #6]

	tBleStatus ret;
	ret = aci_gatt_update_char_value(myServiceHandle, myTempCharHandle, 0, 2, (uint8_t *)&tempData);
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <updateTempData+0x2c>)
 8000a08:	8818      	ldrh	r0, [r3, #0]
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <updateTempData+0x30>)
 8000a0c:	8819      	ldrh	r1, [r3, #0]
 8000a0e:	1dbb      	adds	r3, r7, #6
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2302      	movs	r3, #2
 8000a14:	2200      	movs	r2, #0
 8000a16:	f002 ffd9 	bl	80039cc <aci_gatt_update_char_value>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000488 	.word	0x20000488
 8000a2c:	2000048e 	.word	0x2000048e

08000a30 <GAP_ConnectionComplete_CB>:
/*
 * @brief BLE connection complete CB
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	807b      	strh	r3, [r7, #2]

//#Todo: connection complete
	connected = TRUE;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <GAP_ConnectionComplete_CB+0x30>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
	connection_handle = handle;
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <GAP_ConnectionComplete_CB+0x34>)
 8000a44:	887b      	ldrh	r3, [r7, #2]
 8000a46:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2120      	movs	r1, #32
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <GAP_ConnectionComplete_CB+0x38>)
 8000a4e:	f001 f8db 	bl	8001c08 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a52:	2064      	movs	r0, #100	; 0x64
 8000a54:	f000 fcd6 	bl	8001404 <HAL_Delay>

}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000018c 	.word	0x2000018c
 8000a64:	20000190 	.word	0x20000190
 8000a68:	40020000 	.word	0x40020000

08000a6c <GAP_DisconnectionComplete_CB>:

/*
 * @brief BLE disconnection complete CB
 */
void GAP_DisconnectionComplete_CB(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0

//#Todo: connection complete
	HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2120      	movs	r1, #32
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <GAP_DisconnectionComplete_CB+0x18>)
 8000a76:	f001 f8c7 	bl	8001c08 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a7a:	2064      	movs	r0, #100	; 0x64
 8000a7c:	f000 fcc2 	bl	8001404 <HAL_Delay>

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40020000 	.word	0x40020000

08000a88 <Read_Request_CB>:

/*
 * @brief read request complete CB
 */
void Read_Request_CB(uint16_t handle) {
 8000a88:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8000a8c:	b084      	sub	sp, #16
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	80fb      	strh	r3, [r7, #6]

	if(handle == myCharHandle+1) {
 8000a94:	88fa      	ldrh	r2, [r7, #6]
 8000a96:	4b43      	ldr	r3, [pc, #268]	; (8000ba4 <Read_Request_CB+0x11c>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d136      	bne.n	8000b0e <Read_Request_CB+0x86>

		int myData = 450;
 8000aa0:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8000aa4:	60fb      	str	r3, [r7, #12]
		myData = 450 + ((uint64_t) rand()*100)/1000;
 8000aa6:	f003 fced 	bl	8004484 <rand>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461d      	mov	r5, r3
 8000aae:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8000ab2:	46ab      	mov	fp, r5
 8000ab4:	46b4      	mov	ip, r6
 8000ab6:	eb1b 030b 	adds.w	r3, fp, fp
 8000aba:	eb4c 040c 	adc.w	r4, ip, ip
 8000abe:	469b      	mov	fp, r3
 8000ac0:	46a4      	mov	ip, r4
 8000ac2:	eb1b 0b05 	adds.w	fp, fp, r5
 8000ac6:	eb4c 0c06 	adc.w	ip, ip, r6
 8000aca:	f04f 0100 	mov.w	r1, #0
 8000ace:	f04f 0200 	mov.w	r2, #0
 8000ad2:	ea4f 124c 	mov.w	r2, ip, lsl #5
 8000ad6:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 8000ada:	ea4f 114b 	mov.w	r1, fp, lsl #5
 8000ade:	eb1b 0b01 	adds.w	fp, fp, r1
 8000ae2:	eb4c 0c02 	adc.w	ip, ip, r2
 8000ae6:	eb1b 0005 	adds.w	r0, fp, r5
 8000aea:	eb4c 0106 	adc.w	r1, ip, r6
 8000aee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000af2:	f04f 0300 	mov.w	r3, #0
 8000af6:	f7ff fb75 	bl	80001e4 <__aeabi_uldivmod>
 8000afa:	4603      	mov	r3, r0
 8000afc:	460c      	mov	r4, r1
 8000afe:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8000b02:	60fb      	str	r3, [r7, #12]
		updateData(myData);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	b21b      	sxth	r3, r3
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff5d 	bl	80009c8 <updateData>
	//	updateTempData();

	}

	if(handle == myTempCharHandle+1) {
 8000b0e:	88fa      	ldrh	r2, [r7, #6]
 8000b10:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <Read_Request_CB+0x120>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	3301      	adds	r3, #1
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d136      	bne.n	8000b88 <Read_Request_CB+0x100>

		int16_t myTempData = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	817b      	strh	r3, [r7, #10]
		myTempData = 50 + ((uint64_t) rand()*100)/1000;
 8000b1e:	f003 fcb1 	bl	8004484 <rand>
 8000b22:	4603      	mov	r3, r0
 8000b24:	461d      	mov	r5, r3
 8000b26:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8000b2a:	46ab      	mov	fp, r5
 8000b2c:	46b4      	mov	ip, r6
 8000b2e:	eb1b 030b 	adds.w	r3, fp, fp
 8000b32:	eb4c 040c 	adc.w	r4, ip, ip
 8000b36:	469b      	mov	fp, r3
 8000b38:	46a4      	mov	ip, r4
 8000b3a:	eb1b 0b05 	adds.w	fp, fp, r5
 8000b3e:	eb4c 0c06 	adc.w	ip, ip, r6
 8000b42:	f04f 0100 	mov.w	r1, #0
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	ea4f 124c 	mov.w	r2, ip, lsl #5
 8000b4e:	ea42 62db 	orr.w	r2, r2, fp, lsr #27
 8000b52:	ea4f 114b 	mov.w	r1, fp, lsl #5
 8000b56:	eb1b 0b01 	adds.w	fp, fp, r1
 8000b5a:	eb4c 0c02 	adc.w	ip, ip, r2
 8000b5e:	eb1b 0005 	adds.w	r0, fp, r5
 8000b62:	eb4c 0106 	adc.w	r1, ip, r6
 8000b66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b6a:	f04f 0300 	mov.w	r3, #0
 8000b6e:	f7ff fb39 	bl	80001e4 <__aeabi_uldivmod>
 8000b72:	4603      	mov	r3, r0
 8000b74:	460c      	mov	r4, r1
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	3332      	adds	r3, #50	; 0x32
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	817b      	strh	r3, [r7, #10]
		updateTempData(myTempData);
 8000b7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff3a 	bl	80009fc <updateTempData>

	}

	if(connection_handle != 0) {
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <Read_Request_CB+0x124>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d004      	beq.n	8000b9a <Read_Request_CB+0x112>
		aci_gatt_allow_read(connection_handle);
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <Read_Request_CB+0x124>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f002 ffac 	bl	8003af2 <aci_gatt_allow_read>
	}

}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8000ba4:	2000048a 	.word	0x2000048a
 8000ba8:	2000048e 	.word	0x2000048e
 8000bac:	20000190 	.word	0x20000190

08000bb0 <user_notify>:

/*
 * @brief user_notify events
 */
void user_notify(void *pdata) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

	hci_uart_pckt *hci_pckt = pdata;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	61fb      	str	r3, [r7, #28]
	hci_event_pckt *event_pckt = (hci_event_pckt *)hci_pckt->data;
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	61bb      	str	r3, [r7, #24]

	if(hci_pckt->type != HCI_EVENT_PKT)
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d139      	bne.n	8000c3e <user_notify+0x8e>
		return;

	switch(event_pckt->evt) {
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b3e      	cmp	r3, #62	; 0x3e
 8000bd0:	d006      	beq.n	8000be0 <user_notify+0x30>
 8000bd2:	2bff      	cmp	r3, #255	; 0xff
 8000bd4:	d01b      	beq.n	8000c0e <user_notify+0x5e>
 8000bd6:	2b05      	cmp	r3, #5
 8000bd8:	d132      	bne.n	8000c40 <user_notify+0x90>

		case EVT_DISCONN_COMPLETE:
		{
			GAP_DisconnectionComplete_CB();
 8000bda:	f7ff ff47 	bl	8000a6c <GAP_DisconnectionComplete_CB>
		}
		break;
 8000bde:	e02f      	b.n	8000c40 <user_notify+0x90>

		case EVT_LE_META_EVENT:
		{
			evt_le_meta_event *evt = (void *)event_pckt->data;
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	3302      	adds	r3, #2
 8000be4:	60fb      	str	r3, [r7, #12]

			switch(evt->subevent)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d000      	beq.n	8000bf0 <user_notify+0x40>

				}
				break;
			}
		}
		break;
 8000bee:	e027      	b.n	8000c40 <user_notify+0x90>
					evt_le_connection_complete *cc = (void *)evt->data;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	60bb      	str	r3, [r7, #8]
					GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	1d5a      	adds	r2, r3, #5
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	4619      	mov	r1, r3
 8000c04:	4610      	mov	r0, r2
 8000c06:	f7ff ff13 	bl	8000a30 <GAP_ConnectionComplete_CB>
				break;
 8000c0a:	bf00      	nop
		break;
 8000c0c:	e018      	b.n	8000c40 <user_notify+0x90>

		case EVT_VENDOR:
		{
			evt_blue_aci *blue_evt = (void *)event_pckt->data;
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	3302      	adds	r3, #2
 8000c12:	617b      	str	r3, [r7, #20]

			switch(blue_evt->ecode)
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	f640 4314 	movw	r3, #3092	; 0xc14
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d000      	beq.n	8000c26 <user_notify+0x76>

				}
				break;
			}
		}
		break;
 8000c24:	e00c      	b.n	8000c40 <user_notify+0x90>
					evt_gatt_read_permit_req *pr = (void *)blue_evt->data;
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3302      	adds	r3, #2
 8000c2a:	613b      	str	r3, [r7, #16]
					Read_Request_CB(pr->attr_handle);
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	885b      	ldrh	r3, [r3, #2]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff ff28 	bl	8000a88 <Read_Request_CB>
				break;
 8000c38:	bf00      	nop
		break;
 8000c3a:	bf00      	nop
 8000c3c:	e000      	b.n	8000c40 <user_notify+0x90>
		return;
 8000c3e:	bf00      	nop
	}
}
 8000c40:	3720      	adds	r7, #32
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b37      	ldr	r3, [pc, #220]	; (8000d40 <MX_GPIO_Init+0xf8>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a36      	ldr	r2, [pc, #216]	; (8000d40 <MX_GPIO_Init+0xf8>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b34      	ldr	r3, [pc, #208]	; (8000d40 <MX_GPIO_Init+0xf8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b30      	ldr	r3, [pc, #192]	; (8000d40 <MX_GPIO_Init+0xf8>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a2f      	ldr	r2, [pc, #188]	; (8000d40 <MX_GPIO_Init+0xf8>)
 8000c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <MX_GPIO_Init+0xf8>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <MX_GPIO_Init+0xf8>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a28      	ldr	r2, [pc, #160]	; (8000d40 <MX_GPIO_Init+0xf8>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <MX_GPIO_Init+0xf8>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <MX_GPIO_Init+0xf8>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <MX_GPIO_Init+0xf8>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <MX_GPIO_Init+0xf8>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LED_GREEN_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f240 3122 	movw	r1, #802	; 0x322
 8000cd4:	481b      	ldr	r0, [pc, #108]	; (8000d44 <MX_GPIO_Init+0xfc>)
 8000cd6:	f000 ff97 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cda:	2308      	movs	r3, #8
 8000cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_GPIO_Init+0x100>)
 8000ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4817      	ldr	r0, [pc, #92]	; (8000d4c <MX_GPIO_Init+0x104>)
 8000cee:	f000 fd0f 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_GPIO_Init+0x100>)
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <MX_GPIO_Init+0xfc>)
 8000d06:	f000 fd03 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PAPin PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LED_GREEN_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8000d0a:	f240 3322 	movw	r3, #802	; 0x322
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4808      	ldr	r0, [pc, #32]	; (8000d44 <MX_GPIO_Init+0xfc>)
 8000d24:	f000 fcf4 	bl	8001710 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2006      	movs	r0, #6
 8000d2e:	f000 fc66 	bl	80015fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d32:	2006      	movs	r0, #6
 8000d34:	f000 fc7f 	bl	8001636 <HAL_NVIC_EnableIRQ>

}
 8000d38:	bf00      	nop
 8000d3a:	3728      	adds	r7, #40	; 0x28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000
 8000d48:	10110000 	.word	0x10110000
 8000d4c:	40020800 	.word	0x40020800

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f000 fae4 	bl	8001320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f80a 	bl	8000d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f7ff ff74 	bl	8000c48 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d60:	f000 fa22 	bl	80011a8 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */

  MX_BlueNRG_MS_Init();
 8000d64:	f7ff fd42 	bl	80007ec <MX_BlueNRG_MS_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_BlueNRG_MS_Process();
 8000d68:	f7ff fd90 	bl	800088c <MX_BlueNRG_MS_Process>
 8000d6c:	e7fc      	b.n	8000d68 <main+0x18>
	...

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b094      	sub	sp, #80	; 0x50
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	2230      	movs	r2, #48	; 0x30
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 fb77 	bl	8004472 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <SystemClock_Config+0xd0>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	4a28      	ldr	r2, [pc, #160]	; (8000e40 <SystemClock_Config+0xd0>)
 8000d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da2:	6413      	str	r3, [r2, #64]	; 0x40
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <SystemClock_Config+0xd0>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000db0:	2300      	movs	r3, #0
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <SystemClock_Config+0xd4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dbc:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <SystemClock_Config+0xd4>)
 8000dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <SystemClock_Config+0xd4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd8:	2310      	movs	r3, #16
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de0:	2300      	movs	r3, #0
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000de4:	2310      	movs	r3, #16
 8000de6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000de8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dee:	2304      	movs	r3, #4
 8000df0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000df2:	2307      	movs	r3, #7
 8000df4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df6:	f107 0320 	add.w	r3, r7, #32
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 ff1e 	bl	8001c3c <HAL_RCC_OscConfig>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e06:	f000 f81f 	bl	8000e48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0a:	230f      	movs	r3, #15
 8000e0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	2102      	movs	r1, #2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 f978 	bl	800211c <HAL_RCC_ClockConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e32:	f000 f809 	bl	8000e48 <Error_Handler>
  }
}
 8000e36:	bf00      	nop
 8000e38:	3750      	adds	r7, #80	; 0x50
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40007000 	.word	0x40007000

08000e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e88:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_MspInit+0x4c>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e96:	2007      	movs	r0, #7
 8000e98:	f000 fba6 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 fa62 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <EXTI0_IRQHandler+0x10>)
 8000f0a:	f000 fbdd 	bl	80016c8 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000480 	.word	0x20000480

08000f18 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <BSP_SPI1_Init+0x54>)
 8000f24:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <BSP_SPI1_Init+0x58>)
 8000f26:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <BSP_SPI1_Init+0x5c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	4911      	ldr	r1, [pc, #68]	; (8000f74 <BSP_SPI1_Init+0x5c>)
 8000f30:	600a      	str	r2, [r1, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d114      	bne.n	8000f60 <BSP_SPI1_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <BSP_SPI1_Init+0x54>)
 8000f38:	f001 fcf2 	bl	8002920 <HAL_SPI_GetState>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10e      	bne.n	8000f60 <BSP_SPI1_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI1_MspInit(&hspi1);
 8000f42:	480a      	ldr	r0, [pc, #40]	; (8000f6c <BSP_SPI1_Init+0x54>)
 8000f44:	f000 f87c 	bl	8001040 <SPI1_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d108      	bne.n	8000f60 <BSP_SPI1_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8000f4e:	4807      	ldr	r0, [pc, #28]	; (8000f6c <BSP_SPI1_Init+0x54>)
 8000f50:	f000 f83a 	bl	8000fc8 <MX_SPI1_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d002      	beq.n	8000f60 <BSP_SPI1_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 8000f5a:	f06f 0307 	mvn.w	r3, #7
 8000f5e:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000490 	.word	0x20000490
 8000f70:	40013000 	.word	0x40013000
 8000f74:	20000194 	.word	0x20000194

08000f78 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	4613      	mov	r3, r2
 8000f84:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000f8a:	88fa      	ldrh	r2, [r7, #6]
 8000f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	4613      	mov	r3, r2
 8000f94:	68ba      	ldr	r2, [r7, #8]
 8000f96:	68f9      	ldr	r1, [r7, #12]
 8000f98:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <BSP_SPI1_SendRecv+0x3c>)
 8000f9a:	f001 fb1f 	bl	80025dc <HAL_SPI_TransmitReceive>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <BSP_SPI1_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000fa4:	f06f 0305 	mvn.w	r3, #5
 8000fa8:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8000faa:	697b      	ldr	r3, [r7, #20]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000490 	.word	0x20000490

08000fb8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000fbc:	f000 fa16 	bl	80013ec <HAL_GetTick>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI1;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a19      	ldr	r2, [pc, #100]	; (800103c <MX_SPI1_Init+0x74>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fe0:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001000:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2218      	movs	r2, #24
 8001006:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	220a      	movs	r2, #10
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f001 fa6d 	bl	8002500 <HAL_SPI_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001030:	7bfb      	ldrb	r3, [r7, #15]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40013000 	.word	0x40013000

08001040 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <SPI1_MspInit+0xc4>)
 800104e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001050:	4a2c      	ldr	r2, [pc, #176]	; (8001104 <SPI1_MspInit+0xc4>)
 8001052:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001056:	6453      	str	r3, [r2, #68]	; 0x44
 8001058:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <SPI1_MspInit+0xc4>)
 800105a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	4b26      	ldr	r3, [pc, #152]	; (8001104 <SPI1_MspInit+0xc4>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	4a25      	ldr	r2, [pc, #148]	; (8001104 <SPI1_MspInit+0xc4>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6313      	str	r3, [r2, #48]	; 0x30
 8001074:	4b23      	ldr	r3, [pc, #140]	; (8001104 <SPI1_MspInit+0xc4>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <SPI1_MspInit+0xc4>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	4a1e      	ldr	r2, [pc, #120]	; (8001104 <SPI1_MspInit+0xc4>)
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	6313      	str	r3, [r2, #48]	; 0x30
 8001090:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <SPI1_MspInit+0xc4>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800109c:	2340      	movs	r3, #64	; 0x40
 800109e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80010ac:	2305      	movs	r3, #5
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	4814      	ldr	r0, [pc, #80]	; (8001108 <SPI1_MspInit+0xc8>)
 80010b8:	f000 fb2a 	bl	8001710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80010cc:	2305      	movs	r3, #5
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	480c      	ldr	r0, [pc, #48]	; (8001108 <SPI1_MspInit+0xc8>)
 80010d8:	f000 fb1a 	bl	8001710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80010dc:	2308      	movs	r3, #8
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80010ec:	2305      	movs	r3, #5
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <SPI1_MspInit+0xcc>)
 80010f8:	f000 fb0a 	bl	8001710 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	; 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40023800 	.word	0x40023800
 8001108:	40020000 	.word	0x40020000
 800110c:	40020400 	.word	0x40020400

08001110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001118:	4a14      	ldr	r2, [pc, #80]	; (800116c <_sbrk+0x5c>)
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <_sbrk+0x60>)
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d102      	bne.n	8001132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <_sbrk+0x64>)
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <_sbrk+0x68>)
 8001130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4413      	add	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	429a      	cmp	r2, r3
 800113e:	d207      	bcs.n	8001150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001140:	f003 f962 	bl	8004408 <__errno>
 8001144:	4602      	mov	r2, r0
 8001146:	230c      	movs	r3, #12
 8001148:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800114a:	f04f 33ff 	mov.w	r3, #4294967295
 800114e:	e009      	b.n	8001164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <_sbrk+0x64>)
 8001160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001162:	68fb      	ldr	r3, [r7, #12]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20018000 	.word	0x20018000
 8001170:	00000400 	.word	0x00000400
 8001174:	20000198 	.word	0x20000198
 8001178:	20000540 	.word	0x20000540

0800117c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <SystemInit+0x28>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001186:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <SystemInit+0x28>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SystemInit+0x28>)
 8001192:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001196:	609a      	str	r2, [r3, #8]
#endif
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <MX_USART1_UART_Init+0x50>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_USART1_UART_Init+0x4c>)
 80011e0:	f001 fc58 	bl	8002a94 <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011ea:	f7ff fe2d 	bl	8000e48 <Error_Handler>
  }

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200004e8 	.word	0x200004e8
 80011f8:	40011000 	.word	0x40011000

080011fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a28      	ldr	r2, [pc, #160]	; (80012bc <HAL_UART_MspInit+0xc0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d14a      	bne.n	80012b4 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <HAL_UART_MspInit+0xc4>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a26      	ldr	r2, [pc, #152]	; (80012c0 <HAL_UART_MspInit+0xc4>)
 8001228:	f043 0310 	orr.w	r3, r3, #16
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <HAL_UART_MspInit+0xc4>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <HAL_UART_MspInit+0xc4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <HAL_UART_MspInit+0xc4>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <HAL_UART_MspInit+0xc4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_UART_MspInit+0xc4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <HAL_UART_MspInit+0xc4>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <HAL_UART_MspInit+0xc4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001280:	2303      	movs	r3, #3
 8001282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001284:	2307      	movs	r3, #7
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <HAL_UART_MspInit+0xc8>)
 8001290:	f000 fa3e 	bl	8001710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001294:	2340      	movs	r3, #64	; 0x40
 8001296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a0:	2303      	movs	r3, #3
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012a4:	2307      	movs	r3, #7
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4619      	mov	r1, r3
 80012ae:	4806      	ldr	r0, [pc, #24]	; (80012c8 <HAL_UART_MspInit+0xcc>)
 80012b0:	f000 fa2e 	bl	8001710 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40011000 	.word	0x40011000
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400

080012cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001304 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012d2:	e003      	b.n	80012dc <LoopCopyDataInit>

080012d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012da:	3104      	adds	r1, #4

080012dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012e4:	d3f6      	bcc.n	80012d4 <CopyDataInit>
  ldr  r2, =_sbss
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012e8:	e002      	b.n	80012f0 <LoopFillZerobss>

080012ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012ec:	f842 3b04 	str.w	r3, [r2], #4

080012f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012f4:	d3f9      	bcc.n	80012ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012f6:	f7ff ff41 	bl	800117c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fa:	f003 f88b 	bl	8004414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012fe:	f7ff fd27 	bl	8000d50 <main>
  bx  lr    
 8001302:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001304:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001308:	08004660 	.word	0x08004660
  ldr  r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001310:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001314:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001318:	20000540 	.word	0x20000540

0800131c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC_IRQHandler>
	...

08001320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <HAL_Init+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0d      	ldr	r2, [pc, #52]	; (8001360 <HAL_Init+0x40>)
 800132a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0a      	ldr	r2, [pc, #40]	; (8001360 <HAL_Init+0x40>)
 8001336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800133a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800133c:	4b08      	ldr	r3, [pc, #32]	; (8001360 <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a07      	ldr	r2, [pc, #28]	; (8001360 <HAL_Init+0x40>)
 8001342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001348:	2003      	movs	r0, #3
 800134a:	f000 f94d 	bl	80015e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134e:	2000      	movs	r0, #0
 8001350:	f000 f808 	bl	8001364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001354:	f7ff fd80 	bl	8000e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023c00 	.word	0x40023c00

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_InitTick+0x54>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_InitTick+0x58>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f965 	bl	8001652 <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00e      	b.n	80013b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d80a      	bhi.n	80013ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f000 f92d 	bl	80015fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <HAL_InitTick+0x5c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000004 	.word	0x20000004

080013c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008
 80013e8:	20000528 	.word	0x20000528

080013ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000528 	.word	0x20000528

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff ffee 	bl	80013ec <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_Delay+0x40>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800142a:	bf00      	nop
 800142c:	f7ff ffde 	bl	80013ec <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
  {
  }
}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000008 	.word	0x20000008

08001448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001464:	4013      	ands	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147a:	4a04      	ldr	r2, [pc, #16]	; (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	60d3      	str	r3, [r2, #12]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	f003 0307 	and.w	r3, r3, #7
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	db0b      	blt.n	80014d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	f003 021f 	and.w	r2, r3, #31
 80014c4:	4907      	ldr	r1, [pc, #28]	; (80014e4 <__NVIC_EnableIRQ+0x38>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	2001      	movs	r0, #1
 80014ce:	fa00 f202 	lsl.w	r2, r0, r2
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000e100 	.word	0xe000e100

080014e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	db0a      	blt.n	8001512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	490c      	ldr	r1, [pc, #48]	; (8001534 <__NVIC_SetPriority+0x4c>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	0112      	lsls	r2, r2, #4
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	440b      	add	r3, r1
 800150c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001510:	e00a      	b.n	8001528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4908      	ldr	r1, [pc, #32]	; (8001538 <__NVIC_SetPriority+0x50>)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	3b04      	subs	r3, #4
 8001520:	0112      	lsls	r2, r2, #4
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	440b      	add	r3, r1
 8001526:	761a      	strb	r2, [r3, #24]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000e100 	.word	0xe000e100
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f1c3 0307 	rsb	r3, r3, #7
 8001556:	2b04      	cmp	r3, #4
 8001558:	bf28      	it	cs
 800155a:	2304      	movcs	r3, #4
 800155c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3304      	adds	r3, #4
 8001562:	2b06      	cmp	r3, #6
 8001564:	d902      	bls.n	800156c <NVIC_EncodePriority+0x30>
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3b03      	subs	r3, #3
 800156a:	e000      	b.n	800156e <NVIC_EncodePriority+0x32>
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	f04f 32ff 	mov.w	r2, #4294967295
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43da      	mvns	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	401a      	ands	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001584:	f04f 31ff 	mov.w	r1, #4294967295
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	43d9      	mvns	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	4313      	orrs	r3, r2
         );
}
 8001596:	4618      	mov	r0, r3
 8001598:	3724      	adds	r7, #36	; 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b4:	d301      	bcc.n	80015ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00f      	b.n	80015da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <SysTick_Config+0x40>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3b01      	subs	r3, #1
 80015c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c2:	210f      	movs	r1, #15
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f7ff ff8e 	bl	80014e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <SysTick_Config+0x40>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <SysTick_Config+0x40>)
 80015d4:	2207      	movs	r2, #7
 80015d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	e000e010 	.word	0xe000e010

080015e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff29 	bl	8001448 <__NVIC_SetPriorityGrouping>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	4603      	mov	r3, r0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001610:	f7ff ff3e 	bl	8001490 <__NVIC_GetPriorityGrouping>
 8001614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	6978      	ldr	r0, [r7, #20]
 800161c:	f7ff ff8e 	bl	800153c <NVIC_EncodePriority>
 8001620:	4602      	mov	r2, r0
 8001622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff5d 	bl	80014e8 <__NVIC_SetPriority>
}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff31 	bl	80014ac <__NVIC_EnableIRQ>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffa2 	bl	80015a4 <SysTick_Config>
 8001660:	4603      	mov	r3, r0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800166a:	b480      	push	{r7}
 800166c:	b087      	sub	sp, #28
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	460b      	mov	r3, r1
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800167c:	7afb      	ldrb	r3, [r7, #11]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d103      	bne.n	800168a <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	605a      	str	r2, [r3, #4]
      break;
 8001688:	e002      	b.n	8001690 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	75fb      	strb	r3, [r7, #23]
      break;
 800168e:	bf00      	nop
  }

  return status;
 8001690:	7dfb      	ldrb	r3, [r7, #23]
}
 8001692:	4618      	mov	r0, r3
 8001694:	371c      	adds	r7, #28
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e003      	b.n	80016ba <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80016b8:	2300      	movs	r3, #0
  }
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	2201      	movs	r2, #1
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_EXTI_IRQHandler+0x44>)
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	4013      	ands	r3, r2
 80016e8:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d009      	beq.n	8001704 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <HAL_EXTI_IRQHandler+0x44>)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d002      	beq.n	8001704 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4798      	blx	r3
    }
  }
}
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40013c00 	.word	0x40013c00

08001710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	e159      	b.n	80019e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800172c:	2201      	movs	r2, #1
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	429a      	cmp	r2, r3
 8001746:	f040 8148 	bne.w	80019da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d00b      	beq.n	800176a <HAL_GPIO_Init+0x5a>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d007      	beq.n	800176a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800175e:	2b11      	cmp	r3, #17
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b12      	cmp	r3, #18
 8001768:	d130      	bne.n	80017cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a0:	2201      	movs	r2, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	f003 0201 	and.w	r2, r3, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0xfc>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b12      	cmp	r3, #18
 800180a:	d123      	bne.n	8001854 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	08da      	lsrs	r2, r3, #3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3208      	adds	r2, #8
 8001814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	08da      	lsrs	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3208      	adds	r2, #8
 800184e:	69b9      	ldr	r1, [r7, #24]
 8001850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0203 	and.w	r2, r3, #3
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80a2 	beq.w	80019da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b56      	ldr	r3, [pc, #344]	; (80019f4 <HAL_GPIO_Init+0x2e4>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a55      	ldr	r2, [pc, #340]	; (80019f4 <HAL_GPIO_Init+0x2e4>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b53      	ldr	r3, [pc, #332]	; (80019f4 <HAL_GPIO_Init+0x2e4>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b2:	4a51      	ldr	r2, [pc, #324]	; (80019f8 <HAL_GPIO_Init+0x2e8>)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	220f      	movs	r2, #15
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a48      	ldr	r2, [pc, #288]	; (80019fc <HAL_GPIO_Init+0x2ec>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d019      	beq.n	8001912 <HAL_GPIO_Init+0x202>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a47      	ldr	r2, [pc, #284]	; (8001a00 <HAL_GPIO_Init+0x2f0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d013      	beq.n	800190e <HAL_GPIO_Init+0x1fe>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a46      	ldr	r2, [pc, #280]	; (8001a04 <HAL_GPIO_Init+0x2f4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d00d      	beq.n	800190a <HAL_GPIO_Init+0x1fa>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a45      	ldr	r2, [pc, #276]	; (8001a08 <HAL_GPIO_Init+0x2f8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d007      	beq.n	8001906 <HAL_GPIO_Init+0x1f6>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a44      	ldr	r2, [pc, #272]	; (8001a0c <HAL_GPIO_Init+0x2fc>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d101      	bne.n	8001902 <HAL_GPIO_Init+0x1f2>
 80018fe:	2304      	movs	r3, #4
 8001900:	e008      	b.n	8001914 <HAL_GPIO_Init+0x204>
 8001902:	2307      	movs	r3, #7
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x204>
 8001906:	2303      	movs	r3, #3
 8001908:	e004      	b.n	8001914 <HAL_GPIO_Init+0x204>
 800190a:	2302      	movs	r3, #2
 800190c:	e002      	b.n	8001914 <HAL_GPIO_Init+0x204>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x204>
 8001912:	2300      	movs	r3, #0
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	f002 0203 	and.w	r2, r2, #3
 800191a:	0092      	lsls	r2, r2, #2
 800191c:	4093      	lsls	r3, r2
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001924:	4934      	ldr	r1, [pc, #208]	; (80019f8 <HAL_GPIO_Init+0x2e8>)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001932:	4b37      	ldr	r3, [pc, #220]	; (8001a10 <HAL_GPIO_Init+0x300>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001956:	4a2e      	ldr	r2, [pc, #184]	; (8001a10 <HAL_GPIO_Init+0x300>)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800195c:	4b2c      	ldr	r3, [pc, #176]	; (8001a10 <HAL_GPIO_Init+0x300>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001980:	4a23      	ldr	r2, [pc, #140]	; (8001a10 <HAL_GPIO_Init+0x300>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <HAL_GPIO_Init+0x300>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019aa:	4a19      	ldr	r2, [pc, #100]	; (8001a10 <HAL_GPIO_Init+0x300>)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <HAL_GPIO_Init+0x300>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019d4:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <HAL_GPIO_Init+0x300>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3301      	adds	r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	2b0f      	cmp	r3, #15
 80019e4:	f67f aea2 	bls.w	800172c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019e8:	bf00      	nop
 80019ea:	3724      	adds	r7, #36	; 0x24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40013800 	.word	0x40013800
 80019fc:	40020000 	.word	0x40020000
 8001a00:	40020400 	.word	0x40020400
 8001a04:	40020800 	.word	0x40020800
 8001a08:	40020c00 	.word	0x40020c00
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40013c00 	.word	0x40013c00

08001a14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e0bb      	b.n	8001ba8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a30:	2201      	movs	r2, #1
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	f040 80ab 	bne.w	8001ba2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001a4c:	4a5b      	ldr	r2, [pc, #364]	; (8001bbc <HAL_GPIO_DeInit+0x1a8>)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	089b      	lsrs	r3, r3, #2
 8001a52:	3302      	adds	r3, #2
 8001a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a58:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a53      	ldr	r2, [pc, #332]	; (8001bc0 <HAL_GPIO_DeInit+0x1ac>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d019      	beq.n	8001aaa <HAL_GPIO_DeInit+0x96>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_GPIO_DeInit+0x1b0>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_GPIO_DeInit+0x92>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a51      	ldr	r2, [pc, #324]	; (8001bc8 <HAL_GPIO_DeInit+0x1b4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00d      	beq.n	8001aa2 <HAL_GPIO_DeInit+0x8e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a50      	ldr	r2, [pc, #320]	; (8001bcc <HAL_GPIO_DeInit+0x1b8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_DeInit+0x8a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4f      	ldr	r2, [pc, #316]	; (8001bd0 <HAL_GPIO_DeInit+0x1bc>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d101      	bne.n	8001a9a <HAL_GPIO_DeInit+0x86>
 8001a96:	2304      	movs	r3, #4
 8001a98:	e008      	b.n	8001aac <HAL_GPIO_DeInit+0x98>
 8001a9a:	2307      	movs	r3, #7
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_DeInit+0x98>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e004      	b.n	8001aac <HAL_GPIO_DeInit+0x98>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_DeInit+0x98>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_DeInit+0x98>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	f002 0203 	and.w	r2, r2, #3
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	4093      	lsls	r3, r2
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d132      	bne.n	8001b22 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001abc:	4b45      	ldr	r3, [pc, #276]	; (8001bd4 <HAL_GPIO_DeInit+0x1c0>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	4943      	ldr	r1, [pc, #268]	; (8001bd4 <HAL_GPIO_DeInit+0x1c0>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001aca:	4b42      	ldr	r3, [pc, #264]	; (8001bd4 <HAL_GPIO_DeInit+0x1c0>)
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	4940      	ldr	r1, [pc, #256]	; (8001bd4 <HAL_GPIO_DeInit+0x1c0>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001ad8:	4b3e      	ldr	r3, [pc, #248]	; (8001bd4 <HAL_GPIO_DeInit+0x1c0>)
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	493c      	ldr	r1, [pc, #240]	; (8001bd4 <HAL_GPIO_DeInit+0x1c0>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001ae6:	4b3b      	ldr	r3, [pc, #236]	; (8001bd4 <HAL_GPIO_DeInit+0x1c0>)
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	4939      	ldr	r1, [pc, #228]	; (8001bd4 <HAL_GPIO_DeInit+0x1c0>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	220f      	movs	r2, #15
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001b04:	4a2d      	ldr	r2, [pc, #180]	; (8001bbc <HAL_GPIO_DeInit+0x1a8>)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	43da      	mvns	r2, r3
 8001b14:	4829      	ldr	r0, [pc, #164]	; (8001bbc <HAL_GPIO_DeInit+0x1a8>)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2103      	movs	r1, #3
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	401a      	ands	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	08da      	lsrs	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	08d2      	lsrs	r2, r2, #3
 8001b58:	4019      	ands	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3208      	adds	r2, #8
 8001b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2103      	movs	r1, #3
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	401a      	ands	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	401a      	ands	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2103      	movs	r1, #3
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2b0f      	cmp	r3, #15
 8001bac:	f67f af40 	bls.w	8001a30 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	371c      	adds	r7, #28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	40013800 	.word	0x40013800
 8001bc0:	40020000 	.word	0x40020000
 8001bc4:	40020400 	.word	0x40020400
 8001bc8:	40020800 	.word	0x40020800
 8001bcc:	40020c00 	.word	0x40020c00
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40013c00 	.word	0x40013c00

08001bd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691a      	ldr	r2, [r3, #16]
 8001be8:	887b      	ldrh	r3, [r7, #2]
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	e001      	b.n	8001bfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
 8001c14:	4613      	mov	r3, r2
 8001c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c18:	787b      	ldrb	r3, [r7, #1]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c24:	e003      	b.n	8001c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c26:	887b      	ldrh	r3, [r7, #2]
 8001c28:	041a      	lsls	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	619a      	str	r2, [r3, #24]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e25b      	b.n	8002106 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d075      	beq.n	8001d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c5a:	4ba3      	ldr	r3, [pc, #652]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d00c      	beq.n	8001c80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c66:	4ba0      	ldr	r3, [pc, #640]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d112      	bne.n	8001c98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c72:	4b9d      	ldr	r3, [pc, #628]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c7e:	d10b      	bne.n	8001c98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c80:	4b99      	ldr	r3, [pc, #612]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d05b      	beq.n	8001d44 <HAL_RCC_OscConfig+0x108>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d157      	bne.n	8001d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e236      	b.n	8002106 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca0:	d106      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x74>
 8001ca2:	4b91      	ldr	r3, [pc, #580]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a90      	ldr	r2, [pc, #576]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e01d      	b.n	8001cec <HAL_RCC_OscConfig+0xb0>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x98>
 8001cba:	4b8b      	ldr	r3, [pc, #556]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a8a      	ldr	r2, [pc, #552]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b88      	ldr	r3, [pc, #544]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a87      	ldr	r2, [pc, #540]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e00b      	b.n	8001cec <HAL_RCC_OscConfig+0xb0>
 8001cd4:	4b84      	ldr	r3, [pc, #528]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a83      	ldr	r2, [pc, #524]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b81      	ldr	r3, [pc, #516]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a80      	ldr	r2, [pc, #512]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d013      	beq.n	8001d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fb7a 	bl	80013ec <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cfc:	f7ff fb76 	bl	80013ec <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	; 0x64
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e1fb      	b.n	8002106 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	4b76      	ldr	r3, [pc, #472]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0xc0>
 8001d1a:	e014      	b.n	8001d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fb66 	bl	80013ec <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff fb62 	bl	80013ec <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e1e7      	b.n	8002106 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	4b6c      	ldr	r3, [pc, #432]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0xe8>
 8001d42:	e000      	b.n	8001d46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d063      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d52:	4b65      	ldr	r3, [pc, #404]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00b      	beq.n	8001d76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d5e:	4b62      	ldr	r3, [pc, #392]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d11c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6a:	4b5f      	ldr	r3, [pc, #380]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d116      	bne.n	8001da4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d76:	4b5c      	ldr	r3, [pc, #368]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d005      	beq.n	8001d8e <HAL_RCC_OscConfig+0x152>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d001      	beq.n	8001d8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e1bb      	b.n	8002106 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8e:	4b56      	ldr	r3, [pc, #344]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4952      	ldr	r1, [pc, #328]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da2:	e03a      	b.n	8001e1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d020      	beq.n	8001dee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dac:	4b4f      	ldr	r3, [pc, #316]	; (8001eec <HAL_RCC_OscConfig+0x2b0>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db2:	f7ff fb1b 	bl	80013ec <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff fb17 	bl	80013ec <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e19c      	b.n	8002106 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	4b46      	ldr	r3, [pc, #280]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd8:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4940      	ldr	r1, [pc, #256]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]
 8001dec:	e015      	b.n	8001e1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dee:	4b3f      	ldr	r3, [pc, #252]	; (8001eec <HAL_RCC_OscConfig+0x2b0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff fafa 	bl	80013ec <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfc:	f7ff faf6 	bl	80013ec <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e17b      	b.n	8002106 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d030      	beq.n	8001e88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d016      	beq.n	8001e5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e2e:	4b30      	ldr	r3, [pc, #192]	; (8001ef0 <HAL_RCC_OscConfig+0x2b4>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e34:	f7ff fada 	bl	80013ec <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fad6 	bl	80013ec <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e15b      	b.n	8002106 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4e:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x200>
 8001e5a:	e015      	b.n	8001e88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <HAL_RCC_OscConfig+0x2b4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e62:	f7ff fac3 	bl	80013ec <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6a:	f7ff fabf 	bl	80013ec <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e144      	b.n	8002106 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f0      	bne.n	8001e6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80a0 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10f      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_RCC_OscConfig+0x2b8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d121      	bne.n	8001f16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed2:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <HAL_RCC_OscConfig+0x2b8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a07      	ldr	r2, [pc, #28]	; (8001ef4 <HAL_RCC_OscConfig+0x2b8>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fa85 	bl	80013ec <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	e011      	b.n	8001f0a <HAL_RCC_OscConfig+0x2ce>
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	42470000 	.word	0x42470000
 8001ef0:	42470e80 	.word	0x42470e80
 8001ef4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef8:	f7ff fa78 	bl	80013ec <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e0fd      	b.n	8002106 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0a:	4b81      	ldr	r3, [pc, #516]	; (8002110 <HAL_RCC_OscConfig+0x4d4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d106      	bne.n	8001f2c <HAL_RCC_OscConfig+0x2f0>
 8001f1e:	4b7d      	ldr	r3, [pc, #500]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f22:	4a7c      	ldr	r2, [pc, #496]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6713      	str	r3, [r2, #112]	; 0x70
 8001f2a:	e01c      	b.n	8001f66 <HAL_RCC_OscConfig+0x32a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b05      	cmp	r3, #5
 8001f32:	d10c      	bne.n	8001f4e <HAL_RCC_OscConfig+0x312>
 8001f34:	4b77      	ldr	r3, [pc, #476]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f38:	4a76      	ldr	r2, [pc, #472]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 8001f3a:	f043 0304 	orr.w	r3, r3, #4
 8001f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f40:	4b74      	ldr	r3, [pc, #464]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	4a73      	ldr	r2, [pc, #460]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4c:	e00b      	b.n	8001f66 <HAL_RCC_OscConfig+0x32a>
 8001f4e:	4b71      	ldr	r3, [pc, #452]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f52:	4a70      	ldr	r2, [pc, #448]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5a:	4b6e      	ldr	r3, [pc, #440]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	4a6d      	ldr	r2, [pc, #436]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 8001f60:	f023 0304 	bic.w	r3, r3, #4
 8001f64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d015      	beq.n	8001f9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fa3d 	bl	80013ec <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7ff fa39 	bl	80013ec <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e0bc      	b.n	8002106 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8c:	4b61      	ldr	r3, [pc, #388]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0ee      	beq.n	8001f76 <HAL_RCC_OscConfig+0x33a>
 8001f98:	e014      	b.n	8001fc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9a:	f7ff fa27 	bl	80013ec <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa2:	f7ff fa23 	bl	80013ec <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e0a6      	b.n	8002106 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb8:	4b56      	ldr	r3, [pc, #344]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1ee      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc4:	7dfb      	ldrb	r3, [r7, #23]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d105      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fca:	4b52      	ldr	r3, [pc, #328]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a51      	ldr	r2, [pc, #324]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 8001fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8092 	beq.w	8002104 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fe0:	4b4c      	ldr	r3, [pc, #304]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d05c      	beq.n	80020a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d141      	bne.n	8002078 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff4:	4b48      	ldr	r3, [pc, #288]	; (8002118 <HAL_RCC_OscConfig+0x4dc>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7ff f9f7 	bl	80013ec <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002002:	f7ff f9f3 	bl	80013ec <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e078      	b.n	8002106 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002014:	4b3f      	ldr	r3, [pc, #252]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f0      	bne.n	8002002 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69da      	ldr	r2, [r3, #28]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	019b      	lsls	r3, r3, #6
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	3b01      	subs	r3, #1
 800203a:	041b      	lsls	r3, r3, #16
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	061b      	lsls	r3, r3, #24
 8002044:	4933      	ldr	r1, [pc, #204]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800204a:	4b33      	ldr	r3, [pc, #204]	; (8002118 <HAL_RCC_OscConfig+0x4dc>)
 800204c:	2201      	movs	r2, #1
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff f9cc 	bl	80013ec <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002058:	f7ff f9c8 	bl	80013ec <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e04d      	b.n	8002106 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206a:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x41c>
 8002076:	e045      	b.n	8002104 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_RCC_OscConfig+0x4dc>)
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207e:	f7ff f9b5 	bl	80013ec <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002086:	f7ff f9b1 	bl	80013ec <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e036      	b.n	8002106 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002098:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f0      	bne.n	8002086 <HAL_RCC_OscConfig+0x44a>
 80020a4:	e02e      	b.n	8002104 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e029      	b.n	8002106 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020b2:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_RCC_OscConfig+0x4d8>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d11c      	bne.n	8002100 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d115      	bne.n	8002100 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020da:	4013      	ands	r3, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d10d      	bne.n	8002100 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d106      	bne.n	8002100 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40007000 	.word	0x40007000
 8002114:	40023800 	.word	0x40023800
 8002118:	42470060 	.word	0x42470060

0800211c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0cc      	b.n	80022ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002130:	4b68      	ldr	r3, [pc, #416]	; (80022d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d90c      	bls.n	8002158 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	4b65      	ldr	r3, [pc, #404]	; (80022d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0b8      	b.n	80022ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d020      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002170:	4b59      	ldr	r3, [pc, #356]	; (80022d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	4a58      	ldr	r2, [pc, #352]	; (80022d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800217a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002188:	4b53      	ldr	r3, [pc, #332]	; (80022d8 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4a52      	ldr	r2, [pc, #328]	; (80022d8 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002192:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002194:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	494d      	ldr	r1, [pc, #308]	; (80022d8 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d044      	beq.n	800223c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d107      	bne.n	80021ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	4b47      	ldr	r3, [pc, #284]	; (80022d8 <HAL_RCC_ClockConfig+0x1bc>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d119      	bne.n	80021fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e07f      	b.n	80022ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d003      	beq.n	80021da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d107      	bne.n	80021ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021da:	4b3f      	ldr	r3, [pc, #252]	; (80022d8 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d109      	bne.n	80021fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e06f      	b.n	80022ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ea:	4b3b      	ldr	r3, [pc, #236]	; (80022d8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e067      	b.n	80022ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021fa:	4b37      	ldr	r3, [pc, #220]	; (80022d8 <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f023 0203 	bic.w	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	4934      	ldr	r1, [pc, #208]	; (80022d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	4313      	orrs	r3, r2
 800220a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800220c:	f7ff f8ee 	bl	80013ec <HAL_GetTick>
 8002210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002212:	e00a      	b.n	800222a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002214:	f7ff f8ea 	bl	80013ec <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002222:	4293      	cmp	r3, r2
 8002224:	d901      	bls.n	800222a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e04f      	b.n	80022ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222a:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 020c 	and.w	r2, r3, #12
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	429a      	cmp	r2, r3
 800223a:	d1eb      	bne.n	8002214 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800223c:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <HAL_RCC_ClockConfig+0x1b8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d20c      	bcs.n	8002264 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224a:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <HAL_RCC_ClockConfig+0x1b8>)
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e032      	b.n	80022ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	4916      	ldr	r1, [pc, #88]	; (80022d8 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d009      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	490e      	ldr	r1, [pc, #56]	; (80022d8 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022a2:	f000 f821 	bl	80022e8 <HAL_RCC_GetSysClockFreq>
 80022a6:	4601      	mov	r1, r0
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	5cd3      	ldrb	r3, [r2, r3]
 80022b6:	fa21 f303 	lsr.w	r3, r1, r3
 80022ba:	4a09      	ldr	r2, [pc, #36]	; (80022e0 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_RCC_ClockConfig+0x1c8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff f84e 	bl	8001364 <HAL_InitTick>

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023c00 	.word	0x40023c00
 80022d8:	40023800 	.word	0x40023800
 80022dc:	08004638 	.word	0x08004638
 80022e0:	20000000 	.word	0x20000000
 80022e4:	20000004 	.word	0x20000004

080022e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	2300      	movs	r3, #0
 80022f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022fe:	4b63      	ldr	r3, [pc, #396]	; (800248c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b04      	cmp	r3, #4
 8002308:	d007      	beq.n	800231a <HAL_RCC_GetSysClockFreq+0x32>
 800230a:	2b08      	cmp	r3, #8
 800230c:	d008      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0x38>
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 80b4 	bne.w	800247c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002314:	4b5e      	ldr	r3, [pc, #376]	; (8002490 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002316:	60bb      	str	r3, [r7, #8]
       break;
 8002318:	e0b3      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800231a:	4b5e      	ldr	r3, [pc, #376]	; (8002494 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800231c:	60bb      	str	r3, [r7, #8]
      break;
 800231e:	e0b0      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002320:	4b5a      	ldr	r3, [pc, #360]	; (800248c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002328:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800232a:	4b58      	ldr	r3, [pc, #352]	; (800248c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d04a      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002336:	4b55      	ldr	r3, [pc, #340]	; (800248c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	099b      	lsrs	r3, r3, #6
 800233c:	f04f 0400 	mov.w	r4, #0
 8002340:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	ea03 0501 	and.w	r5, r3, r1
 800234c:	ea04 0602 	and.w	r6, r4, r2
 8002350:	4629      	mov	r1, r5
 8002352:	4632      	mov	r2, r6
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	f04f 0400 	mov.w	r4, #0
 800235c:	0154      	lsls	r4, r2, #5
 800235e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002362:	014b      	lsls	r3, r1, #5
 8002364:	4619      	mov	r1, r3
 8002366:	4622      	mov	r2, r4
 8002368:	1b49      	subs	r1, r1, r5
 800236a:	eb62 0206 	sbc.w	r2, r2, r6
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	f04f 0400 	mov.w	r4, #0
 8002376:	0194      	lsls	r4, r2, #6
 8002378:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800237c:	018b      	lsls	r3, r1, #6
 800237e:	1a5b      	subs	r3, r3, r1
 8002380:	eb64 0402 	sbc.w	r4, r4, r2
 8002384:	f04f 0100 	mov.w	r1, #0
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	00e2      	lsls	r2, r4, #3
 800238e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002392:	00d9      	lsls	r1, r3, #3
 8002394:	460b      	mov	r3, r1
 8002396:	4614      	mov	r4, r2
 8002398:	195b      	adds	r3, r3, r5
 800239a:	eb44 0406 	adc.w	r4, r4, r6
 800239e:	f04f 0100 	mov.w	r1, #0
 80023a2:	f04f 0200 	mov.w	r2, #0
 80023a6:	0262      	lsls	r2, r4, #9
 80023a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80023ac:	0259      	lsls	r1, r3, #9
 80023ae:	460b      	mov	r3, r1
 80023b0:	4614      	mov	r4, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	4621      	mov	r1, r4
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f04f 0400 	mov.w	r4, #0
 80023bc:	461a      	mov	r2, r3
 80023be:	4623      	mov	r3, r4
 80023c0:	f7fd ff10 	bl	80001e4 <__aeabi_uldivmod>
 80023c4:	4603      	mov	r3, r0
 80023c6:	460c      	mov	r4, r1
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	e049      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023cc:	4b2f      	ldr	r3, [pc, #188]	; (800248c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	099b      	lsrs	r3, r3, #6
 80023d2:	f04f 0400 	mov.w	r4, #0
 80023d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	ea03 0501 	and.w	r5, r3, r1
 80023e2:	ea04 0602 	and.w	r6, r4, r2
 80023e6:	4629      	mov	r1, r5
 80023e8:	4632      	mov	r2, r6
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	f04f 0400 	mov.w	r4, #0
 80023f2:	0154      	lsls	r4, r2, #5
 80023f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023f8:	014b      	lsls	r3, r1, #5
 80023fa:	4619      	mov	r1, r3
 80023fc:	4622      	mov	r2, r4
 80023fe:	1b49      	subs	r1, r1, r5
 8002400:	eb62 0206 	sbc.w	r2, r2, r6
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	f04f 0400 	mov.w	r4, #0
 800240c:	0194      	lsls	r4, r2, #6
 800240e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002412:	018b      	lsls	r3, r1, #6
 8002414:	1a5b      	subs	r3, r3, r1
 8002416:	eb64 0402 	sbc.w	r4, r4, r2
 800241a:	f04f 0100 	mov.w	r1, #0
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	00e2      	lsls	r2, r4, #3
 8002424:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002428:	00d9      	lsls	r1, r3, #3
 800242a:	460b      	mov	r3, r1
 800242c:	4614      	mov	r4, r2
 800242e:	195b      	adds	r3, r3, r5
 8002430:	eb44 0406 	adc.w	r4, r4, r6
 8002434:	f04f 0100 	mov.w	r1, #0
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	02a2      	lsls	r2, r4, #10
 800243e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002442:	0299      	lsls	r1, r3, #10
 8002444:	460b      	mov	r3, r1
 8002446:	4614      	mov	r4, r2
 8002448:	4618      	mov	r0, r3
 800244a:	4621      	mov	r1, r4
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f04f 0400 	mov.w	r4, #0
 8002452:	461a      	mov	r2, r3
 8002454:	4623      	mov	r3, r4
 8002456:	f7fd fec5 	bl	80001e4 <__aeabi_uldivmod>
 800245a:	4603      	mov	r3, r0
 800245c:	460c      	mov	r4, r1
 800245e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	3301      	adds	r3, #1
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	60bb      	str	r3, [r7, #8]
      break;
 800247a:	e002      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800247e:	60bb      	str	r3, [r7, #8]
      break;
 8002480:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002482:	68bb      	ldr	r3, [r7, #8]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800248c:	40023800 	.word	0x40023800
 8002490:	00f42400 	.word	0x00f42400
 8002494:	007a1200 	.word	0x007a1200

08002498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <HAL_RCC_GetHCLKFreq+0x14>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	20000000 	.word	0x20000000

080024b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024b4:	f7ff fff0 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024b8:	4601      	mov	r1, r0
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	0a9b      	lsrs	r3, r3, #10
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	4a03      	ldr	r2, [pc, #12]	; (80024d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c6:	5cd3      	ldrb	r3, [r2, r3]
 80024c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40023800 	.word	0x40023800
 80024d4:	08004648 	.word	0x08004648

080024d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024dc:	f7ff ffdc 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024e0:	4601      	mov	r1, r0
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	0b5b      	lsrs	r3, r3, #13
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	4a03      	ldr	r2, [pc, #12]	; (80024fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ee:	5cd3      	ldrb	r3, [r2, r3]
 80024f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40023800 	.word	0x40023800
 80024fc:	08004648 	.word	0x08004648

08002500 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e056      	b.n	80025c0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d106      	bne.n	8002532 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f84b 	bl	80025c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002548:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	ea42 0103 	orr.w	r1, r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	0c1b      	lsrs	r3, r3, #16
 8002590:	f003 0104 	and.w	r1, r3, #4
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	69da      	ldr	r2, [r3, #28]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08c      	sub	sp, #48	; 0x30
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025ea:	2301      	movs	r3, #1
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_SPI_TransmitReceive+0x26>
 80025fe:	2302      	movs	r3, #2
 8002600:	e18a      	b.n	8002918 <HAL_SPI_TransmitReceive+0x33c>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800260a:	f7fe feef 	bl	80013ec <HAL_GetTick>
 800260e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002620:	887b      	ldrh	r3, [r7, #2]
 8002622:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002624:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002628:	2b01      	cmp	r3, #1
 800262a:	d00f      	beq.n	800264c <HAL_SPI_TransmitReceive+0x70>
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002632:	d107      	bne.n	8002644 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d103      	bne.n	8002644 <HAL_SPI_TransmitReceive+0x68>
 800263c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002640:	2b04      	cmp	r3, #4
 8002642:	d003      	beq.n	800264c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002644:	2302      	movs	r3, #2
 8002646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800264a:	e15b      	b.n	8002904 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_SPI_TransmitReceive+0x82>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <HAL_SPI_TransmitReceive+0x82>
 8002658:	887b      	ldrh	r3, [r7, #2]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d103      	bne.n	8002666 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002664:	e14e      	b.n	8002904 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b04      	cmp	r3, #4
 8002670:	d003      	beq.n	800267a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2205      	movs	r2, #5
 8002676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	887a      	ldrh	r2, [r7, #2]
 800268a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	887a      	ldrh	r2, [r7, #2]
 8002690:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	887a      	ldrh	r2, [r7, #2]
 80026a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ba:	2b40      	cmp	r3, #64	; 0x40
 80026bc:	d007      	beq.n	80026ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026d6:	d178      	bne.n	80027ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HAL_SPI_TransmitReceive+0x10a>
 80026e0:	8b7b      	ldrh	r3, [r7, #26]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d166      	bne.n	80027b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	881a      	ldrh	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	1c9a      	adds	r2, r3, #2
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800270a:	e053      	b.n	80027b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b02      	cmp	r3, #2
 8002718:	d11b      	bne.n	8002752 <HAL_SPI_TransmitReceive+0x176>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d016      	beq.n	8002752 <HAL_SPI_TransmitReceive+0x176>
 8002724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002726:	2b01      	cmp	r3, #1
 8002728:	d113      	bne.n	8002752 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	881a      	ldrh	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	1c9a      	adds	r2, r3, #2
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b01      	cmp	r3, #1
 800275e:	d119      	bne.n	8002794 <HAL_SPI_TransmitReceive+0x1b8>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002764:	b29b      	uxth	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d014      	beq.n	8002794 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002774:	b292      	uxth	r2, r2
 8002776:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	1c9a      	adds	r2, r3, #2
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002790:	2301      	movs	r3, #1
 8002792:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002794:	f7fe fe2a 	bl	80013ec <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d807      	bhi.n	80027b4 <HAL_SPI_TransmitReceive+0x1d8>
 80027a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027aa:	d003      	beq.n	80027b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027b2:	e0a7      	b.n	8002904 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1a6      	bne.n	800270c <HAL_SPI_TransmitReceive+0x130>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1a1      	bne.n	800270c <HAL_SPI_TransmitReceive+0x130>
 80027c8:	e07c      	b.n	80028c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_SPI_TransmitReceive+0x1fc>
 80027d2:	8b7b      	ldrh	r3, [r7, #26]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d16b      	bne.n	80028b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	330c      	adds	r3, #12
 80027e2:	7812      	ldrb	r2, [r2, #0]
 80027e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027fe:	e057      	b.n	80028b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b02      	cmp	r3, #2
 800280c:	d11c      	bne.n	8002848 <HAL_SPI_TransmitReceive+0x26c>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d017      	beq.n	8002848 <HAL_SPI_TransmitReceive+0x26c>
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281a:	2b01      	cmp	r3, #1
 800281c:	d114      	bne.n	8002848 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	330c      	adds	r3, #12
 8002828:	7812      	ldrb	r2, [r2, #0]
 800282a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d119      	bne.n	800288a <HAL_SPI_TransmitReceive+0x2ae>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d014      	beq.n	800288a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002886:	2301      	movs	r3, #1
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800288a:	f7fe fdaf 	bl	80013ec <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002896:	429a      	cmp	r2, r3
 8002898:	d803      	bhi.n	80028a2 <HAL_SPI_TransmitReceive+0x2c6>
 800289a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d102      	bne.n	80028a8 <HAL_SPI_TransmitReceive+0x2cc>
 80028a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d103      	bne.n	80028b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80028ae:	e029      	b.n	8002904 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1a2      	bne.n	8002800 <HAL_SPI_TransmitReceive+0x224>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d19d      	bne.n	8002800 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f8a1 	bl	8002a10 <SPI_EndRxTxTransaction>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d006      	beq.n	80028e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80028e0:	e010      	b.n	8002904 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10b      	bne.n	8002902 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	e000      	b.n	8002904 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002902:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002914:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002918:	4618      	mov	r0, r3
 800291a:	3730      	adds	r7, #48	; 0x30
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800292e:	b2db      	uxtb	r3, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800294c:	e04c      	b.n	80029e8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d048      	beq.n	80029e8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002956:	f7fe fd49 	bl	80013ec <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d902      	bls.n	800296c <SPI_WaitFlagStateUntilTimeout+0x30>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d13d      	bne.n	80029e8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800297a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002984:	d111      	bne.n	80029aa <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800298e:	d004      	beq.n	800299a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002998:	d107      	bne.n	80029aa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b2:	d10f      	bne.n	80029d4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e00f      	b.n	8002a08 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	4013      	ands	r3, r2
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d1a3      	bne.n	800294e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <SPI_EndRxTxTransaction+0x7c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <SPI_EndRxTxTransaction+0x80>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0d5b      	lsrs	r3, r3, #21
 8002a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a3a:	d112      	bne.n	8002a62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2200      	movs	r2, #0
 8002a44:	2180      	movs	r1, #128	; 0x80
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f7ff ff78 	bl	800293c <SPI_WaitFlagStateUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d016      	beq.n	8002a80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a56:	f043 0220 	orr.w	r2, r3, #32
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e00f      	b.n	8002a82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a78:	2b80      	cmp	r3, #128	; 0x80
 8002a7a:	d0f2      	beq.n	8002a62 <SPI_EndRxTxTransaction+0x52>
 8002a7c:	e000      	b.n	8002a80 <SPI_EndRxTxTransaction+0x70>
        break;
 8002a7e:	bf00      	nop
  }

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	165e9f81 	.word	0x165e9f81

08002a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e03f      	b.n	8002b26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe fb9e 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2224      	movs	r2, #36	; 0x24
 8002ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f829 	bl	8002b30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b34:	b085      	sub	sp, #20
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002b72:	f023 030c 	bic.w	r3, r3, #12
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	68f9      	ldr	r1, [r7, #12]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699a      	ldr	r2, [r3, #24]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b9e:	f040 818b 	bne.w	8002eb8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4ac1      	ldr	r2, [pc, #772]	; (8002eac <UART_SetConfig+0x37c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d005      	beq.n	8002bb8 <UART_SetConfig+0x88>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4abf      	ldr	r2, [pc, #764]	; (8002eb0 <UART_SetConfig+0x380>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	f040 80bd 	bne.w	8002d32 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bb8:	f7ff fc8e 	bl	80024d8 <HAL_RCC_GetPCLK2Freq>
 8002bbc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	461d      	mov	r5, r3
 8002bc2:	f04f 0600 	mov.w	r6, #0
 8002bc6:	46a8      	mov	r8, r5
 8002bc8:	46b1      	mov	r9, r6
 8002bca:	eb18 0308 	adds.w	r3, r8, r8
 8002bce:	eb49 0409 	adc.w	r4, r9, r9
 8002bd2:	4698      	mov	r8, r3
 8002bd4:	46a1      	mov	r9, r4
 8002bd6:	eb18 0805 	adds.w	r8, r8, r5
 8002bda:	eb49 0906 	adc.w	r9, r9, r6
 8002bde:	f04f 0100 	mov.w	r1, #0
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bf2:	4688      	mov	r8, r1
 8002bf4:	4691      	mov	r9, r2
 8002bf6:	eb18 0005 	adds.w	r0, r8, r5
 8002bfa:	eb49 0106 	adc.w	r1, r9, r6
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	461d      	mov	r5, r3
 8002c04:	f04f 0600 	mov.w	r6, #0
 8002c08:	196b      	adds	r3, r5, r5
 8002c0a:	eb46 0406 	adc.w	r4, r6, r6
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4623      	mov	r3, r4
 8002c12:	f7fd fae7 	bl	80001e4 <__aeabi_uldivmod>
 8002c16:	4603      	mov	r3, r0
 8002c18:	460c      	mov	r4, r1
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4ba5      	ldr	r3, [pc, #660]	; (8002eb4 <UART_SetConfig+0x384>)
 8002c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	461d      	mov	r5, r3
 8002c2c:	f04f 0600 	mov.w	r6, #0
 8002c30:	46a9      	mov	r9, r5
 8002c32:	46b2      	mov	sl, r6
 8002c34:	eb19 0309 	adds.w	r3, r9, r9
 8002c38:	eb4a 040a 	adc.w	r4, sl, sl
 8002c3c:	4699      	mov	r9, r3
 8002c3e:	46a2      	mov	sl, r4
 8002c40:	eb19 0905 	adds.w	r9, r9, r5
 8002c44:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c48:	f04f 0100 	mov.w	r1, #0
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c5c:	4689      	mov	r9, r1
 8002c5e:	4692      	mov	sl, r2
 8002c60:	eb19 0005 	adds.w	r0, r9, r5
 8002c64:	eb4a 0106 	adc.w	r1, sl, r6
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	461d      	mov	r5, r3
 8002c6e:	f04f 0600 	mov.w	r6, #0
 8002c72:	196b      	adds	r3, r5, r5
 8002c74:	eb46 0406 	adc.w	r4, r6, r6
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4623      	mov	r3, r4
 8002c7c:	f7fd fab2 	bl	80001e4 <__aeabi_uldivmod>
 8002c80:	4603      	mov	r3, r0
 8002c82:	460c      	mov	r4, r1
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b8b      	ldr	r3, [pc, #556]	; (8002eb4 <UART_SetConfig+0x384>)
 8002c88:	fba3 1302 	umull	r1, r3, r3, r2
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	2164      	movs	r1, #100	; 0x64
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	3332      	adds	r3, #50	; 0x32
 8002c9a:	4a86      	ldr	r2, [pc, #536]	; (8002eb4 <UART_SetConfig+0x384>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	095b      	lsrs	r3, r3, #5
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ca8:	4498      	add	r8, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	461d      	mov	r5, r3
 8002cae:	f04f 0600 	mov.w	r6, #0
 8002cb2:	46a9      	mov	r9, r5
 8002cb4:	46b2      	mov	sl, r6
 8002cb6:	eb19 0309 	adds.w	r3, r9, r9
 8002cba:	eb4a 040a 	adc.w	r4, sl, sl
 8002cbe:	4699      	mov	r9, r3
 8002cc0:	46a2      	mov	sl, r4
 8002cc2:	eb19 0905 	adds.w	r9, r9, r5
 8002cc6:	eb4a 0a06 	adc.w	sl, sl, r6
 8002cca:	f04f 0100 	mov.w	r1, #0
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cde:	4689      	mov	r9, r1
 8002ce0:	4692      	mov	sl, r2
 8002ce2:	eb19 0005 	adds.w	r0, r9, r5
 8002ce6:	eb4a 0106 	adc.w	r1, sl, r6
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	461d      	mov	r5, r3
 8002cf0:	f04f 0600 	mov.w	r6, #0
 8002cf4:	196b      	adds	r3, r5, r5
 8002cf6:	eb46 0406 	adc.w	r4, r6, r6
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4623      	mov	r3, r4
 8002cfe:	f7fd fa71 	bl	80001e4 <__aeabi_uldivmod>
 8002d02:	4603      	mov	r3, r0
 8002d04:	460c      	mov	r4, r1
 8002d06:	461a      	mov	r2, r3
 8002d08:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <UART_SetConfig+0x384>)
 8002d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	2164      	movs	r1, #100	; 0x64
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	3332      	adds	r3, #50	; 0x32
 8002d1c:	4a65      	ldr	r2, [pc, #404]	; (8002eb4 <UART_SetConfig+0x384>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	f003 0207 	and.w	r2, r3, #7
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4442      	add	r2, r8
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	e26f      	b.n	8003212 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d32:	f7ff fbbd 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
 8002d36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	461d      	mov	r5, r3
 8002d3c:	f04f 0600 	mov.w	r6, #0
 8002d40:	46a8      	mov	r8, r5
 8002d42:	46b1      	mov	r9, r6
 8002d44:	eb18 0308 	adds.w	r3, r8, r8
 8002d48:	eb49 0409 	adc.w	r4, r9, r9
 8002d4c:	4698      	mov	r8, r3
 8002d4e:	46a1      	mov	r9, r4
 8002d50:	eb18 0805 	adds.w	r8, r8, r5
 8002d54:	eb49 0906 	adc.w	r9, r9, r6
 8002d58:	f04f 0100 	mov.w	r1, #0
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d6c:	4688      	mov	r8, r1
 8002d6e:	4691      	mov	r9, r2
 8002d70:	eb18 0005 	adds.w	r0, r8, r5
 8002d74:	eb49 0106 	adc.w	r1, r9, r6
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	461d      	mov	r5, r3
 8002d7e:	f04f 0600 	mov.w	r6, #0
 8002d82:	196b      	adds	r3, r5, r5
 8002d84:	eb46 0406 	adc.w	r4, r6, r6
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	f7fd fa2a 	bl	80001e4 <__aeabi_uldivmod>
 8002d90:	4603      	mov	r3, r0
 8002d92:	460c      	mov	r4, r1
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <UART_SetConfig+0x384>)
 8002d98:	fba3 2302 	umull	r2, r3, r3, r2
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	461d      	mov	r5, r3
 8002da6:	f04f 0600 	mov.w	r6, #0
 8002daa:	46a9      	mov	r9, r5
 8002dac:	46b2      	mov	sl, r6
 8002dae:	eb19 0309 	adds.w	r3, r9, r9
 8002db2:	eb4a 040a 	adc.w	r4, sl, sl
 8002db6:	4699      	mov	r9, r3
 8002db8:	46a2      	mov	sl, r4
 8002dba:	eb19 0905 	adds.w	r9, r9, r5
 8002dbe:	eb4a 0a06 	adc.w	sl, sl, r6
 8002dc2:	f04f 0100 	mov.w	r1, #0
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dd6:	4689      	mov	r9, r1
 8002dd8:	4692      	mov	sl, r2
 8002dda:	eb19 0005 	adds.w	r0, r9, r5
 8002dde:	eb4a 0106 	adc.w	r1, sl, r6
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	461d      	mov	r5, r3
 8002de8:	f04f 0600 	mov.w	r6, #0
 8002dec:	196b      	adds	r3, r5, r5
 8002dee:	eb46 0406 	adc.w	r4, r6, r6
 8002df2:	461a      	mov	r2, r3
 8002df4:	4623      	mov	r3, r4
 8002df6:	f7fd f9f5 	bl	80001e4 <__aeabi_uldivmod>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	460c      	mov	r4, r1
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <UART_SetConfig+0x384>)
 8002e02:	fba3 1302 	umull	r1, r3, r3, r2
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2164      	movs	r1, #100	; 0x64
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	3332      	adds	r3, #50	; 0x32
 8002e14:	4a27      	ldr	r2, [pc, #156]	; (8002eb4 <UART_SetConfig+0x384>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e22:	4498      	add	r8, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	461d      	mov	r5, r3
 8002e28:	f04f 0600 	mov.w	r6, #0
 8002e2c:	46a9      	mov	r9, r5
 8002e2e:	46b2      	mov	sl, r6
 8002e30:	eb19 0309 	adds.w	r3, r9, r9
 8002e34:	eb4a 040a 	adc.w	r4, sl, sl
 8002e38:	4699      	mov	r9, r3
 8002e3a:	46a2      	mov	sl, r4
 8002e3c:	eb19 0905 	adds.w	r9, r9, r5
 8002e40:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e44:	f04f 0100 	mov.w	r1, #0
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e58:	4689      	mov	r9, r1
 8002e5a:	4692      	mov	sl, r2
 8002e5c:	eb19 0005 	adds.w	r0, r9, r5
 8002e60:	eb4a 0106 	adc.w	r1, sl, r6
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	461d      	mov	r5, r3
 8002e6a:	f04f 0600 	mov.w	r6, #0
 8002e6e:	196b      	adds	r3, r5, r5
 8002e70:	eb46 0406 	adc.w	r4, r6, r6
 8002e74:	461a      	mov	r2, r3
 8002e76:	4623      	mov	r3, r4
 8002e78:	f7fd f9b4 	bl	80001e4 <__aeabi_uldivmod>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	460c      	mov	r4, r1
 8002e80:	461a      	mov	r2, r3
 8002e82:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <UART_SetConfig+0x384>)
 8002e84:	fba3 1302 	umull	r1, r3, r3, r2
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	2164      	movs	r1, #100	; 0x64
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	3332      	adds	r3, #50	; 0x32
 8002e96:	4a07      	ldr	r2, [pc, #28]	; (8002eb4 <UART_SetConfig+0x384>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	095b      	lsrs	r3, r3, #5
 8002e9e:	f003 0207 	and.w	r2, r3, #7
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4442      	add	r2, r8
 8002ea8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002eaa:	e1b2      	b.n	8003212 <UART_SetConfig+0x6e2>
 8002eac:	40011000 	.word	0x40011000
 8002eb0:	40011400 	.word	0x40011400
 8002eb4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4ad7      	ldr	r2, [pc, #860]	; (800321c <UART_SetConfig+0x6ec>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d005      	beq.n	8002ece <UART_SetConfig+0x39e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4ad6      	ldr	r2, [pc, #856]	; (8003220 <UART_SetConfig+0x6f0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	f040 80d1 	bne.w	8003070 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ece:	f7ff fb03 	bl	80024d8 <HAL_RCC_GetPCLK2Freq>
 8002ed2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	469a      	mov	sl, r3
 8002ed8:	f04f 0b00 	mov.w	fp, #0
 8002edc:	46d0      	mov	r8, sl
 8002ede:	46d9      	mov	r9, fp
 8002ee0:	eb18 0308 	adds.w	r3, r8, r8
 8002ee4:	eb49 0409 	adc.w	r4, r9, r9
 8002ee8:	4698      	mov	r8, r3
 8002eea:	46a1      	mov	r9, r4
 8002eec:	eb18 080a 	adds.w	r8, r8, sl
 8002ef0:	eb49 090b 	adc.w	r9, r9, fp
 8002ef4:	f04f 0100 	mov.w	r1, #0
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f08:	4688      	mov	r8, r1
 8002f0a:	4691      	mov	r9, r2
 8002f0c:	eb1a 0508 	adds.w	r5, sl, r8
 8002f10:	eb4b 0609 	adc.w	r6, fp, r9
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	f04f 0400 	mov.w	r4, #0
 8002f26:	0094      	lsls	r4, r2, #2
 8002f28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f2c:	008b      	lsls	r3, r1, #2
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4623      	mov	r3, r4
 8002f32:	4628      	mov	r0, r5
 8002f34:	4631      	mov	r1, r6
 8002f36:	f7fd f955 	bl	80001e4 <__aeabi_uldivmod>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	460c      	mov	r4, r1
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4bb8      	ldr	r3, [pc, #736]	; (8003224 <UART_SetConfig+0x6f4>)
 8002f42:	fba3 2302 	umull	r2, r3, r3, r2
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	469b      	mov	fp, r3
 8002f50:	f04f 0c00 	mov.w	ip, #0
 8002f54:	46d9      	mov	r9, fp
 8002f56:	46e2      	mov	sl, ip
 8002f58:	eb19 0309 	adds.w	r3, r9, r9
 8002f5c:	eb4a 040a 	adc.w	r4, sl, sl
 8002f60:	4699      	mov	r9, r3
 8002f62:	46a2      	mov	sl, r4
 8002f64:	eb19 090b 	adds.w	r9, r9, fp
 8002f68:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f6c:	f04f 0100 	mov.w	r1, #0
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f80:	4689      	mov	r9, r1
 8002f82:	4692      	mov	sl, r2
 8002f84:	eb1b 0509 	adds.w	r5, fp, r9
 8002f88:	eb4c 060a 	adc.w	r6, ip, sl
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4619      	mov	r1, r3
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	f04f 0400 	mov.w	r4, #0
 8002f9e:	0094      	lsls	r4, r2, #2
 8002fa0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fa4:	008b      	lsls	r3, r1, #2
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4623      	mov	r3, r4
 8002faa:	4628      	mov	r0, r5
 8002fac:	4631      	mov	r1, r6
 8002fae:	f7fd f919 	bl	80001e4 <__aeabi_uldivmod>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	460c      	mov	r4, r1
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4b9a      	ldr	r3, [pc, #616]	; (8003224 <UART_SetConfig+0x6f4>)
 8002fba:	fba3 1302 	umull	r1, r3, r3, r2
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	2164      	movs	r1, #100	; 0x64
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	3332      	adds	r3, #50	; 0x32
 8002fcc:	4a95      	ldr	r2, [pc, #596]	; (8003224 <UART_SetConfig+0x6f4>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fd8:	4498      	add	r8, r3
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	469b      	mov	fp, r3
 8002fde:	f04f 0c00 	mov.w	ip, #0
 8002fe2:	46d9      	mov	r9, fp
 8002fe4:	46e2      	mov	sl, ip
 8002fe6:	eb19 0309 	adds.w	r3, r9, r9
 8002fea:	eb4a 040a 	adc.w	r4, sl, sl
 8002fee:	4699      	mov	r9, r3
 8002ff0:	46a2      	mov	sl, r4
 8002ff2:	eb19 090b 	adds.w	r9, r9, fp
 8002ff6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ffa:	f04f 0100 	mov.w	r1, #0
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003006:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800300a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800300e:	4689      	mov	r9, r1
 8003010:	4692      	mov	sl, r2
 8003012:	eb1b 0509 	adds.w	r5, fp, r9
 8003016:	eb4c 060a 	adc.w	r6, ip, sl
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4619      	mov	r1, r3
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	f04f 0400 	mov.w	r4, #0
 800302c:	0094      	lsls	r4, r2, #2
 800302e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003032:	008b      	lsls	r3, r1, #2
 8003034:	461a      	mov	r2, r3
 8003036:	4623      	mov	r3, r4
 8003038:	4628      	mov	r0, r5
 800303a:	4631      	mov	r1, r6
 800303c:	f7fd f8d2 	bl	80001e4 <__aeabi_uldivmod>
 8003040:	4603      	mov	r3, r0
 8003042:	460c      	mov	r4, r1
 8003044:	461a      	mov	r2, r3
 8003046:	4b77      	ldr	r3, [pc, #476]	; (8003224 <UART_SetConfig+0x6f4>)
 8003048:	fba3 1302 	umull	r1, r3, r3, r2
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	2164      	movs	r1, #100	; 0x64
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	3332      	adds	r3, #50	; 0x32
 800305a:	4a72      	ldr	r2, [pc, #456]	; (8003224 <UART_SetConfig+0x6f4>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	f003 020f 	and.w	r2, r3, #15
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4442      	add	r2, r8
 800306c:	609a      	str	r2, [r3, #8]
 800306e:	e0d0      	b.n	8003212 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003070:	f7ff fa1e 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
 8003074:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	469a      	mov	sl, r3
 800307a:	f04f 0b00 	mov.w	fp, #0
 800307e:	46d0      	mov	r8, sl
 8003080:	46d9      	mov	r9, fp
 8003082:	eb18 0308 	adds.w	r3, r8, r8
 8003086:	eb49 0409 	adc.w	r4, r9, r9
 800308a:	4698      	mov	r8, r3
 800308c:	46a1      	mov	r9, r4
 800308e:	eb18 080a 	adds.w	r8, r8, sl
 8003092:	eb49 090b 	adc.w	r9, r9, fp
 8003096:	f04f 0100 	mov.w	r1, #0
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030aa:	4688      	mov	r8, r1
 80030ac:	4691      	mov	r9, r2
 80030ae:	eb1a 0508 	adds.w	r5, sl, r8
 80030b2:	eb4b 0609 	adc.w	r6, fp, r9
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4619      	mov	r1, r3
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	f04f 0400 	mov.w	r4, #0
 80030c8:	0094      	lsls	r4, r2, #2
 80030ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030ce:	008b      	lsls	r3, r1, #2
 80030d0:	461a      	mov	r2, r3
 80030d2:	4623      	mov	r3, r4
 80030d4:	4628      	mov	r0, r5
 80030d6:	4631      	mov	r1, r6
 80030d8:	f7fd f884 	bl	80001e4 <__aeabi_uldivmod>
 80030dc:	4603      	mov	r3, r0
 80030de:	460c      	mov	r4, r1
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b50      	ldr	r3, [pc, #320]	; (8003224 <UART_SetConfig+0x6f4>)
 80030e4:	fba3 2302 	umull	r2, r3, r3, r2
 80030e8:	095b      	lsrs	r3, r3, #5
 80030ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	469b      	mov	fp, r3
 80030f2:	f04f 0c00 	mov.w	ip, #0
 80030f6:	46d9      	mov	r9, fp
 80030f8:	46e2      	mov	sl, ip
 80030fa:	eb19 0309 	adds.w	r3, r9, r9
 80030fe:	eb4a 040a 	adc.w	r4, sl, sl
 8003102:	4699      	mov	r9, r3
 8003104:	46a2      	mov	sl, r4
 8003106:	eb19 090b 	adds.w	r9, r9, fp
 800310a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800310e:	f04f 0100 	mov.w	r1, #0
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800311a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800311e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003122:	4689      	mov	r9, r1
 8003124:	4692      	mov	sl, r2
 8003126:	eb1b 0509 	adds.w	r5, fp, r9
 800312a:	eb4c 060a 	adc.w	r6, ip, sl
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4619      	mov	r1, r3
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	f04f 0400 	mov.w	r4, #0
 8003140:	0094      	lsls	r4, r2, #2
 8003142:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003146:	008b      	lsls	r3, r1, #2
 8003148:	461a      	mov	r2, r3
 800314a:	4623      	mov	r3, r4
 800314c:	4628      	mov	r0, r5
 800314e:	4631      	mov	r1, r6
 8003150:	f7fd f848 	bl	80001e4 <__aeabi_uldivmod>
 8003154:	4603      	mov	r3, r0
 8003156:	460c      	mov	r4, r1
 8003158:	461a      	mov	r2, r3
 800315a:	4b32      	ldr	r3, [pc, #200]	; (8003224 <UART_SetConfig+0x6f4>)
 800315c:	fba3 1302 	umull	r1, r3, r3, r2
 8003160:	095b      	lsrs	r3, r3, #5
 8003162:	2164      	movs	r1, #100	; 0x64
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	3332      	adds	r3, #50	; 0x32
 800316e:	4a2d      	ldr	r2, [pc, #180]	; (8003224 <UART_SetConfig+0x6f4>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800317a:	4498      	add	r8, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	469b      	mov	fp, r3
 8003180:	f04f 0c00 	mov.w	ip, #0
 8003184:	46d9      	mov	r9, fp
 8003186:	46e2      	mov	sl, ip
 8003188:	eb19 0309 	adds.w	r3, r9, r9
 800318c:	eb4a 040a 	adc.w	r4, sl, sl
 8003190:	4699      	mov	r9, r3
 8003192:	46a2      	mov	sl, r4
 8003194:	eb19 090b 	adds.w	r9, r9, fp
 8003198:	eb4a 0a0c 	adc.w	sl, sl, ip
 800319c:	f04f 0100 	mov.w	r1, #0
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031b0:	4689      	mov	r9, r1
 80031b2:	4692      	mov	sl, r2
 80031b4:	eb1b 0509 	adds.w	r5, fp, r9
 80031b8:	eb4c 060a 	adc.w	r6, ip, sl
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4619      	mov	r1, r3
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	f04f 0400 	mov.w	r4, #0
 80031ce:	0094      	lsls	r4, r2, #2
 80031d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031d4:	008b      	lsls	r3, r1, #2
 80031d6:	461a      	mov	r2, r3
 80031d8:	4623      	mov	r3, r4
 80031da:	4628      	mov	r0, r5
 80031dc:	4631      	mov	r1, r6
 80031de:	f7fd f801 	bl	80001e4 <__aeabi_uldivmod>
 80031e2:	4603      	mov	r3, r0
 80031e4:	460c      	mov	r4, r1
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <UART_SetConfig+0x6f4>)
 80031ea:	fba3 1302 	umull	r1, r3, r3, r2
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	2164      	movs	r1, #100	; 0x64
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	3332      	adds	r3, #50	; 0x32
 80031fc:	4a09      	ldr	r2, [pc, #36]	; (8003224 <UART_SetConfig+0x6f4>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	f003 020f 	and.w	r2, r3, #15
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4442      	add	r2, r8
 800320e:	609a      	str	r2, [r3, #8]
}
 8003210:	e7ff      	b.n	8003212 <UART_SetConfig+0x6e2>
 8003212:	bf00      	nop
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800321c:	40011000 	.word	0x40011000
 8003220:	40011400 	.word	0x40011400
 8003224:	51eb851f 	.word	0x51eb851f

08003228 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08c      	sub	sp, #48	; 0x30
 800322c:	af00      	add	r7, sp, #0
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	4603      	mov	r3, r0
 8003232:	71fb      	strb	r3, [r7, #7]
 8003234:	460b      	mov	r3, r1
 8003236:	71bb      	strb	r3, [r7, #6]
 8003238:	4613      	mov	r3, r2
 800323a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8003240:	79bb      	ldrb	r3, [r7, #6]
 8003242:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8003244:	797b      	ldrb	r3, [r7, #5]
 8003246:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003248:	f107 030c 	add.w	r3, r7, #12
 800324c:	2207      	movs	r2, #7
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f001 f90e 	bl	8004472 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003256:	f107 0318 	add.w	r3, r7, #24
 800325a:	2218      	movs	r2, #24
 800325c:	2100      	movs	r1, #0
 800325e:	4618      	mov	r0, r3
 8003260:	f001 f907 	bl	8004472 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003264:	233f      	movs	r3, #63	; 0x3f
 8003266:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8003268:	238a      	movs	r3, #138	; 0x8a
 800326a:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8003272:	2303      	movs	r3, #3
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8003276:	f107 030c 	add.w	r3, r7, #12
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800327c:	2307      	movs	r3, #7
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003280:	f107 0318 	add.w	r3, r7, #24
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fe26 	bl	8003ed8 <hci_send_req>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	da01      	bge.n	8003296 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8003292:	23ff      	movs	r3, #255	; 0xff
 8003294:	e014      	b.n	80032c0 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8003296:	7b3b      	ldrb	r3, [r7, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800329c:	7b3b      	ldrb	r3, [r7, #12]
 800329e:	e00f      	b.n	80032c0 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 80032a0:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80032aa:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b2:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80032b4:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032bc:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3730      	adds	r7, #48	; 0x30
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80032c8:	b590      	push	{r4, r7, lr}
 80032ca:	b095      	sub	sp, #84	; 0x54
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4604      	mov	r4, r0
 80032d0:	4608      	mov	r0, r1
 80032d2:	4611      	mov	r1, r2
 80032d4:	461a      	mov	r2, r3
 80032d6:	4623      	mov	r3, r4
 80032d8:	71fb      	strb	r3, [r7, #7]
 80032da:	4603      	mov	r3, r0
 80032dc:	80bb      	strh	r3, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	807b      	strh	r3, [r7, #2]
 80032e2:	4613      	mov	r3, r2
 80032e4:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80032ec:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80032f0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80032f4:	4413      	add	r3, r2
 80032f6:	330e      	adds	r3, #14
 80032f8:	2b28      	cmp	r3, #40	; 0x28
 80032fa:	d901      	bls.n	8003300 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 80032fc:	2342      	movs	r3, #66	; 0x42
 80032fe:	e0ce      	b.n	800349e <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 8003300:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003304:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003308:	4413      	add	r3, r2
 800330a:	79fa      	ldrb	r2, [r7, #7]
 800330c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8003310:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003314:	3301      	adds	r3, #1
 8003316:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800331a:	88bb      	ldrh	r3, [r7, #4]
 800331c:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800331e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003322:	f107 0208 	add.w	r2, r7, #8
 8003326:	4413      	add	r3, r2
 8003328:	88ba      	ldrh	r2, [r7, #4]
 800332a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800332c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003330:	3302      	adds	r3, #2
 8003332:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8003336:	887b      	ldrh	r3, [r7, #2]
 8003338:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800333a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800333e:	f107 0208 	add.w	r2, r7, #8
 8003342:	4413      	add	r3, r2
 8003344:	887a      	ldrh	r2, [r7, #2]
 8003346:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8003348:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800334c:	3302      	adds	r3, #2
 800334e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8003352:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003356:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800335a:	4413      	add	r3, r2
 800335c:	79ba      	ldrb	r2, [r7, #6]
 800335e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8003362:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003366:	3301      	adds	r3, #1
 8003368:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800336c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003370:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003374:	4413      	add	r3, r2
 8003376:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800337a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800337e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003382:	3301      	adds	r3, #1
 8003384:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8003388:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800338c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003390:	4413      	add	r3, r2
 8003392:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8003396:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800339a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800339e:	3301      	adds	r3, #1
 80033a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80033a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80033a8:	f107 0208 	add.w	r2, r7, #8
 80033ac:	4413      	add	r3, r2
 80033ae:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80033b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033b4:	4618      	mov	r0, r3
 80033b6:	f001 f851 	bl	800445c <memcpy>
  indx +=  LocalNameLen;
 80033ba:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80033be:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80033c2:	4413      	add	r3, r2
 80033c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 80033c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80033cc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80033d0:	4413      	add	r3, r2
 80033d2:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80033d6:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80033da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80033de:	3301      	adds	r3, #1
 80033e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80033e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80033e8:	f107 0208 	add.w	r2, r7, #8
 80033ec:	4413      	add	r3, r2
 80033ee:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80033f2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80033f4:	4618      	mov	r0, r3
 80033f6:	f001 f831 	bl	800445c <memcpy>
  indx +=  ServiceUUIDLen;  
 80033fa:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80033fe:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8003402:	4413      	add	r3, r2
 8003404:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8003408:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800340c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8003410:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003414:	f107 0208 	add.w	r2, r7, #8
 8003418:	4413      	add	r3, r2
 800341a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800341e:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8003420:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003424:	3302      	adds	r3, #2
 8003426:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800342a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800342e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8003432:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003436:	f107 0208 	add.w	r2, r7, #8
 800343a:	4413      	add	r3, r2
 800343c:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8003440:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8003442:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003446:	3302      	adds	r3, #2
 8003448:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800344c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003450:	2218      	movs	r2, #24
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f001 f80c 	bl	8004472 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800345a:	233f      	movs	r3, #63	; 0x3f
 800345c:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800345e:	2383      	movs	r3, #131	; 0x83
 8003460:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8003462:	f107 0308 	add.w	r3, r7, #8
 8003466:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8003468:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800346c:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800346e:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8003472:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8003474:	2301      	movs	r3, #1
 8003476:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8003478:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800347c:	2100      	movs	r1, #0
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fd2a 	bl	8003ed8 <hci_send_req>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	da01      	bge.n	800348e <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 800348a:	23ff      	movs	r3, #255	; 0xff
 800348c:	e007      	b.n	800349e <aci_gap_set_discoverable+0x1d6>

  if (status) {
 800348e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <aci_gap_set_discoverable+0x1d4>
    return status;
 8003496:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800349a:	e000      	b.n	800349e <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3754      	adds	r7, #84	; 0x54
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd90      	pop	{r4, r7, pc}

080034a6 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b088      	sub	sp, #32
 80034aa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80034ac:	f107 0308 	add.w	r3, r7, #8
 80034b0:	2218      	movs	r2, #24
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 ffdc 	bl	8004472 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80034ba:	233f      	movs	r3, #63	; 0x3f
 80034bc:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 80034be:	f240 1301 	movw	r3, #257	; 0x101
 80034c2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80034c4:	1dfb      	adds	r3, r7, #7
 80034c6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80034c8:	2301      	movs	r3, #1
 80034ca:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80034cc:	f107 0308 	add.w	r3, r7, #8
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fd00 	bl	8003ed8 <hci_send_req>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	da01      	bge.n	80034e2 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 80034de:	23ff      	movs	r3, #255	; 0xff
 80034e0:	e000      	b.n	80034e4 <aci_gatt_init+0x3e>

  return status;
 80034e2:	79fb      	ldrb	r3, [r7, #7]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3720      	adds	r7, #32
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b090      	sub	sp, #64	; 0x40
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6039      	str	r1, [r7, #0]
 80034f4:	4611      	mov	r1, r2
 80034f6:	461a      	mov	r2, r3
 80034f8:	4603      	mov	r3, r0
 80034fa:	71fb      	strb	r3, [r7, #7]
 80034fc:	460b      	mov	r3, r1
 80034fe:	71bb      	strb	r3, [r7, #6]
 8003500:	4613      	mov	r3, r2
 8003502:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800350a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800350e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003512:	4413      	add	r3, r2
 8003514:	79fa      	ldrb	r2, [r7, #7]
 8003516:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800351a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800351e:	3301      	adds	r3, #1
 8003520:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d103      	bne.n	8003532 <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 800352a:	2302      	movs	r3, #2
 800352c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003530:	e002      	b.n	8003538 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 8003532:	2310      	movs	r3, #16
 8003534:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8003538:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800353c:	f107 020c 	add.w	r2, r7, #12
 8003540:	4413      	add	r3, r2
 8003542:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003546:	6839      	ldr	r1, [r7, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f000 ff87 	bl	800445c <memcpy>
  indx +=  uuid_len;
 800354e:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8003552:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003556:	4413      	add	r3, r2
 8003558:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800355c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003560:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003564:	4413      	add	r3, r2
 8003566:	79ba      	ldrb	r2, [r7, #6]
 8003568:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800356c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003570:	3301      	adds	r3, #1
 8003572:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8003576:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800357a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800357e:	4413      	add	r3, r2
 8003580:	797a      	ldrb	r2, [r7, #5]
 8003582:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8003586:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800358a:	3301      	adds	r3, #1
 800358c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003590:	f107 0320 	add.w	r3, r7, #32
 8003594:	2203      	movs	r2, #3
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f000 ff6a 	bl	8004472 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800359e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a2:	2218      	movs	r2, #24
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 ff63 	bl	8004472 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80035ac:	233f      	movs	r3, #63	; 0x3f
 80035ae:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 80035b0:	f44f 7381 	mov.w	r3, #258	; 0x102
 80035b4:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 80035b6:	f107 030c 	add.w	r3, r7, #12
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 80035bc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80035c0:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 80035c2:	f107 0320 	add.w	r3, r7, #32
 80035c6:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80035c8:	2303      	movs	r3, #3
 80035ca:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80035cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d0:	2100      	movs	r1, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fc80 	bl	8003ed8 <hci_send_req>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	da01      	bge.n	80035e2 <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 80035de:	23ff      	movs	r3, #255	; 0xff
 80035e0:	e00c      	b.n	80035fc <aci_gatt_add_serv+0x110>

  if (resp.status) {
 80035e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <aci_gatt_add_serv+0x104>
    return resp.status;
 80035ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80035ee:	e005      	b.n	80035fc <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 80035f0:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f8:	801a      	strh	r2, [r3, #0]

  return 0;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3740      	adds	r7, #64	; 0x40
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b092      	sub	sp, #72	; 0x48
 8003608:	af00      	add	r7, sp, #0
 800360a:	603a      	str	r2, [r7, #0]
 800360c:	461a      	mov	r2, r3
 800360e:	4603      	mov	r3, r0
 8003610:	80fb      	strh	r3, [r7, #6]
 8003612:	460b      	mov	r3, r1
 8003614:	717b      	strb	r3, [r7, #5]
 8003616:	4613      	mov	r3, r2
 8003618:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8003624:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003628:	f107 020c 	add.w	r2, r7, #12
 800362c:	4413      	add	r3, r2
 800362e:	88fa      	ldrh	r2, [r7, #6]
 8003630:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8003632:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003636:	3302      	adds	r3, #2
 8003638:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800363c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003640:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003644:	4413      	add	r3, r2
 8003646:	797a      	ldrb	r2, [r7, #5]
 8003648:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800364c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003650:	3301      	adds	r3, #1
 8003652:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8003656:	797b      	ldrb	r3, [r7, #5]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d103      	bne.n	8003664 <aci_gatt_add_char+0x60>
    uuid_len = 2;
 800365c:	2302      	movs	r3, #2
 800365e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003662:	e002      	b.n	800366a <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 8003664:	2310      	movs	r3, #16
 8003666:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800366a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800366e:	f107 020c 	add.w	r2, r7, #12
 8003672:	4413      	add	r3, r2
 8003674:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003678:	6839      	ldr	r1, [r7, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f000 feee 	bl	800445c <memcpy>
  indx +=  uuid_len;
 8003680:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8003684:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003688:	4413      	add	r3, r2
 800368a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800368e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003692:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003696:	4413      	add	r3, r2
 8003698:	793a      	ldrb	r2, [r7, #4]
 800369a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800369e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036a2:	3301      	adds	r3, #1
 80036a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 80036a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036b0:	4413      	add	r3, r2
 80036b2:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80036b6:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80036ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036be:	3301      	adds	r3, #1
 80036c0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 80036c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036cc:	4413      	add	r3, r2
 80036ce:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80036d2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80036d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036da:	3301      	adds	r3, #1
 80036dc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 80036e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036e8:	4413      	add	r3, r2
 80036ea:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80036ee:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80036f2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036f6:	3301      	adds	r3, #1
 80036f8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 80036fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003700:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003704:	4413      	add	r3, r2
 8003706:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800370a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800370e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003712:	3301      	adds	r3, #1
 8003714:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 8003718:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800371c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003720:	4413      	add	r3, r2
 8003722:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8003726:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800372a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800372e:	3301      	adds	r3, #1
 8003730:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003734:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003738:	2203      	movs	r2, #3
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fe98 	bl	8004472 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003746:	2218      	movs	r2, #24
 8003748:	2100      	movs	r1, #0
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fe91 	bl	8004472 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003750:	233f      	movs	r3, #63	; 0x3f
 8003752:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8003754:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003758:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800375a:	f107 030c 	add.w	r3, r7, #12
 800375e:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 8003760:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003764:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8003766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800376a:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800376c:	2303      	movs	r3, #3
 800376e:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8003770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fbae 	bl	8003ed8 <hci_send_req>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	da01      	bge.n	8003786 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 8003782:	23ff      	movs	r3, #255	; 0xff
 8003784:	e00c      	b.n	80037a0 <aci_gatt_add_char+0x19c>

  if (resp.status) {
 8003786:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <aci_gatt_add_char+0x190>
    return resp.status;
 800378e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003792:	e005      	b.n	80037a0 <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 8003794:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8003798:	b29a      	uxth	r2, r3
 800379a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800379c:	801a      	strh	r2, [r3, #0]

  return 0;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3748      	adds	r7, #72	; 0x48
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <aci_gatt_add_char_desc>:
                                  uint8_t accPermissions,
                                  uint8_t gattEvtMask,
                                  uint8_t encryKeySize,
                                  uint8_t isVariable,
                                  uint16_t* descHandle)                     
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b0ac      	sub	sp, #176	; 0xb0
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	607b      	str	r3, [r7, #4]
 80037b0:	4603      	mov	r3, r0
 80037b2:	81fb      	strh	r3, [r7, #14]
 80037b4:	460b      	mov	r3, r1
 80037b6:	81bb      	strh	r3, [r7, #12]
 80037b8:	4613      	mov	r3, r2
 80037ba:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  gatt_add_char_desc_rp resp;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80037bc:	2300      	movs	r3, #0
 80037be:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
    
  serviceHandle = htobs(serviceHandle);
 80037c2:	89fb      	ldrh	r3, [r7, #14]
 80037c4:	81fb      	strh	r3, [r7, #14]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 80037c6:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80037ca:	f107 0210 	add.w	r2, r7, #16
 80037ce:	4413      	add	r3, r2
 80037d0:	89fa      	ldrh	r2, [r7, #14]
 80037d2:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80037d4:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80037d8:	3302      	adds	r3, #2
 80037da:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
    
  charHandle = htobs(charHandle);
 80037de:	89bb      	ldrh	r3, [r7, #12]
 80037e0:	81bb      	strh	r3, [r7, #12]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80037e2:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80037e6:	f107 0210 	add.w	r2, r7, #16
 80037ea:	4413      	add	r3, r2
 80037ec:	89ba      	ldrh	r2, [r7, #12]
 80037ee:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80037f0:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80037f4:	3302      	adds	r3, #2
 80037f6:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
    
  buffer[indx] = descUuidType;
 80037fa:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80037fe:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003802:	4413      	add	r3, r2
 8003804:	7afa      	ldrb	r2, [r7, #11]
 8003806:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800380a:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800380e:	3301      	adds	r3, #1
 8003810:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
    
  if(descUuidType == UUID_TYPE_16){
 8003814:	7afb      	ldrb	r3, [r7, #11]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d103      	bne.n	8003822 <aci_gatt_add_char_desc+0x7a>
    uuid_len = 2;
 800381a:	2302      	movs	r3, #2
 800381c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8003820:	e002      	b.n	8003828 <aci_gatt_add_char_desc+0x80>
  }
  else {
    uuid_len = 16;
 8003822:	2310      	movs	r3, #16
 8003824:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
  }        
  BLUENRG_memcpy(buffer + indx, uuid, uuid_len);
 8003828:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800382c:	f107 0210 	add.w	r2, r7, #16
 8003830:	4413      	add	r3, r2
 8003832:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fe0f 	bl	800445c <memcpy>
  indx +=  uuid_len;
 800383e:	f897 20ae 	ldrb.w	r2, [r7, #174]	; 0xae
 8003842:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8003846:	4413      	add	r3, r2
 8003848:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
    
  buffer[indx] = descValueMaxLen;
 800384c:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8003850:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003854:	4413      	add	r3, r2
 8003856:	f897 20b8 	ldrb.w	r2, [r7, #184]	; 0xb8
 800385a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800385e:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8003862:	3301      	adds	r3, #1
 8003864:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
    
  buffer[indx] = descValueLen;
 8003868:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800386c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003870:	4413      	add	r3, r2
 8003872:	f897 20bc 	ldrb.w	r2, [r7, #188]	; 0xbc
 8003876:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800387a:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800387e:	3301      	adds	r3, #1
 8003880:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae

  if ((descValueLen+indx+5) > HCI_MAX_PAYLOAD_SIZE)
 8003884:	f897 20bc 	ldrb.w	r2, [r7, #188]	; 0xbc
 8003888:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800388c:	4413      	add	r3, r2
 800388e:	3305      	adds	r3, #5
 8003890:	2b80      	cmp	r3, #128	; 0x80
 8003892:	dd01      	ble.n	8003898 <aci_gatt_add_char_desc+0xf0>
    return BLE_STATUS_INVALID_PARAMS;
 8003894:	2342      	movs	r3, #66	; 0x42
 8003896:	e095      	b.n	80039c4 <aci_gatt_add_char_desc+0x21c>
  
  BLUENRG_memcpy(buffer + indx, descValue, descValueLen);
 8003898:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800389c:	f107 0210 	add.w	r2, r7, #16
 80038a0:	4413      	add	r3, r2
 80038a2:	f897 20bc 	ldrb.w	r2, [r7, #188]	; 0xbc
 80038a6:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fdd6 	bl	800445c <memcpy>
  indx += descValueLen;
 80038b0:	f897 20ae 	ldrb.w	r2, [r7, #174]	; 0xae
 80038b4:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80038b8:	4413      	add	r3, r2
 80038ba:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
    
  buffer[indx] = secPermissions;
 80038be:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80038c2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80038c6:	4413      	add	r3, r2
 80038c8:	f897 20c4 	ldrb.w	r2, [r7, #196]	; 0xc4
 80038cc:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80038d0:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80038d4:	3301      	adds	r3, #1
 80038d6:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
    
  buffer[indx] = accPermissions;
 80038da:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80038de:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80038e2:	4413      	add	r3, r2
 80038e4:	f897 20c8 	ldrb.w	r2, [r7, #200]	; 0xc8
 80038e8:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80038ec:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80038f0:	3301      	adds	r3, #1
 80038f2:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
    
  buffer[indx] = gattEvtMask;
 80038f6:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80038fa:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80038fe:	4413      	add	r3, r2
 8003900:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
 8003904:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8003908:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800390c:	3301      	adds	r3, #1
 800390e:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
    
  buffer[indx] = encryKeySize;
 8003912:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8003916:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800391a:	4413      	add	r3, r2
 800391c:	f897 20d0 	ldrb.w	r2, [r7, #208]	; 0xd0
 8003920:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8003924:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8003928:	3301      	adds	r3, #1
 800392a:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
    
  buffer[indx] = isVariable;
 800392e:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8003932:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8003936:	4413      	add	r3, r2
 8003938:	f897 20d4 	ldrb.w	r2, [r7, #212]	; 0xd4
 800393c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8003940:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8003944:	3301      	adds	r3, #1
 8003946:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800394a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800394e:	2203      	movs	r2, #3
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fd8d 	bl	8004472 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003958:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800395c:	2218      	movs	r2, #24
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f000 fd86 	bl	8004472 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003966:	233f      	movs	r3, #63	; 0x3f
 8003968:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  rq.ocf = OCF_GATT_ADD_CHAR_DESC;
 800396c:	f240 1305 	movw	r3, #261	; 0x105
 8003970:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  rq.cparam = (void *)buffer;
 8003974:	f107 0310 	add.w	r3, r7, #16
 8003978:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.clen = indx;
 800397c:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 8003980:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.rparam = &resp;
 8003984:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003988:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rlen = GATT_ADD_CHAR_DESC_RP_SIZE;
 800398c:	2303      	movs	r3, #3
 800398e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (hci_send_req(&rq, FALSE) < 0)
 8003992:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003996:	2100      	movs	r1, #0
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fa9d 	bl	8003ed8 <hci_send_req>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	da01      	bge.n	80039a8 <aci_gatt_add_char_desc+0x200>
    return BLE_STATUS_TIMEOUT;
 80039a4:	23ff      	movs	r3, #255	; 0xff
 80039a6:	e00d      	b.n	80039c4 <aci_gatt_add_char_desc+0x21c>

  if (resp.status) {
 80039a8:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <aci_gatt_add_char_desc+0x20e>
    return resp.status;
 80039b0:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80039b4:	e006      	b.n	80039c4 <aci_gatt_add_char_desc+0x21c>
  }
    
  *descHandle = btohs(resp.handle);
 80039b6:	f8b7 3091 	ldrh.w	r3, [r7, #145]	; 0x91
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039c0:	801a      	strh	r2, [r3, #0]

  return 0;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	37b0      	adds	r7, #176	; 0xb0
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 80039cc:	b590      	push	{r4, r7, lr}
 80039ce:	b0ab      	sub	sp, #172	; 0xac
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4604      	mov	r4, r0
 80039d4:	4608      	mov	r0, r1
 80039d6:	4611      	mov	r1, r2
 80039d8:	461a      	mov	r2, r3
 80039da:	4623      	mov	r3, r4
 80039dc:	80fb      	strh	r3, [r7, #6]
 80039de:	4603      	mov	r3, r0
 80039e0:	80bb      	strh	r3, [r7, #4]
 80039e2:	460b      	mov	r3, r1
 80039e4:	70fb      	strb	r3, [r7, #3]
 80039e6:	4613      	mov	r3, r2
 80039e8:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80039f0:	78bb      	ldrb	r3, [r7, #2]
 80039f2:	3306      	adds	r3, #6
 80039f4:	2b80      	cmp	r3, #128	; 0x80
 80039f6:	dd01      	ble.n	80039fc <aci_gatt_update_char_value+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 80039f8:	2342      	movs	r3, #66	; 0x42
 80039fa:	e076      	b.n	8003aea <aci_gatt_update_char_value+0x11e>

  servHandle = htobs(servHandle);
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8003a00:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003a04:	f107 0208 	add.w	r2, r7, #8
 8003a08:	4413      	add	r3, r2
 8003a0a:	88fa      	ldrh	r2, [r7, #6]
 8003a0c:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8003a0e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003a12:	3302      	adds	r3, #2
 8003a14:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 8003a18:	88bb      	ldrh	r3, [r7, #4]
 8003a1a:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8003a1c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003a20:	f107 0208 	add.w	r2, r7, #8
 8003a24:	4413      	add	r3, r2
 8003a26:	88ba      	ldrh	r2, [r7, #4]
 8003a28:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8003a2a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003a2e:	3302      	adds	r3, #2
 8003a30:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 8003a34:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003a38:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003a3c:	4413      	add	r3, r2
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8003a44:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 8003a4e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003a52:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003a56:	4413      	add	r3, r2
 8003a58:	78ba      	ldrb	r2, [r7, #2]
 8003a5a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8003a5e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003a62:	3301      	adds	r3, #1
 8003a64:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8003a68:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003a6c:	f107 0208 	add.w	r2, r7, #8
 8003a70:	4413      	add	r3, r2
 8003a72:	78ba      	ldrb	r2, [r7, #2]
 8003a74:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fcef 	bl	800445c <memcpy>
  indx +=  charValueLen;
 8003a7e:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8003a82:	78bb      	ldrb	r3, [r7, #2]
 8003a84:	4413      	add	r3, r2
 8003a86:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003a8a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003a8e:	2218      	movs	r2, #24
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fced 	bl	8004472 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003a98:	233f      	movs	r3, #63	; 0x3f
 8003a9a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8003a9e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8003aa2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8003aa6:	f107 0308 	add.w	r3, r7, #8
 8003aaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8003aae:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003ab2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8003ab6:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8003aba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8003ac4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fa04 	bl	8003ed8 <hci_send_req>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	da01      	bge.n	8003ada <aci_gatt_update_char_value+0x10e>
    return BLE_STATUS_TIMEOUT;
 8003ad6:	23ff      	movs	r3, #255	; 0xff
 8003ad8:	e007      	b.n	8003aea <aci_gatt_update_char_value+0x11e>

  if (status) {
 8003ada:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <aci_gatt_update_char_value+0x11c>
    return status;
 8003ae2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8003ae6:	e000      	b.n	8003aea <aci_gatt_update_char_value+0x11e>
  }

  return 0;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	37ac      	adds	r7, #172	; 0xac
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd90      	pop	{r4, r7, pc}

08003af2 <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b08a      	sub	sp, #40	; 0x28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	4603      	mov	r3, r0
 8003afa:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8003b00:	f107 0310 	add.w	r3, r7, #16
 8003b04:	2218      	movs	r2, #24
 8003b06:	2100      	movs	r1, #0
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fcb2 	bl	8004472 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8003b0e:	233f      	movs	r3, #63	; 0x3f
 8003b10:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8003b12:	f240 1327 	movw	r3, #295	; 0x127
 8003b16:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8003b18:	f107 030c 	add.w	r3, r7, #12
 8003b1c:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8003b22:	f107 030b 	add.w	r3, r7, #11
 8003b26:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8003b2c:	f107 0310 	add.w	r3, r7, #16
 8003b30:	2100      	movs	r1, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 f9d0 	bl	8003ed8 <hci_send_req>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	da01      	bge.n	8003b42 <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8003b3e:	23ff      	movs	r3, #255	; 0xff
 8003b40:	e000      	b.n	8003b44 <aci_gatt_allow_read+0x52>

    return status;
 8003b42:	7afb      	ldrb	r3, [r7, #11]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3728      	adds	r7, #40	; 0x28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b0aa      	sub	sp, #168	; 0xa8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	603a      	str	r2, [r7, #0]
 8003b56:	71fb      	strb	r3, [r7, #7]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8003b62:	79bb      	ldrb	r3, [r7, #6]
 8003b64:	3302      	adds	r3, #2
 8003b66:	2b80      	cmp	r3, #128	; 0x80
 8003b68:	dd01      	ble.n	8003b6e <aci_hal_write_config_data+0x22>
    return BLE_STATUS_INVALID_PARAMS;
 8003b6a:	2342      	movs	r3, #66	; 0x42
 8003b6c:	e052      	b.n	8003c14 <aci_hal_write_config_data+0xc8>

  buffer[indx] = offset;
 8003b6e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003b72:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b76:	4413      	add	r3, r2
 8003b78:	79fa      	ldrb	r2, [r7, #7]
 8003b7a:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8003b7e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003b82:	3301      	adds	r3, #1
 8003b84:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 8003b88:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003b8c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003b90:	4413      	add	r3, r2
 8003b92:	79ba      	ldrb	r2, [r7, #6]
 8003b94:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8003b98:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8003ba2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003ba6:	f107 0208 	add.w	r2, r7, #8
 8003baa:	4413      	add	r3, r2
 8003bac:	79ba      	ldrb	r2, [r7, #6]
 8003bae:	6839      	ldr	r1, [r7, #0]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fc53 	bl	800445c <memcpy>
  indx +=  len;
 8003bb6:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8003bba:	79bb      	ldrb	r3, [r7, #6]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003bc2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003bc6:	2218      	movs	r2, #24
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fc51 	bl	8004472 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003bd0:	233f      	movs	r3, #63	; 0x3f
 8003bd2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8003bd6:	230c      	movs	r3, #12
 8003bd8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8003bdc:	f107 0308 	add.w	r3, r7, #8
 8003be0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8003be4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8003be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8003bec:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8003bf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8003bfa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003bfe:	2100      	movs	r1, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 f969 	bl	8003ed8 <hci_send_req>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	da01      	bge.n	8003c10 <aci_hal_write_config_data+0xc4>
    return BLE_STATUS_TIMEOUT;
 8003c0c:	23ff      	movs	r3, #255	; 0xff
 8003c0e:	e001      	b.n	8003c14 <aci_hal_write_config_data+0xc8>

  return status;
 8003c10:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	37a8      	adds	r7, #168	; 0xa8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003c22:	f107 0308 	add.w	r3, r7, #8
 8003c26:	2218      	movs	r2, #24
 8003c28:	2100      	movs	r1, #0
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f000 fc21 	bl	8004472 <memset>
  rq.ogf = OGF_HOST_CTL;
 8003c30:	2303      	movs	r3, #3
 8003c32:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8003c34:	2303      	movs	r3, #3
 8003c36:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8003c38:	1dfb      	adds	r3, r7, #7
 8003c3a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003c40:	f107 0308 	add.w	r3, r7, #8
 8003c44:	2100      	movs	r1, #0
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 f946 	bl	8003ed8 <hci_send_req>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	da01      	bge.n	8003c56 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8003c52:	23ff      	movs	r3, #255	; 0xff
 8003c54:	e000      	b.n	8003c58 <hci_reset+0x3c>
  
  return status;  
 8003c56:	79fb      	ldrb	r3, [r7, #7]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3720      	adds	r7, #32
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b092      	sub	sp, #72	; 0x48
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	6039      	str	r1, [r7, #0]
 8003c6a:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8003c6c:	f107 0310 	add.w	r3, r7, #16
 8003c70:	2220      	movs	r2, #32
 8003c72:	2100      	movs	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fbfc 	bl	8004472 <memset>
  scan_resp_cp.length = length;
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	2b1f      	cmp	r3, #31
 8003c82:	bf28      	it	cs
 8003c84:	231f      	movcs	r3, #31
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	f107 0310 	add.w	r3, r7, #16
 8003c8e:	3301      	adds	r3, #1
 8003c90:	6839      	ldr	r1, [r7, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fbe2 	bl	800445c <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003c98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c9c:	2218      	movs	r2, #24
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fbe6 	bl	8004472 <memset>
  rq.ogf = OGF_LE_CTL;
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8003caa:	2309      	movs	r3, #9
 8003cac:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 8003cae:	f107 0310 	add.w	r3, r7, #16
 8003cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8003cb4:	2320      	movs	r3, #32
 8003cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8003cb8:	f107 030f 	add.w	r3, r7, #15
 8003cbc:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003cc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 f905 	bl	8003ed8 <hci_send_req>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	da01      	bge.n	8003cd8 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8003cd4:	23ff      	movs	r3, #255	; 0xff
 8003cd6:	e000      	b.n	8003cda <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3748      	adds	r7, #72	; 0x48
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3308      	adds	r3, #8
 8003cee:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d001      	beq.n	8003cfc <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e00c      	b.n	8003d16 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3302      	adds	r3, #2
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003d0a:	3b03      	subs	r3, #3
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d001      	beq.n	8003d14 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8003d10:	2302      	movs	r3, #2
 8003d12:	e000      	b.n	8003d16 <verify_packet+0x34>
  
  return 0;      
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b0a6      	sub	sp, #152	; 0x98
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	607b      	str	r3, [r7, #4]
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	81fb      	strh	r3, [r7, #14]
 8003d30:	460b      	mov	r3, r1
 8003d32:	81bb      	strh	r3, [r7, #12]
 8003d34:	4613      	mov	r3, r2
 8003d36:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8003d38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d40:	b21a      	sxth	r2, r3
 8003d42:	89fb      	ldrh	r3, [r7, #14]
 8003d44:	029b      	lsls	r3, r3, #10
 8003d46:	b21b      	sxth	r3, r3
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	b21b      	sxth	r3, r3
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8003d50:	7afb      	ldrb	r3, [r7, #11]
 8003d52:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8003d54:	2301      	movs	r3, #1
 8003d56:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8003d58:	f107 0318 	add.w	r3, r7, #24
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f107 0314 	add.w	r3, r7, #20
 8003d64:	8819      	ldrh	r1, [r3, #0]
 8003d66:	789b      	ldrb	r3, [r3, #2]
 8003d68:	8011      	strh	r1, [r2, #0]
 8003d6a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8003d6c:	f107 0318 	add.w	r3, r7, #24
 8003d70:	3304      	adds	r3, #4
 8003d72:	7afa      	ldrb	r2, [r7, #11]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fb70 	bl	800445c <memcpy>
  
  if (hciContext.io.Send)
 8003d7c:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <send_cmd+0x7c>)
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d009      	beq.n	8003d98 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <send_cmd+0x7c>)
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	7afa      	ldrb	r2, [r7, #11]
 8003d8a:	b292      	uxth	r2, r2
 8003d8c:	3204      	adds	r2, #4
 8003d8e:	b291      	uxth	r1, r2
 8003d90:	f107 0218 	add.w	r2, r7, #24
 8003d94:	4610      	mov	r0, r2
 8003d96:	4798      	blx	r3
  }
}
 8003d98:	bf00      	nop
 8003d9a:	3798      	adds	r7, #152	; 0x98
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20000458 	.word	0x20000458

08003da4 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8003dae:	e00a      	b.n	8003dc6 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8003db0:	f107 030c 	add.w	r3, r7, #12
 8003db4:	4619      	mov	r1, r3
 8003db6:	6838      	ldr	r0, [r7, #0]
 8003db8:	f000 fada 	bl	8004370 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fa49 	bl	8004258 <list_insert_head>
  while (!list_is_empty(src_list))
 8003dc6:	6838      	ldr	r0, [r7, #0]
 8003dc8:	f000 fa26 	bl	8004218 <list_is_empty>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0ee      	beq.n	8003db0 <move_list+0xc>
  }
}
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003de2:	e009      	b.n	8003df8 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8003de4:	1d3b      	adds	r3, r7, #4
 8003de6:	4619      	mov	r1, r3
 8003de8:	4808      	ldr	r0, [pc, #32]	; (8003e0c <free_event_list+0x30>)
 8003dea:	f000 fa9c 	bl	8004326 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4619      	mov	r1, r3
 8003df2:	4807      	ldr	r0, [pc, #28]	; (8003e10 <free_event_list+0x34>)
 8003df4:	f000 fa54 	bl	80042a0 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003df8:	4805      	ldr	r0, [pc, #20]	; (8003e10 <free_event_list+0x34>)
 8003dfa:	f000 fade 	bl	80043ba <list_get_size>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	ddef      	ble.n	8003de4 <free_event_list+0x8>
  }
}
 8003e04:	bf00      	nop
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	20000534 	.word	0x20000534
 8003e10:	2000052c 	.word	0x2000052c

08003e14 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8003e24:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <hci_init+0x74>)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8003e2a:	4818      	ldr	r0, [pc, #96]	; (8003e8c <hci_init+0x78>)
 8003e2c:	f000 f9e4 	bl	80041f8 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8003e30:	4817      	ldr	r0, [pc, #92]	; (8003e90 <hci_init+0x7c>)
 8003e32:	f000 f9e1 	bl	80041f8 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8003e36:	f7fc fc8d 	bl	8000754 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	73fb      	strb	r3, [r7, #15]
 8003e3e:	e00c      	b.n	8003e5a <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	228c      	movs	r2, #140	; 0x8c
 8003e44:	fb02 f303 	mul.w	r3, r2, r3
 8003e48:	4a12      	ldr	r2, [pc, #72]	; (8003e94 <hci_init+0x80>)
 8003e4a:	4413      	add	r3, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	480f      	ldr	r0, [pc, #60]	; (8003e8c <hci_init+0x78>)
 8003e50:	f000 fa26 	bl	80042a0 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	3301      	adds	r3, #1
 8003e58:	73fb      	strb	r3, [r7, #15]
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d9ef      	bls.n	8003e40 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8003e60:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <hci_init+0x74>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <hci_init+0x5c>
 8003e68:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <hci_init+0x74>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <hci_init+0x74>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <hci_init+0x6a>
 8003e78:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <hci_init+0x74>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4798      	blx	r3
}
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000458 	.word	0x20000458
 8003e8c:	2000052c 	.word	0x2000052c
 8003e90:	20000534 	.word	0x20000534
 8003e94:	2000019c 	.word	0x2000019c

08003e98 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a0b      	ldr	r2, [pc, #44]	; (8003ed4 <hci_register_io_bus+0x3c>)
 8003ea6:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a09      	ldr	r2, [pc, #36]	; (8003ed4 <hci_register_io_bus+0x3c>)
 8003eae:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	4a07      	ldr	r2, [pc, #28]	; (8003ed4 <hci_register_io_bus+0x3c>)
 8003eb6:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	4a05      	ldr	r2, [pc, #20]	; (8003ed4 <hci_register_io_bus+0x3c>)
 8003ebe:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	4a03      	ldr	r2, [pc, #12]	; (8003ed4 <hci_register_io_bus+0x3c>)
 8003ec6:	6093      	str	r3, [r2, #8]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	20000458 	.word	0x20000458

08003ed8 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08e      	sub	sp, #56	; 0x38
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	885b      	ldrh	r3, [r3, #2]
 8003ee8:	b21b      	sxth	r3, r3
 8003eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eee:	b21a      	sxth	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	029b      	lsls	r3, r3, #10
 8003ef6:	b21b      	sxth	r3, r3
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	b21b      	sxth	r3, r3
 8003efc:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8003f02:	f107 0308 	add.w	r3, r7, #8
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 f976 	bl	80041f8 <list_init_head>

  free_event_list();
 8003f0c:	f7ff ff66 	bl	8003ddc <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	8818      	ldrh	r0, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	8859      	ldrh	r1, [r3, #2]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f7ff feff 	bl	8003d24 <send_cmd>
  
  if (async)
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <hci_send_req+0x58>
  {
    return 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e0e2      	b.n	80040f6 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8003f30:	f7fd fa5c 	bl	80013ec <HAL_GetTick>
 8003f34:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003f36:	f7fd fa59 	bl	80013ec <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f44:	f200 80b3 	bhi.w	80040ae <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8003f48:	486d      	ldr	r0, [pc, #436]	; (8004100 <hci_send_req+0x228>)
 8003f4a:	f000 f965 	bl	8004218 <list_is_empty>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d000      	beq.n	8003f56 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003f54:	e7ef      	b.n	8003f36 <hci_send_req+0x5e>
      {
        break;
 8003f56:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8003f58:	f107 0310 	add.w	r3, r7, #16
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4868      	ldr	r0, [pc, #416]	; (8004100 <hci_send_req+0x228>)
 8003f60:	f000 f9e1 	bl	8004326 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	3308      	adds	r3, #8
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d17a      	bne.n	8004068 <hci_send_req+0x190>
    {
      event_pckt = (void *)(hci_hdr->data);
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	3301      	adds	r3, #1
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	3303      	adds	r3, #3
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8003f86:	3b03      	subs	r3, #3
 8003f88:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8003f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b0f      	cmp	r3, #15
 8003f90:	d00a      	beq.n	8003fa8 <hci_send_req+0xd0>
 8003f92:	2b0f      	cmp	r3, #15
 8003f94:	dc02      	bgt.n	8003f9c <hci_send_req+0xc4>
 8003f96:	2b0e      	cmp	r3, #14
 8003f98:	d028      	beq.n	8003fec <hci_send_req+0x114>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8003f9a:	e06a      	b.n	8004072 <hci_send_req+0x19a>
      switch (event_pckt->evt) 
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	f000 8088 	beq.w	80040b2 <hci_send_req+0x1da>
 8003fa2:	2b3e      	cmp	r3, #62	; 0x3e
 8003fa4:	d042      	beq.n	800402c <hci_send_req+0x154>
        break;
 8003fa6:	e064      	b.n	8004072 <hci_send_req+0x19a>
        cs = (void *) ptr;
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	61bb      	str	r3, [r7, #24]
        if (cs->opcode != opcode)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	885b      	ldrh	r3, [r3, #2]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d17e      	bne.n	80040b6 <hci_send_req+0x1de>
        if (r->event != EVT_CMD_STATUS) {
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b0f      	cmp	r3, #15
 8003fbe:	d004      	beq.n	8003fca <hci_send_req+0xf2>
          if (cs->status) {
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d051      	beq.n	800406c <hci_send_req+0x194>
            goto failed;
 8003fc8:	e078      	b.n	80040bc <hci_send_req+0x1e4>
        r->rlen = MIN(len, r->rlen);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	bf28      	it	cs
 8003fd4:	461a      	movcs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6918      	ldr	r0, [r3, #16]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fe6:	f000 fa39 	bl	800445c <memcpy>
        goto done;
 8003fea:	e078      	b.n	80040de <hci_send_req+0x206>
        cc = (void *) ptr;
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	617b      	str	r3, [r7, #20]
        if (cc->opcode != opcode)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d15d      	bne.n	80040ba <hci_send_req+0x1e2>
        ptr += EVT_CMD_COMPLETE_SIZE;
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	3303      	adds	r3, #3
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	3b03      	subs	r3, #3
 8004008:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	429a      	cmp	r2, r3
 8004012:	bf28      	it	cs
 8004014:	461a      	movcs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6918      	ldr	r0, [r3, #16]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	461a      	mov	r2, r3
 8004024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004026:	f000 fa19 	bl	800445c <memcpy>
        goto done;
 800402a:	e058      	b.n	80040de <hci_send_req+0x206>
        me = (void *) ptr;
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	61fb      	str	r3, [r7, #28]
        if (me->subevent != r->event)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	429a      	cmp	r2, r3
 800403c:	d118      	bne.n	8004070 <hci_send_req+0x198>
        len -= 1;
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	3b01      	subs	r3, #1
 8004042:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	429a      	cmp	r2, r3
 800404c:	bf28      	it	cs
 800404e:	461a      	movcs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6918      	ldr	r0, [r3, #16]
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	1c59      	adds	r1, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	461a      	mov	r2, r3
 8004062:	f000 f9fb 	bl	800445c <memcpy>
        goto done;
 8004066:	e03a      	b.n	80040de <hci_send_req+0x206>
      }
    }
 8004068:	bf00      	nop
 800406a:	e002      	b.n	8004072 <hci_send_req+0x19a>
          break;
 800406c:	bf00      	nop
 800406e:	e000      	b.n	8004072 <hci_send_req+0x19a>
          break;
 8004070:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8004072:	4824      	ldr	r0, [pc, #144]	; (8004104 <hci_send_req+0x22c>)
 8004074:	f000 f8d0 	bl	8004218 <list_is_empty>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00d      	beq.n	800409a <hci_send_req+0x1c2>
 800407e:	4820      	ldr	r0, [pc, #128]	; (8004100 <hci_send_req+0x228>)
 8004080:	f000 f8ca 	bl	8004218 <list_is_empty>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4619      	mov	r1, r3
 800408e:	481d      	ldr	r0, [pc, #116]	; (8004104 <hci_send_req+0x22c>)
 8004090:	f000 f906 	bl	80042a0 <list_insert_tail>
      hciReadPacket=NULL;
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	e008      	b.n	80040ac <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	f107 0308 	add.w	r3, r7, #8
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f8fc 	bl	80042a0 <list_insert_tail>
      hciReadPacket=NULL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	613b      	str	r3, [r7, #16]
  {
 80040ac:	e740      	b.n	8003f30 <hci_send_req+0x58>
        goto failed;
 80040ae:	bf00      	nop
 80040b0:	e004      	b.n	80040bc <hci_send_req+0x1e4>
        goto failed;
 80040b2:	bf00      	nop
 80040b4:	e002      	b.n	80040bc <hci_send_req+0x1e4>
          goto failed;
 80040b6:	bf00      	nop
 80040b8:	e000      	b.n	80040bc <hci_send_req+0x1e4>
          goto failed;
 80040ba:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4619      	mov	r1, r3
 80040c6:	480f      	ldr	r0, [pc, #60]	; (8004104 <hci_send_req+0x22c>)
 80040c8:	f000 f8c6 	bl	8004258 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80040cc:	f107 0308 	add.w	r3, r7, #8
 80040d0:	4619      	mov	r1, r3
 80040d2:	480b      	ldr	r0, [pc, #44]	; (8004100 <hci_send_req+0x228>)
 80040d4:	f7ff fe66 	bl	8003da4 <move_list>

  return -1;
 80040d8:	f04f 33ff 	mov.w	r3, #4294967295
 80040dc:	e00b      	b.n	80040f6 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4619      	mov	r1, r3
 80040e2:	4808      	ldr	r0, [pc, #32]	; (8004104 <hci_send_req+0x22c>)
 80040e4:	f000 f8b8 	bl	8004258 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80040e8:	f107 0308 	add.w	r3, r7, #8
 80040ec:	4619      	mov	r1, r3
 80040ee:	4804      	ldr	r0, [pc, #16]	; (8004100 <hci_send_req+0x228>)
 80040f0:	f7ff fe58 	bl	8003da4 <move_list>

  return 0;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3738      	adds	r7, #56	; 0x38
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000534 	.word	0x20000534
 8004104:	2000052c 	.word	0x2000052c

08004108 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 800410e:	2300      	movs	r3, #0
 8004110:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8004112:	e013      	b.n	800413c <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8004114:	1d3b      	adds	r3, r7, #4
 8004116:	4619      	mov	r1, r3
 8004118:	480d      	ldr	r0, [pc, #52]	; (8004150 <hci_user_evt_proc+0x48>)
 800411a:	f000 f904 	bl	8004326 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800411e:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <hci_user_evt_proc+0x4c>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8004126:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <hci_user_evt_proc+0x4c>)
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	3208      	adds	r2, #8
 800412e:	4610      	mov	r0, r2
 8004130:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4619      	mov	r1, r3
 8004136:	4808      	ldr	r0, [pc, #32]	; (8004158 <hci_user_evt_proc+0x50>)
 8004138:	f000 f8b2 	bl	80042a0 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800413c:	4804      	ldr	r0, [pc, #16]	; (8004150 <hci_user_evt_proc+0x48>)
 800413e:	f000 f86b 	bl	8004218 <list_is_empty>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0e5      	beq.n	8004114 <hci_user_evt_proc+0xc>
  }
}
 8004148:	bf00      	nop
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20000534 	.word	0x20000534
 8004154:	20000458 	.word	0x20000458
 8004158:	2000052c 	.word	0x2000052c

0800415c <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800416c:	481f      	ldr	r0, [pc, #124]	; (80041ec <hci_notify_asynch_evt+0x90>)
 800416e:	f000 f853 	bl	8004218 <list_is_empty>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d132      	bne.n	80041de <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8004178:	f107 030c 	add.w	r3, r7, #12
 800417c:	4619      	mov	r1, r3
 800417e:	481b      	ldr	r0, [pc, #108]	; (80041ec <hci_notify_asynch_evt+0x90>)
 8004180:	f000 f8d1 	bl	8004326 <list_remove_head>
    
    if (hciContext.io.Receive)
 8004184:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <hci_notify_asynch_evt+0x94>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d02a      	beq.n	80041e2 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800418c:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <hci_notify_asynch_evt+0x94>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	3208      	adds	r2, #8
 8004194:	2180      	movs	r1, #128	; 0x80
 8004196:	4610      	mov	r0, r2
 8004198:	4798      	blx	r3
 800419a:	4603      	mov	r3, r0
 800419c:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d016      	beq.n	80041d2 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	7cfa      	ldrb	r2, [r7, #19]
 80041a8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fd97 	bl	8003ce2 <verify_packet>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d105      	bne.n	80041c6 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4619      	mov	r1, r3
 80041be:	480d      	ldr	r0, [pc, #52]	; (80041f4 <hci_notify_asynch_evt+0x98>)
 80041c0:	f000 f86e 	bl	80042a0 <list_insert_tail>
 80041c4:	e00d      	b.n	80041e2 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4619      	mov	r1, r3
 80041ca:	4808      	ldr	r0, [pc, #32]	; (80041ec <hci_notify_asynch_evt+0x90>)
 80041cc:	f000 f844 	bl	8004258 <list_insert_head>
 80041d0:	e007      	b.n	80041e2 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4619      	mov	r1, r3
 80041d6:	4805      	ldr	r0, [pc, #20]	; (80041ec <hci_notify_asynch_evt+0x90>)
 80041d8:	f000 f83e 	bl	8004258 <list_insert_head>
 80041dc:	e001      	b.n	80041e2 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80041de:	2301      	movs	r3, #1
 80041e0:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80041e2:	697b      	ldr	r3, [r7, #20]

}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	2000052c 	.word	0x2000052c
 80041f0:	20000458 	.word	0x20000458
 80041f4:	20000534 	.word	0x20000534

080041f8 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	605a      	str	r2, [r3, #4]
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004220:	f3ef 8310 	mrs	r3, PRIMASK
 8004224:	60fb      	str	r3, [r7, #12]
  return(result);
 8004226:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004228:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800422a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	429a      	cmp	r2, r3
 8004234:	d102      	bne.n	800423c <list_is_empty+0x24>
  {
    return_value = 1;
 8004236:	2301      	movs	r3, #1
 8004238:	75fb      	strb	r3, [r7, #23]
 800423a:	e001      	b.n	8004240 <list_is_empty+0x28>
  }
  else
  {
    return_value = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	75fb      	strb	r3, [r7, #23]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800424a:	7dfb      	ldrb	r3, [r7, #23]
}
 800424c:	4618      	mov	r0, r3
 800424e:	371c      	adds	r7, #28
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004262:	f3ef 8310 	mrs	r3, PRIMASK
 8004266:	60fb      	str	r3, [r7, #12]
  return(result);
 8004268:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800426a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800426c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004294:	bf00      	nop
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042aa:	f3ef 8310 	mrs	r3, PRIMASK
 80042ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80042b0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80042b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80042b4:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80042dc:	bf00      	nop
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f0:	f3ef 8310 	mrs	r3, PRIMASK
 80042f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80042f6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80042f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80042fa:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6852      	ldr	r2, [r2, #4]
 800430e:	605a      	str	r2, [r3, #4]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b086      	sub	sp, #24
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004330:	f3ef 8310 	mrs	r3, PRIMASK
 8004334:	60fb      	str	r3, [r7, #12]
  return(result);
 8004336:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004338:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800433a:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff ffcd 	bl	80042e8 <list_remove_node>
  (*node)->next = NULL;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2200      	movs	r2, #0
 800435c:	605a      	str	r2, [r3, #4]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8004368:	bf00      	nop
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800437a:	f3ef 8310 	mrs	r3, PRIMASK
 800437e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004380:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8004382:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004384:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff ffa8 	bl	80042e8 <list_remove_node>
  (*node)->next = NULL;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2200      	movs	r2, #0
 80043a6:	605a      	str	r2, [r3, #4]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80043b2:	bf00      	nop
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b089      	sub	sp, #36	; 0x24
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  int size = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c6:	f3ef 8310 	mrs	r3, PRIMASK
 80043ca:	613b      	str	r3, [r7, #16]
  return(result);
 80043cc:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80043ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80043d0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80043d8:	e005      	b.n	80043e6 <list_get_size+0x2c>
  {
    size++;
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3301      	adds	r3, #1
 80043de:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d1f5      	bne.n	80043da <list_get_size+0x20>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80043f8:	69fb      	ldr	r3, [r7, #28]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3724      	adds	r7, #36	; 0x24
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <__errno>:
 8004408:	4b01      	ldr	r3, [pc, #4]	; (8004410 <__errno+0x8>)
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	2000000c 	.word	0x2000000c

08004414 <__libc_init_array>:
 8004414:	b570      	push	{r4, r5, r6, lr}
 8004416:	4e0d      	ldr	r6, [pc, #52]	; (800444c <__libc_init_array+0x38>)
 8004418:	4c0d      	ldr	r4, [pc, #52]	; (8004450 <__libc_init_array+0x3c>)
 800441a:	1ba4      	subs	r4, r4, r6
 800441c:	10a4      	asrs	r4, r4, #2
 800441e:	2500      	movs	r5, #0
 8004420:	42a5      	cmp	r5, r4
 8004422:	d109      	bne.n	8004438 <__libc_init_array+0x24>
 8004424:	4e0b      	ldr	r6, [pc, #44]	; (8004454 <__libc_init_array+0x40>)
 8004426:	4c0c      	ldr	r4, [pc, #48]	; (8004458 <__libc_init_array+0x44>)
 8004428:	f000 f8d4 	bl	80045d4 <_init>
 800442c:	1ba4      	subs	r4, r4, r6
 800442e:	10a4      	asrs	r4, r4, #2
 8004430:	2500      	movs	r5, #0
 8004432:	42a5      	cmp	r5, r4
 8004434:	d105      	bne.n	8004442 <__libc_init_array+0x2e>
 8004436:	bd70      	pop	{r4, r5, r6, pc}
 8004438:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800443c:	4798      	blx	r3
 800443e:	3501      	adds	r5, #1
 8004440:	e7ee      	b.n	8004420 <__libc_init_array+0xc>
 8004442:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004446:	4798      	blx	r3
 8004448:	3501      	adds	r5, #1
 800444a:	e7f2      	b.n	8004432 <__libc_init_array+0x1e>
 800444c:	08004658 	.word	0x08004658
 8004450:	08004658 	.word	0x08004658
 8004454:	08004658 	.word	0x08004658
 8004458:	0800465c 	.word	0x0800465c

0800445c <memcpy>:
 800445c:	b510      	push	{r4, lr}
 800445e:	1e43      	subs	r3, r0, #1
 8004460:	440a      	add	r2, r1
 8004462:	4291      	cmp	r1, r2
 8004464:	d100      	bne.n	8004468 <memcpy+0xc>
 8004466:	bd10      	pop	{r4, pc}
 8004468:	f811 4b01 	ldrb.w	r4, [r1], #1
 800446c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004470:	e7f7      	b.n	8004462 <memcpy+0x6>

08004472 <memset>:
 8004472:	4402      	add	r2, r0
 8004474:	4603      	mov	r3, r0
 8004476:	4293      	cmp	r3, r2
 8004478:	d100      	bne.n	800447c <memset+0xa>
 800447a:	4770      	bx	lr
 800447c:	f803 1b01 	strb.w	r1, [r3], #1
 8004480:	e7f9      	b.n	8004476 <memset+0x4>
	...

08004484 <rand>:
 8004484:	b538      	push	{r3, r4, r5, lr}
 8004486:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <rand+0x50>)
 8004488:	681c      	ldr	r4, [r3, #0]
 800448a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800448c:	b97b      	cbnz	r3, 80044ae <rand+0x2a>
 800448e:	2018      	movs	r0, #24
 8004490:	f000 f82c 	bl	80044ec <malloc>
 8004494:	4a10      	ldr	r2, [pc, #64]	; (80044d8 <rand+0x54>)
 8004496:	4b11      	ldr	r3, [pc, #68]	; (80044dc <rand+0x58>)
 8004498:	63a0      	str	r0, [r4, #56]	; 0x38
 800449a:	e9c0 2300 	strd	r2, r3, [r0]
 800449e:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <rand+0x5c>)
 80044a0:	6083      	str	r3, [r0, #8]
 80044a2:	230b      	movs	r3, #11
 80044a4:	8183      	strh	r3, [r0, #12]
 80044a6:	2201      	movs	r2, #1
 80044a8:	2300      	movs	r3, #0
 80044aa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80044ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80044b0:	480c      	ldr	r0, [pc, #48]	; (80044e4 <rand+0x60>)
 80044b2:	690a      	ldr	r2, [r1, #16]
 80044b4:	694b      	ldr	r3, [r1, #20]
 80044b6:	4c0c      	ldr	r4, [pc, #48]	; (80044e8 <rand+0x64>)
 80044b8:	4350      	muls	r0, r2
 80044ba:	fb04 0003 	mla	r0, r4, r3, r0
 80044be:	fba2 2304 	umull	r2, r3, r2, r4
 80044c2:	4403      	add	r3, r0
 80044c4:	1c54      	adds	r4, r2, #1
 80044c6:	f143 0500 	adc.w	r5, r3, #0
 80044ca:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80044ce:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
 80044d4:	2000000c 	.word	0x2000000c
 80044d8:	abcd330e 	.word	0xabcd330e
 80044dc:	e66d1234 	.word	0xe66d1234
 80044e0:	0005deec 	.word	0x0005deec
 80044e4:	5851f42d 	.word	0x5851f42d
 80044e8:	4c957f2d 	.word	0x4c957f2d

080044ec <malloc>:
 80044ec:	4b02      	ldr	r3, [pc, #8]	; (80044f8 <malloc+0xc>)
 80044ee:	4601      	mov	r1, r0
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	f000 b803 	b.w	80044fc <_malloc_r>
 80044f6:	bf00      	nop
 80044f8:	2000000c 	.word	0x2000000c

080044fc <_malloc_r>:
 80044fc:	b570      	push	{r4, r5, r6, lr}
 80044fe:	1ccd      	adds	r5, r1, #3
 8004500:	f025 0503 	bic.w	r5, r5, #3
 8004504:	3508      	adds	r5, #8
 8004506:	2d0c      	cmp	r5, #12
 8004508:	bf38      	it	cc
 800450a:	250c      	movcc	r5, #12
 800450c:	2d00      	cmp	r5, #0
 800450e:	4606      	mov	r6, r0
 8004510:	db01      	blt.n	8004516 <_malloc_r+0x1a>
 8004512:	42a9      	cmp	r1, r5
 8004514:	d903      	bls.n	800451e <_malloc_r+0x22>
 8004516:	230c      	movs	r3, #12
 8004518:	6033      	str	r3, [r6, #0]
 800451a:	2000      	movs	r0, #0
 800451c:	bd70      	pop	{r4, r5, r6, pc}
 800451e:	f000 f857 	bl	80045d0 <__malloc_lock>
 8004522:	4a21      	ldr	r2, [pc, #132]	; (80045a8 <_malloc_r+0xac>)
 8004524:	6814      	ldr	r4, [r2, #0]
 8004526:	4621      	mov	r1, r4
 8004528:	b991      	cbnz	r1, 8004550 <_malloc_r+0x54>
 800452a:	4c20      	ldr	r4, [pc, #128]	; (80045ac <_malloc_r+0xb0>)
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	b91b      	cbnz	r3, 8004538 <_malloc_r+0x3c>
 8004530:	4630      	mov	r0, r6
 8004532:	f000 f83d 	bl	80045b0 <_sbrk_r>
 8004536:	6020      	str	r0, [r4, #0]
 8004538:	4629      	mov	r1, r5
 800453a:	4630      	mov	r0, r6
 800453c:	f000 f838 	bl	80045b0 <_sbrk_r>
 8004540:	1c43      	adds	r3, r0, #1
 8004542:	d124      	bne.n	800458e <_malloc_r+0x92>
 8004544:	230c      	movs	r3, #12
 8004546:	6033      	str	r3, [r6, #0]
 8004548:	4630      	mov	r0, r6
 800454a:	f000 f842 	bl	80045d2 <__malloc_unlock>
 800454e:	e7e4      	b.n	800451a <_malloc_r+0x1e>
 8004550:	680b      	ldr	r3, [r1, #0]
 8004552:	1b5b      	subs	r3, r3, r5
 8004554:	d418      	bmi.n	8004588 <_malloc_r+0x8c>
 8004556:	2b0b      	cmp	r3, #11
 8004558:	d90f      	bls.n	800457a <_malloc_r+0x7e>
 800455a:	600b      	str	r3, [r1, #0]
 800455c:	50cd      	str	r5, [r1, r3]
 800455e:	18cc      	adds	r4, r1, r3
 8004560:	4630      	mov	r0, r6
 8004562:	f000 f836 	bl	80045d2 <__malloc_unlock>
 8004566:	f104 000b 	add.w	r0, r4, #11
 800456a:	1d23      	adds	r3, r4, #4
 800456c:	f020 0007 	bic.w	r0, r0, #7
 8004570:	1ac3      	subs	r3, r0, r3
 8004572:	d0d3      	beq.n	800451c <_malloc_r+0x20>
 8004574:	425a      	negs	r2, r3
 8004576:	50e2      	str	r2, [r4, r3]
 8004578:	e7d0      	b.n	800451c <_malloc_r+0x20>
 800457a:	428c      	cmp	r4, r1
 800457c:	684b      	ldr	r3, [r1, #4]
 800457e:	bf16      	itet	ne
 8004580:	6063      	strne	r3, [r4, #4]
 8004582:	6013      	streq	r3, [r2, #0]
 8004584:	460c      	movne	r4, r1
 8004586:	e7eb      	b.n	8004560 <_malloc_r+0x64>
 8004588:	460c      	mov	r4, r1
 800458a:	6849      	ldr	r1, [r1, #4]
 800458c:	e7cc      	b.n	8004528 <_malloc_r+0x2c>
 800458e:	1cc4      	adds	r4, r0, #3
 8004590:	f024 0403 	bic.w	r4, r4, #3
 8004594:	42a0      	cmp	r0, r4
 8004596:	d005      	beq.n	80045a4 <_malloc_r+0xa8>
 8004598:	1a21      	subs	r1, r4, r0
 800459a:	4630      	mov	r0, r6
 800459c:	f000 f808 	bl	80045b0 <_sbrk_r>
 80045a0:	3001      	adds	r0, #1
 80045a2:	d0cf      	beq.n	8004544 <_malloc_r+0x48>
 80045a4:	6025      	str	r5, [r4, #0]
 80045a6:	e7db      	b.n	8004560 <_malloc_r+0x64>
 80045a8:	20000478 	.word	0x20000478
 80045ac:	2000047c 	.word	0x2000047c

080045b0 <_sbrk_r>:
 80045b0:	b538      	push	{r3, r4, r5, lr}
 80045b2:	4c06      	ldr	r4, [pc, #24]	; (80045cc <_sbrk_r+0x1c>)
 80045b4:	2300      	movs	r3, #0
 80045b6:	4605      	mov	r5, r0
 80045b8:	4608      	mov	r0, r1
 80045ba:	6023      	str	r3, [r4, #0]
 80045bc:	f7fc fda8 	bl	8001110 <_sbrk>
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	d102      	bne.n	80045ca <_sbrk_r+0x1a>
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	b103      	cbz	r3, 80045ca <_sbrk_r+0x1a>
 80045c8:	602b      	str	r3, [r5, #0]
 80045ca:	bd38      	pop	{r3, r4, r5, pc}
 80045cc:	2000053c 	.word	0x2000053c

080045d0 <__malloc_lock>:
 80045d0:	4770      	bx	lr

080045d2 <__malloc_unlock>:
 80045d2:	4770      	bx	lr

080045d4 <_init>:
 80045d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d6:	bf00      	nop
 80045d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045da:	bc08      	pop	{r3}
 80045dc:	469e      	mov	lr, r3
 80045de:	4770      	bx	lr

080045e0 <_fini>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	bf00      	nop
 80045e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e6:	bc08      	pop	{r3}
 80045e8:	469e      	mov	lr, r3
 80045ea:	4770      	bx	lr
